
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f40  08003f40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f48  08003f48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  08003fc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003fc0  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2f6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003660  00000000  00000000  0003a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0003d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001598d  00000000  00000000  0003fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000495d  00000000  00000000  000557e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0005a142  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002bdc  00000000  00000000  0005a194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00012506  00000000  00000000  0005cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d78 	.word	0x08003d78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003d78 	.word	0x08003d78

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_ldivmod>:
 8000440:	2b00      	cmp	r3, #0
 8000442:	d115      	bne.n	8000470 <__aeabi_ldivmod+0x30>
 8000444:	2a00      	cmp	r2, #0
 8000446:	d113      	bne.n	8000470 <__aeabi_ldivmod+0x30>
 8000448:	2900      	cmp	r1, #0
 800044a:	db06      	blt.n	800045a <__aeabi_ldivmod+0x1a>
 800044c:	dc01      	bgt.n	8000452 <__aeabi_ldivmod+0x12>
 800044e:	2800      	cmp	r0, #0
 8000450:	d006      	beq.n	8000460 <__aeabi_ldivmod+0x20>
 8000452:	2000      	movs	r0, #0
 8000454:	43c0      	mvns	r0, r0
 8000456:	0841      	lsrs	r1, r0, #1
 8000458:	e002      	b.n	8000460 <__aeabi_ldivmod+0x20>
 800045a:	2180      	movs	r1, #128	; 0x80
 800045c:	0609      	lsls	r1, r1, #24
 800045e:	2000      	movs	r0, #0
 8000460:	b407      	push	{r0, r1, r2}
 8000462:	4802      	ldr	r0, [pc, #8]	; (800046c <__aeabi_ldivmod+0x2c>)
 8000464:	a101      	add	r1, pc, #4	; (adr r1, 800046c <__aeabi_ldivmod+0x2c>)
 8000466:	1840      	adds	r0, r0, r1
 8000468:	9002      	str	r0, [sp, #8]
 800046a:	bd03      	pop	{r0, r1, pc}
 800046c:	ffffffd1 	.word	0xffffffd1
 8000470:	b403      	push	{r0, r1}
 8000472:	4668      	mov	r0, sp
 8000474:	b501      	push	{r0, lr}
 8000476:	9802      	ldr	r0, [sp, #8]
 8000478:	f000 f920 	bl	80006bc <__gnu_ldivmod_helper>
 800047c:	9b01      	ldr	r3, [sp, #4]
 800047e:	469e      	mov	lr, r3
 8000480:	b002      	add	sp, #8
 8000482:	bc0c      	pop	{r2, r3}
 8000484:	4770      	bx	lr
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_uldivmod>:
 8000488:	2b00      	cmp	r3, #0
 800048a:	d111      	bne.n	80004b0 <__aeabi_uldivmod+0x28>
 800048c:	2a00      	cmp	r2, #0
 800048e:	d10f      	bne.n	80004b0 <__aeabi_uldivmod+0x28>
 8000490:	2900      	cmp	r1, #0
 8000492:	d100      	bne.n	8000496 <__aeabi_uldivmod+0xe>
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <__aeabi_uldivmod+0x16>
 8000498:	2100      	movs	r1, #0
 800049a:	43c9      	mvns	r1, r1
 800049c:	0008      	movs	r0, r1
 800049e:	b407      	push	{r0, r1, r2}
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_uldivmod+0x24>)
 80004a2:	a102      	add	r1, pc, #8	; (adr r1, 80004ac <__aeabi_uldivmod+0x24>)
 80004a4:	1840      	adds	r0, r0, r1
 80004a6:	9002      	str	r0, [sp, #8]
 80004a8:	bd03      	pop	{r0, r1, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	ffffff91 	.word	0xffffff91
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f834 	bl	8000524 <__udivmoddi4>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_lmul>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	46ce      	mov	lr, r9
 80004cc:	4647      	mov	r7, r8
 80004ce:	b580      	push	{r7, lr}
 80004d0:	0007      	movs	r7, r0
 80004d2:	4699      	mov	r9, r3
 80004d4:	0c3b      	lsrs	r3, r7, #16
 80004d6:	469c      	mov	ip, r3
 80004d8:	0413      	lsls	r3, r2, #16
 80004da:	0c1b      	lsrs	r3, r3, #16
 80004dc:	001d      	movs	r5, r3
 80004de:	000e      	movs	r6, r1
 80004e0:	4661      	mov	r1, ip
 80004e2:	0400      	lsls	r0, r0, #16
 80004e4:	0c14      	lsrs	r4, r2, #16
 80004e6:	0c00      	lsrs	r0, r0, #16
 80004e8:	4345      	muls	r5, r0
 80004ea:	434b      	muls	r3, r1
 80004ec:	4360      	muls	r0, r4
 80004ee:	4361      	muls	r1, r4
 80004f0:	18c0      	adds	r0, r0, r3
 80004f2:	0c2c      	lsrs	r4, r5, #16
 80004f4:	1820      	adds	r0, r4, r0
 80004f6:	468c      	mov	ip, r1
 80004f8:	4283      	cmp	r3, r0
 80004fa:	d903      	bls.n	8000504 <__aeabi_lmul+0x3c>
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	025b      	lsls	r3, r3, #9
 8000500:	4698      	mov	r8, r3
 8000502:	44c4      	add	ip, r8
 8000504:	4649      	mov	r1, r9
 8000506:	4379      	muls	r1, r7
 8000508:	4372      	muls	r2, r6
 800050a:	0c03      	lsrs	r3, r0, #16
 800050c:	4463      	add	r3, ip
 800050e:	042d      	lsls	r5, r5, #16
 8000510:	0c2d      	lsrs	r5, r5, #16
 8000512:	18c9      	adds	r1, r1, r3
 8000514:	0400      	lsls	r0, r0, #16
 8000516:	1940      	adds	r0, r0, r5
 8000518:	1889      	adds	r1, r1, r2
 800051a:	bcc0      	pop	{r6, r7}
 800051c:	46b9      	mov	r9, r7
 800051e:	46b0      	mov	r8, r6
 8000520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__udivmoddi4>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	4657      	mov	r7, sl
 8000528:	464e      	mov	r6, r9
 800052a:	4645      	mov	r5, r8
 800052c:	46de      	mov	lr, fp
 800052e:	b5e0      	push	{r5, r6, r7, lr}
 8000530:	0004      	movs	r4, r0
 8000532:	000d      	movs	r5, r1
 8000534:	4692      	mov	sl, r2
 8000536:	4699      	mov	r9, r3
 8000538:	b083      	sub	sp, #12
 800053a:	428b      	cmp	r3, r1
 800053c:	d830      	bhi.n	80005a0 <__udivmoddi4+0x7c>
 800053e:	d02d      	beq.n	800059c <__udivmoddi4+0x78>
 8000540:	4649      	mov	r1, r9
 8000542:	4650      	mov	r0, sl
 8000544:	f000 f8d8 	bl	80006f8 <__clzdi2>
 8000548:	0029      	movs	r1, r5
 800054a:	0006      	movs	r6, r0
 800054c:	0020      	movs	r0, r4
 800054e:	f000 f8d3 	bl	80006f8 <__clzdi2>
 8000552:	1a33      	subs	r3, r6, r0
 8000554:	4698      	mov	r8, r3
 8000556:	3b20      	subs	r3, #32
 8000558:	469b      	mov	fp, r3
 800055a:	d433      	bmi.n	80005c4 <__udivmoddi4+0xa0>
 800055c:	465a      	mov	r2, fp
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	4642      	mov	r2, r8
 8000564:	001f      	movs	r7, r3
 8000566:	4653      	mov	r3, sl
 8000568:	4093      	lsls	r3, r2
 800056a:	001e      	movs	r6, r3
 800056c:	42af      	cmp	r7, r5
 800056e:	d83a      	bhi.n	80005e6 <__udivmoddi4+0xc2>
 8000570:	42af      	cmp	r7, r5
 8000572:	d100      	bne.n	8000576 <__udivmoddi4+0x52>
 8000574:	e078      	b.n	8000668 <__udivmoddi4+0x144>
 8000576:	465b      	mov	r3, fp
 8000578:	1ba4      	subs	r4, r4, r6
 800057a:	41bd      	sbcs	r5, r7
 800057c:	2b00      	cmp	r3, #0
 800057e:	da00      	bge.n	8000582 <__udivmoddi4+0x5e>
 8000580:	e075      	b.n	800066e <__udivmoddi4+0x14a>
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	465a      	mov	r2, fp
 800058e:	4093      	lsls	r3, r2
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	4642      	mov	r2, r8
 8000596:	4093      	lsls	r3, r2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	e028      	b.n	80005ee <__udivmoddi4+0xca>
 800059c:	4282      	cmp	r2, r0
 800059e:	d9cf      	bls.n	8000540 <__udivmoddi4+0x1c>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <__udivmoddi4+0x8e>
 80005ae:	601c      	str	r4, [r3, #0]
 80005b0:	605d      	str	r5, [r3, #4]
 80005b2:	9800      	ldr	r0, [sp, #0]
 80005b4:	9901      	ldr	r1, [sp, #4]
 80005b6:	b003      	add	sp, #12
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	46bb      	mov	fp, r7
 80005bc:	46b2      	mov	sl, r6
 80005be:	46a9      	mov	r9, r5
 80005c0:	46a0      	mov	r8, r4
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c4:	4642      	mov	r2, r8
 80005c6:	2320      	movs	r3, #32
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	4652      	mov	r2, sl
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	4641      	mov	r1, r8
 80005d0:	0013      	movs	r3, r2
 80005d2:	464a      	mov	r2, r9
 80005d4:	408a      	lsls	r2, r1
 80005d6:	0017      	movs	r7, r2
 80005d8:	4642      	mov	r2, r8
 80005da:	431f      	orrs	r7, r3
 80005dc:	4653      	mov	r3, sl
 80005de:	4093      	lsls	r3, r2
 80005e0:	001e      	movs	r6, r3
 80005e2:	42af      	cmp	r7, r5
 80005e4:	d9c4      	bls.n	8000570 <__udivmoddi4+0x4c>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	4643      	mov	r3, r8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0d9      	beq.n	80005a8 <__udivmoddi4+0x84>
 80005f4:	07fb      	lsls	r3, r7, #31
 80005f6:	0872      	lsrs	r2, r6, #1
 80005f8:	431a      	orrs	r2, r3
 80005fa:	4646      	mov	r6, r8
 80005fc:	087b      	lsrs	r3, r7, #1
 80005fe:	e00e      	b.n	800061e <__udivmoddi4+0xfa>
 8000600:	42ab      	cmp	r3, r5
 8000602:	d101      	bne.n	8000608 <__udivmoddi4+0xe4>
 8000604:	42a2      	cmp	r2, r4
 8000606:	d80c      	bhi.n	8000622 <__udivmoddi4+0xfe>
 8000608:	1aa4      	subs	r4, r4, r2
 800060a:	419d      	sbcs	r5, r3
 800060c:	2001      	movs	r0, #1
 800060e:	1924      	adds	r4, r4, r4
 8000610:	416d      	adcs	r5, r5
 8000612:	2100      	movs	r1, #0
 8000614:	3e01      	subs	r6, #1
 8000616:	1824      	adds	r4, r4, r0
 8000618:	414d      	adcs	r5, r1
 800061a:	2e00      	cmp	r6, #0
 800061c:	d006      	beq.n	800062c <__udivmoddi4+0x108>
 800061e:	42ab      	cmp	r3, r5
 8000620:	d9ee      	bls.n	8000600 <__udivmoddi4+0xdc>
 8000622:	3e01      	subs	r6, #1
 8000624:	1924      	adds	r4, r4, r4
 8000626:	416d      	adcs	r5, r5
 8000628:	2e00      	cmp	r6, #0
 800062a:	d1f8      	bne.n	800061e <__udivmoddi4+0xfa>
 800062c:	9800      	ldr	r0, [sp, #0]
 800062e:	9901      	ldr	r1, [sp, #4]
 8000630:	465b      	mov	r3, fp
 8000632:	1900      	adds	r0, r0, r4
 8000634:	4169      	adcs	r1, r5
 8000636:	2b00      	cmp	r3, #0
 8000638:	db24      	blt.n	8000684 <__udivmoddi4+0x160>
 800063a:	002b      	movs	r3, r5
 800063c:	465a      	mov	r2, fp
 800063e:	4644      	mov	r4, r8
 8000640:	40d3      	lsrs	r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	40e2      	lsrs	r2, r4
 8000646:	001c      	movs	r4, r3
 8000648:	465b      	mov	r3, fp
 800064a:	0015      	movs	r5, r2
 800064c:	2b00      	cmp	r3, #0
 800064e:	db2a      	blt.n	80006a6 <__udivmoddi4+0x182>
 8000650:	0026      	movs	r6, r4
 8000652:	409e      	lsls	r6, r3
 8000654:	0033      	movs	r3, r6
 8000656:	0026      	movs	r6, r4
 8000658:	4647      	mov	r7, r8
 800065a:	40be      	lsls	r6, r7
 800065c:	0032      	movs	r2, r6
 800065e:	1a80      	subs	r0, r0, r2
 8000660:	4199      	sbcs	r1, r3
 8000662:	9000      	str	r0, [sp, #0]
 8000664:	9101      	str	r1, [sp, #4]
 8000666:	e79f      	b.n	80005a8 <__udivmoddi4+0x84>
 8000668:	42a3      	cmp	r3, r4
 800066a:	d8bc      	bhi.n	80005e6 <__udivmoddi4+0xc2>
 800066c:	e783      	b.n	8000576 <__udivmoddi4+0x52>
 800066e:	4642      	mov	r2, r8
 8000670:	2320      	movs	r3, #32
 8000672:	2100      	movs	r1, #0
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	2200      	movs	r2, #0
 8000678:	9100      	str	r1, [sp, #0]
 800067a:	9201      	str	r2, [sp, #4]
 800067c:	2201      	movs	r2, #1
 800067e:	40da      	lsrs	r2, r3
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	e786      	b.n	8000592 <__udivmoddi4+0x6e>
 8000684:	4642      	mov	r2, r8
 8000686:	2320      	movs	r3, #32
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	002a      	movs	r2, r5
 800068c:	4646      	mov	r6, r8
 800068e:	409a      	lsls	r2, r3
 8000690:	0023      	movs	r3, r4
 8000692:	40f3      	lsrs	r3, r6
 8000694:	4644      	mov	r4, r8
 8000696:	4313      	orrs	r3, r2
 8000698:	002a      	movs	r2, r5
 800069a:	40e2      	lsrs	r2, r4
 800069c:	001c      	movs	r4, r3
 800069e:	465b      	mov	r3, fp
 80006a0:	0015      	movs	r5, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dad4      	bge.n	8000650 <__udivmoddi4+0x12c>
 80006a6:	4642      	mov	r2, r8
 80006a8:	002f      	movs	r7, r5
 80006aa:	2320      	movs	r3, #32
 80006ac:	0026      	movs	r6, r4
 80006ae:	4097      	lsls	r7, r2
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	40de      	lsrs	r6, r3
 80006b4:	003b      	movs	r3, r7
 80006b6:	4333      	orrs	r3, r6
 80006b8:	e7cd      	b.n	8000656 <__udivmoddi4+0x132>
 80006ba:	46c0      	nop			; (mov r8, r8)

080006bc <__gnu_ldivmod_helper>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	46ce      	mov	lr, r9
 80006c0:	4647      	mov	r7, r8
 80006c2:	b580      	push	{r7, lr}
 80006c4:	4691      	mov	r9, r2
 80006c6:	4698      	mov	r8, r3
 80006c8:	0004      	movs	r4, r0
 80006ca:	000d      	movs	r5, r1
 80006cc:	f000 f820 	bl	8000710 <__divdi3>
 80006d0:	0007      	movs	r7, r0
 80006d2:	000e      	movs	r6, r1
 80006d4:	0002      	movs	r2, r0
 80006d6:	000b      	movs	r3, r1
 80006d8:	4648      	mov	r0, r9
 80006da:	4641      	mov	r1, r8
 80006dc:	f7ff fef4 	bl	80004c8 <__aeabi_lmul>
 80006e0:	1a24      	subs	r4, r4, r0
 80006e2:	418d      	sbcs	r5, r1
 80006e4:	9b08      	ldr	r3, [sp, #32]
 80006e6:	0038      	movs	r0, r7
 80006e8:	0031      	movs	r1, r6
 80006ea:	601c      	str	r4, [r3, #0]
 80006ec:	605d      	str	r5, [r3, #4]
 80006ee:	bcc0      	pop	{r6, r7}
 80006f0:	46b9      	mov	r9, r7
 80006f2:	46b0      	mov	r8, r6
 80006f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)

080006f8 <__clzdi2>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d103      	bne.n	8000706 <__clzdi2+0xe>
 80006fe:	f000 f8ed 	bl	80008dc <__clzsi2>
 8000702:	3020      	adds	r0, #32
 8000704:	e002      	b.n	800070c <__clzdi2+0x14>
 8000706:	0008      	movs	r0, r1
 8000708:	f000 f8e8 	bl	80008dc <__clzsi2>
 800070c:	bd10      	pop	{r4, pc}
 800070e:	46c0      	nop			; (mov r8, r8)

08000710 <__divdi3>:
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	4657      	mov	r7, sl
 8000714:	464e      	mov	r6, r9
 8000716:	4645      	mov	r5, r8
 8000718:	46de      	mov	lr, fp
 800071a:	b5e0      	push	{r5, r6, r7, lr}
 800071c:	000f      	movs	r7, r1
 800071e:	0019      	movs	r1, r3
 8000720:	2300      	movs	r3, #0
 8000722:	0006      	movs	r6, r0
 8000724:	4698      	mov	r8, r3
 8000726:	0010      	movs	r0, r2
 8000728:	b083      	sub	sp, #12
 800072a:	2f00      	cmp	r7, #0
 800072c:	da07      	bge.n	800073e <__divdi3+0x2e>
 800072e:	0033      	movs	r3, r6
 8000730:	003c      	movs	r4, r7
 8000732:	2700      	movs	r7, #0
 8000734:	425e      	negs	r6, r3
 8000736:	41a7      	sbcs	r7, r4
 8000738:	2301      	movs	r3, #1
 800073a:	425b      	negs	r3, r3
 800073c:	4698      	mov	r8, r3
 800073e:	2900      	cmp	r1, #0
 8000740:	da07      	bge.n	8000752 <__divdi3+0x42>
 8000742:	4643      	mov	r3, r8
 8000744:	43db      	mvns	r3, r3
 8000746:	000c      	movs	r4, r1
 8000748:	4698      	mov	r8, r3
 800074a:	0003      	movs	r3, r0
 800074c:	2100      	movs	r1, #0
 800074e:	4258      	negs	r0, r3
 8000750:	41a1      	sbcs	r1, r4
 8000752:	0034      	movs	r4, r6
 8000754:	003d      	movs	r5, r7
 8000756:	4682      	mov	sl, r0
 8000758:	4689      	mov	r9, r1
 800075a:	42b9      	cmp	r1, r7
 800075c:	d86a      	bhi.n	8000834 <__divdi3+0x124>
 800075e:	d067      	beq.n	8000830 <__divdi3+0x120>
 8000760:	4649      	mov	r1, r9
 8000762:	4650      	mov	r0, sl
 8000764:	f7ff ffc8 	bl	80006f8 <__clzdi2>
 8000768:	4683      	mov	fp, r0
 800076a:	0039      	movs	r1, r7
 800076c:	0030      	movs	r0, r6
 800076e:	f7ff ffc3 	bl	80006f8 <__clzdi2>
 8000772:	465b      	mov	r3, fp
 8000774:	1a1b      	subs	r3, r3, r0
 8000776:	469c      	mov	ip, r3
 8000778:	3b20      	subs	r3, #32
 800077a:	469b      	mov	fp, r3
 800077c:	d46b      	bmi.n	8000856 <__divdi3+0x146>
 800077e:	4658      	mov	r0, fp
 8000780:	4651      	mov	r1, sl
 8000782:	4081      	lsls	r1, r0
 8000784:	4660      	mov	r0, ip
 8000786:	000b      	movs	r3, r1
 8000788:	4651      	mov	r1, sl
 800078a:	4081      	lsls	r1, r0
 800078c:	000a      	movs	r2, r1
 800078e:	42bb      	cmp	r3, r7
 8000790:	d900      	bls.n	8000794 <__divdi3+0x84>
 8000792:	e072      	b.n	800087a <__divdi3+0x16a>
 8000794:	42bb      	cmp	r3, r7
 8000796:	d100      	bne.n	800079a <__divdi3+0x8a>
 8000798:	e079      	b.n	800088e <__divdi3+0x17e>
 800079a:	0034      	movs	r4, r6
 800079c:	003d      	movs	r5, r7
 800079e:	4659      	mov	r1, fp
 80007a0:	1aa4      	subs	r4, r4, r2
 80007a2:	419d      	sbcs	r5, r3
 80007a4:	2900      	cmp	r1, #0
 80007a6:	da00      	bge.n	80007aa <__divdi3+0x9a>
 80007a8:	e074      	b.n	8000894 <__divdi3+0x184>
 80007aa:	2100      	movs	r1, #0
 80007ac:	2000      	movs	r0, #0
 80007ae:	2601      	movs	r6, #1
 80007b0:	9000      	str	r0, [sp, #0]
 80007b2:	9101      	str	r1, [sp, #4]
 80007b4:	4659      	mov	r1, fp
 80007b6:	408e      	lsls	r6, r1
 80007b8:	9601      	str	r6, [sp, #4]
 80007ba:	4661      	mov	r1, ip
 80007bc:	2601      	movs	r6, #1
 80007be:	408e      	lsls	r6, r1
 80007c0:	4661      	mov	r1, ip
 80007c2:	9600      	str	r6, [sp, #0]
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d05f      	beq.n	8000888 <__divdi3+0x178>
 80007c8:	07d9      	lsls	r1, r3, #31
 80007ca:	0856      	lsrs	r6, r2, #1
 80007cc:	430e      	orrs	r6, r1
 80007ce:	085f      	lsrs	r7, r3, #1
 80007d0:	4661      	mov	r1, ip
 80007d2:	2201      	movs	r2, #1
 80007d4:	2300      	movs	r3, #0
 80007d6:	e00c      	b.n	80007f2 <__divdi3+0xe2>
 80007d8:	42af      	cmp	r7, r5
 80007da:	d101      	bne.n	80007e0 <__divdi3+0xd0>
 80007dc:	42a6      	cmp	r6, r4
 80007de:	d80a      	bhi.n	80007f6 <__divdi3+0xe6>
 80007e0:	1ba4      	subs	r4, r4, r6
 80007e2:	41bd      	sbcs	r5, r7
 80007e4:	1924      	adds	r4, r4, r4
 80007e6:	416d      	adcs	r5, r5
 80007e8:	3901      	subs	r1, #1
 80007ea:	18a4      	adds	r4, r4, r2
 80007ec:	415d      	adcs	r5, r3
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d006      	beq.n	8000800 <__divdi3+0xf0>
 80007f2:	42af      	cmp	r7, r5
 80007f4:	d9f0      	bls.n	80007d8 <__divdi3+0xc8>
 80007f6:	3901      	subs	r1, #1
 80007f8:	1924      	adds	r4, r4, r4
 80007fa:	416d      	adcs	r5, r5
 80007fc:	2900      	cmp	r1, #0
 80007fe:	d1f8      	bne.n	80007f2 <__divdi3+0xe2>
 8000800:	9800      	ldr	r0, [sp, #0]
 8000802:	9901      	ldr	r1, [sp, #4]
 8000804:	465b      	mov	r3, fp
 8000806:	1900      	adds	r0, r0, r4
 8000808:	4169      	adcs	r1, r5
 800080a:	2b00      	cmp	r3, #0
 800080c:	db4d      	blt.n	80008aa <__divdi3+0x19a>
 800080e:	002e      	movs	r6, r5
 8000810:	002c      	movs	r4, r5
 8000812:	40de      	lsrs	r6, r3
 8000814:	4663      	mov	r3, ip
 8000816:	40dc      	lsrs	r4, r3
 8000818:	465b      	mov	r3, fp
 800081a:	2b00      	cmp	r3, #0
 800081c:	db55      	blt.n	80008ca <__divdi3+0x1ba>
 800081e:	0034      	movs	r4, r6
 8000820:	409c      	lsls	r4, r3
 8000822:	0023      	movs	r3, r4
 8000824:	4664      	mov	r4, ip
 8000826:	40a6      	lsls	r6, r4
 8000828:	0032      	movs	r2, r6
 800082a:	1a80      	subs	r0, r0, r2
 800082c:	4199      	sbcs	r1, r3
 800082e:	e003      	b.n	8000838 <__divdi3+0x128>
 8000830:	42b0      	cmp	r0, r6
 8000832:	d995      	bls.n	8000760 <__divdi3+0x50>
 8000834:	2000      	movs	r0, #0
 8000836:	2100      	movs	r1, #0
 8000838:	4643      	mov	r3, r8
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <__divdi3+0x138>
 800083e:	0003      	movs	r3, r0
 8000840:	000c      	movs	r4, r1
 8000842:	2100      	movs	r1, #0
 8000844:	4258      	negs	r0, r3
 8000846:	41a1      	sbcs	r1, r4
 8000848:	b003      	add	sp, #12
 800084a:	bcf0      	pop	{r4, r5, r6, r7}
 800084c:	46bb      	mov	fp, r7
 800084e:	46b2      	mov	sl, r6
 8000850:	46a9      	mov	r9, r5
 8000852:	46a0      	mov	r8, r4
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	4662      	mov	r2, ip
 8000858:	4648      	mov	r0, r9
 800085a:	2320      	movs	r3, #32
 800085c:	4651      	mov	r1, sl
 800085e:	4090      	lsls	r0, r2
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	40d9      	lsrs	r1, r3
 8000864:	0003      	movs	r3, r0
 8000866:	9100      	str	r1, [sp, #0]
 8000868:	9900      	ldr	r1, [sp, #0]
 800086a:	4660      	mov	r0, ip
 800086c:	430b      	orrs	r3, r1
 800086e:	4651      	mov	r1, sl
 8000870:	4081      	lsls	r1, r0
 8000872:	000a      	movs	r2, r1
 8000874:	42bb      	cmp	r3, r7
 8000876:	d800      	bhi.n	800087a <__divdi3+0x16a>
 8000878:	e78c      	b.n	8000794 <__divdi3+0x84>
 800087a:	2100      	movs	r1, #0
 800087c:	2000      	movs	r0, #0
 800087e:	9000      	str	r0, [sp, #0]
 8000880:	9101      	str	r1, [sp, #4]
 8000882:	4661      	mov	r1, ip
 8000884:	2900      	cmp	r1, #0
 8000886:	d19f      	bne.n	80007c8 <__divdi3+0xb8>
 8000888:	9800      	ldr	r0, [sp, #0]
 800088a:	9901      	ldr	r1, [sp, #4]
 800088c:	e7d4      	b.n	8000838 <__divdi3+0x128>
 800088e:	42b1      	cmp	r1, r6
 8000890:	d8f3      	bhi.n	800087a <__divdi3+0x16a>
 8000892:	e782      	b.n	800079a <__divdi3+0x8a>
 8000894:	4661      	mov	r1, ip
 8000896:	2620      	movs	r6, #32
 8000898:	2701      	movs	r7, #1
 800089a:	1a76      	subs	r6, r6, r1
 800089c:	2000      	movs	r0, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	40f7      	lsrs	r7, r6
 80008a2:	9000      	str	r0, [sp, #0]
 80008a4:	9101      	str	r1, [sp, #4]
 80008a6:	9701      	str	r7, [sp, #4]
 80008a8:	e787      	b.n	80007ba <__divdi3+0xaa>
 80008aa:	4662      	mov	r2, ip
 80008ac:	2320      	movs	r3, #32
 80008ae:	1a9b      	subs	r3, r3, r2
 80008b0:	002a      	movs	r2, r5
 80008b2:	409a      	lsls	r2, r3
 80008b4:	0026      	movs	r6, r4
 80008b6:	0013      	movs	r3, r2
 80008b8:	4662      	mov	r2, ip
 80008ba:	40d6      	lsrs	r6, r2
 80008bc:	002c      	movs	r4, r5
 80008be:	431e      	orrs	r6, r3
 80008c0:	4663      	mov	r3, ip
 80008c2:	40dc      	lsrs	r4, r3
 80008c4:	465b      	mov	r3, fp
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	daa9      	bge.n	800081e <__divdi3+0x10e>
 80008ca:	4662      	mov	r2, ip
 80008cc:	2320      	movs	r3, #32
 80008ce:	0035      	movs	r5, r6
 80008d0:	4094      	lsls	r4, r2
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	40dd      	lsrs	r5, r3
 80008d6:	0023      	movs	r3, r4
 80008d8:	432b      	orrs	r3, r5
 80008da:	e7a3      	b.n	8000824 <__divdi3+0x114>

080008dc <__clzsi2>:
 80008dc:	211c      	movs	r1, #28
 80008de:	2301      	movs	r3, #1
 80008e0:	041b      	lsls	r3, r3, #16
 80008e2:	4298      	cmp	r0, r3
 80008e4:	d301      	bcc.n	80008ea <__clzsi2+0xe>
 80008e6:	0c00      	lsrs	r0, r0, #16
 80008e8:	3910      	subs	r1, #16
 80008ea:	0a1b      	lsrs	r3, r3, #8
 80008ec:	4298      	cmp	r0, r3
 80008ee:	d301      	bcc.n	80008f4 <__clzsi2+0x18>
 80008f0:	0a00      	lsrs	r0, r0, #8
 80008f2:	3908      	subs	r1, #8
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d301      	bcc.n	80008fe <__clzsi2+0x22>
 80008fa:	0900      	lsrs	r0, r0, #4
 80008fc:	3904      	subs	r1, #4
 80008fe:	a202      	add	r2, pc, #8	; (adr r2, 8000908 <__clzsi2+0x2c>)
 8000900:	5c10      	ldrb	r0, [r2, r0]
 8000902:	1840      	adds	r0, r0, r1
 8000904:	4770      	bx	lr
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	02020304 	.word	0x02020304
 800090c:	01010101 	.word	0x01010101
	...

08000918 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	2214      	movs	r2, #20
 800091e:	2100      	movs	r1, #0
 8000920:	a803      	add	r0, sp, #12
 8000922:	f002 fdaa 	bl	800347a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_GPIO_Init+0x88>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800092c:	4d1d      	ldr	r5, [pc, #116]	; (80009a4 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4301      	orrs	r1, r0
 8000934:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093a:	2703      	movs	r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4002      	ands	r2, r0
 800093e:	9200      	str	r2, [sp, #0]
 8000940:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000944:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4332      	orrs	r2, r6
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
 800094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094c:	4032      	ands	r2, r6
 800094e:	9201      	str	r2, [sp, #4]
 8000950:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000954:	430a      	orrs	r2, r1
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
 8000958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095c:	400b      	ands	r3, r1
 800095e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000960:	3106      	adds	r1, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000964:	f001 fb60 	bl	8002028 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x90>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	a903      	add	r1, sp, #12
 800096e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000970:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f001 fa9f 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800097a:	23f3      	movs	r3, #243	; 0xf3
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	0028      	movs	r0, r5
 800097e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000980:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f001 fa97 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800098a:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800098c:	0028      	movs	r0, r5
 800098e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LD3_Pin;
 8000990:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000998:	f001 fa8e 	bl	8001eb8 <HAL_GPIO_Init>

}
 800099c:	b009      	add	sp, #36	; 0x24
 800099e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	50000400 	.word	0x50000400
 80009a8:	000019fb 	.word	0x000019fb

080009ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_I2C1_Init+0x50>)
 80009b0:	4c13      	ldr	r4, [pc, #76]	; (8000a00 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x00300F38;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80009b4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00300F38;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b8:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00300F38;
 80009ba:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009be:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80009c0:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c2:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c4:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c6:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c8:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	f001 fc6a 	bl	80022a4 <HAL_I2C_Init>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 80009d4:	f000 f8ca 	bl	8000b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	0020      	movs	r0, r4
 80009dc:	f001 fe78 	bl	80026d0 <HAL_I2CEx_ConfigAnalogFilter>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 80009e4:	f000 f8c2 	bl	8000b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	0020      	movs	r0, r4
 80009ec:	f001 fe96 	bl	800271c <HAL_I2CEx_ConfigDigitalFilter>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f8ba 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bd10      	pop	{r4, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40005400 	.word	0x40005400
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	00300f38 	.word	0x00300f38

08000a08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a08:	b510      	push	{r4, lr}
 8000a0a:	0004      	movs	r4, r0
 8000a0c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	2214      	movs	r2, #20
 8000a10:	2100      	movs	r1, #0
 8000a12:	a801      	add	r0, sp, #4
 8000a14:	f002 fd31 	bl	800347a <memset>
  if(i2cHandle->Instance==I2C1)
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_I2C_MspInit+0x54>)
 8000a1a:	6822      	ldr	r2, [r4, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d11a      	bne.n	8000a56 <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	2301      	movs	r3, #1
 8000a22:	4c0f      	ldr	r4, [pc, #60]	; (8000a60 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000a2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	401a      	ands	r2, r3
 8000a34:	9200      	str	r2, [sp, #0]
 8000a36:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a38:	22c0      	movs	r2, #192	; 0xc0
 8000a3a:	00d2      	lsls	r2, r2, #3
 8000a3c:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3e:	2212      	movs	r2, #18
 8000a40:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	3a0f      	subs	r2, #15
 8000a44:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000a46:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f001 fa36 	bl	8001eb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a50:	039b      	lsls	r3, r3, #14
 8000a52:	4313      	orrs	r3, r2
 8000a54:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a56:	b006      	add	sp, #24
 8000a58:	bd10      	pop	{r4, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40021000 	.word	0x40021000

08000a64 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a64:	2201      	movs	r2, #1
 8000a66:	492e      	ldr	r1, [pc, #184]	; (8000b20 <SystemClock_Config+0xbc>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	680b      	ldr	r3, [r1, #0]
 8000a6c:	4393      	bics	r3, r2
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	600b      	str	r3, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a72:	680b      	ldr	r3, [r1, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000a74:	4213      	tst	r3, r2
 8000a76:	d0fc      	beq.n	8000a72 <SystemClock_Config+0xe>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <SystemClock_Config+0xc0>)
 8000a7a:	492b      	ldr	r1, [pc, #172]	; (8000b28 <SystemClock_Config+0xc4>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4011      	ands	r1, r2
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000a88:	2210      	movs	r2, #16
 8000a8a:	6859      	ldr	r1, [r3, #4]
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000a8c:	4211      	tst	r1, r2
 8000a8e:	d1fc      	bne.n	8000a8a <SystemClock_Config+0x26>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a90:	2301      	movs	r3, #1
 8000a92:	4c26      	ldr	r4, [pc, #152]	; (8000b2c <SystemClock_Config+0xc8>)
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	6023      	str	r3, [r4, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	421a      	tst	r2, r3
 8000aa0:	d0fc      	beq.n	8000a9c <SystemClock_Config+0x38>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000aa2:	6863      	ldr	r3, [r4, #4]
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <SystemClock_Config+0xcc>)
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	015b      	lsls	r3, r3, #5
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6063      	str	r3, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000ab0:	68e3      	ldr	r3, [r4, #12]
 8000ab2:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <SystemClock_Config+0xd0>)
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	2388      	movs	r3, #136	; 0x88
 8000ab8:	03db      	lsls	r3, r3, #15
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	6822      	ldr	r2, [r4, #0]
 8000ac2:	045b      	lsls	r3, r3, #17
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	049b      	lsls	r3, r3, #18
 8000acc:	6822      	ldr	r2, [r4, #0]
 8000ace:	421a      	tst	r2, r3
 8000ad0:	d0fc      	beq.n	8000acc <SystemClock_Config+0x68>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ad2:	22f0      	movs	r2, #240	; 0xf0
 8000ad4:	68e3      	ldr	r3, [r4, #12]
 8000ad6:	4393      	bics	r3, r2
 8000ad8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ada:	68e3      	ldr	r3, [r4, #12]
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <SystemClock_Config+0xd4>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ae2:	68e3      	ldr	r3, [r4, #12]
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <SystemClock_Config+0xd8>)
 8000ae6:	4013      	ands	r3, r2
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ae8:	2203      	movs	r2, #3
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000aea:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000aec:	68e3      	ldr	r3, [r4, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000af2:	230c      	movs	r3, #12
 8000af4:	68e5      	ldr	r5, [r4, #12]
 8000af6:	401d      	ands	r5, r3
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000af8:	2d0c      	cmp	r5, #12
 8000afa:	d1fb      	bne.n	8000af4 <SystemClock_Config+0x90>
  {

  }
  LL_SetSystemCoreClock(32000000);
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <SystemClock_Config+0xdc>)
 8000afe:	f002 fb73 	bl	80031e8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000b02:	2000      	movs	r0, #0
 8000b04:	f001 f92c 	bl	8001d60 <HAL_InitTick>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0xac>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <SystemClock_Config+0xaa>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000b10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <SystemClock_Config+0xe0>)
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000b14:	43ab      	bics	r3, r5
 8000b16:	64e3      	str	r3, [r4, #76]	; 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000b18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	40022000 	.word	0x40022000
 8000b24:	40007000 	.word	0x40007000
 8000b28:	ffffe7ff 	.word	0xffffe7ff
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	ffffe0ff 	.word	0xffffe0ff
 8000b34:	ff02ffff 	.word	0xff02ffff
 8000b38:	fffff8ff 	.word	0xfffff8ff
 8000b3c:	ffffc7ff 	.word	0xffffc7ff
 8000b40:	01e84800 	.word	0x01e84800
 8000b44:	ffffcfff 	.word	0xffffcfff

08000b48 <main>:
{
 8000b48:	b510      	push	{r4, lr}
  HAL_Init();
 8000b4a:	f001 f92d 	bl	8001da8 <HAL_Init>
  SystemClock_Config();
 8000b4e:	f7ff ff89 	bl	8000a64 <SystemClock_Config>
  MX_GPIO_Init();
 8000b52:	f7ff fee1 	bl	8000918 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b56:	f000 f903 	bl	8000d60 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8000b5a:	f000 f849 	bl	8000bf0 <MX_TIM21_Init>
  MX_I2C1_Init();
 8000b5e:	f7ff ff25 	bl	80009ac <MX_I2C1_Init>
  MX_TIM22_Init();
 8000b62:	f000 f883 	bl	8000c6c <MX_TIM22_Init>
  fw_main();
 8000b66:	f002 fc31 	bl	80033cc <fw_main>
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <main+0x22>

08000b6c <Error_Handler>:
 8000b6c:	b672      	cpsid	i
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <Error_Handler+0x2>

08000b70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	2201      	movs	r2, #1
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_MspInit+0x18>)
 8000b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b7e:	0552      	lsls	r2, r2, #21
 8000b80:	430a      	orrs	r2, r1
 8000b82:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	4770      	bx	lr
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler>

08000b8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler>

08000b90 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f001 f91b 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000b9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM21_IRQHandler+0xc>)
 8000ba0:	f001 ffa0 	bl	8002ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000ba4:	bd10      	pop	{r4, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	200000e4 	.word	0x200000e4

08000bac <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <_sbrk+0x30>)
 8000bae:	490c      	ldr	r1, [pc, #48]	; (8000be0 <_sbrk+0x34>)
{
 8000bb0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <_sbrk+0x38>)
{
 8000bb6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000bb8:	6810      	ldr	r0, [r2, #0]
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d101      	bne.n	8000bc2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <_sbrk+0x3c>)
 8000bc0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	6810      	ldr	r0, [r2, #0]
 8000bc4:	18c3      	adds	r3, r0, r3
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d906      	bls.n	8000bd8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000bca:	f002 fc23 	bl	8003414 <__errno>
 8000bce:	230c      	movs	r3, #12
 8000bd0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000bd6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000bd8:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000bda:	e7fc      	b.n	8000bd6 <_sbrk+0x2a>
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20002000 	.word	0x20002000
 8000be4:	200000e0 	.word	0x200000e0
 8000be8:	20000258 	.word	0x20000258

08000bec <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	4770      	bx	lr
	...

08000bf0 <MX_TIM21_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	a802      	add	r0, sp, #8
 8000bfa:	f002 fc3e 	bl	800347a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfe:	2208      	movs	r2, #8
 8000c00:	2100      	movs	r1, #0
 8000c02:	4668      	mov	r0, sp
 8000c04:	f002 fc39 	bl	800347a <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000c08:	4c15      	ldr	r4, [pc, #84]	; (8000c60 <MX_TIM21_Init+0x70>)
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_TIM21_Init+0x74>)
  htim21.Init.Prescaler = 32000-1;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 1000;
 8000c0c:	22fa      	movs	r2, #250	; 0xfa
  htim21.Instance = TIM21;
 8000c0e:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 32000-1;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_TIM21_Init+0x78>)
  htim21.Init.Period = 1000;
 8000c12:	0092      	lsls	r2, r2, #2
  htim21.Init.Prescaler = 32000-1;
 8000c14:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	2300      	movs	r3, #0
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000c18:	0020      	movs	r0, r4
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	60a3      	str	r3, [r4, #8]
  htim21.Init.Period = 1000;
 8000c1c:	60e2      	str	r2, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000c22:	f001 fe35 	bl	8002890 <HAL_TIM_Base_Init>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM21_Init+0x3e>
  {
    Error_Handler();
 8000c2a:	f7ff ff9f 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000c30:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000c34:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000c38:	f001 fea2 	bl	8002980 <HAL_TIM_ConfigClockSource>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM21_Init+0x54>
  {
    Error_Handler();
 8000c40:	f7ff ff94 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000c46:	4669      	mov	r1, sp
 8000c48:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000c4e:	f001 ffd1 	bl	8002bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f7ff ff89 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000c5a:	b006      	add	sp, #24
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	200000e4 	.word	0x200000e4
 8000c64:	40010800 	.word	0x40010800
 8000c68:	00007cff 	.word	0x00007cff

08000c6c <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000c6c:	b510      	push	{r4, lr}
 8000c6e:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c70:	2210      	movs	r2, #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	a802      	add	r0, sp, #8
 8000c76:	f002 fc00 	bl	800347a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4668      	mov	r0, sp
 8000c80:	f002 fbfb 	bl	800347a <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000c84:	4c14      	ldr	r4, [pc, #80]	; (8000cd8 <MX_TIM22_Init+0x6c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_TIM22_Init+0x70>)
  htim22.Init.Prescaler = 32-1;
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim22.Init.Period = 65535;
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <MX_TIM22_Init+0x74>)
  htim22.Instance = TIM22;
 8000c8a:	6023      	str	r3, [r4, #0]
  htim22.Init.Prescaler = 32-1;
 8000c8c:	231f      	movs	r3, #31
 8000c8e:	6063      	str	r3, [r4, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	2300      	movs	r3, #0
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000c92:	0020      	movs	r0, r4
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	60a3      	str	r3, [r4, #8]
  htim22.Init.Period = 65535;
 8000c96:	60e2      	str	r2, [r4, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	6123      	str	r3, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000c9c:	f001 fdf8 	bl	8002890 <HAL_TIM_Base_Init>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM22_Init+0x3c>
  {
    Error_Handler();
 8000ca4:	f7ff ff62 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000caa:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000cae:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f001 fe65 	bl	8002980 <HAL_TIM_ConfigClockSource>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM22_Init+0x52>
  {
    Error_Handler();
 8000cba:	f7ff ff57 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000cc0:	4669      	mov	r1, sp
 8000cc2:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000cc8:	f001 ff94 	bl	8002bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM22_Init+0x68>
  {
    Error_Handler();
 8000cd0:	f7ff ff4c 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000cd4:	b006      	add	sp, #24
 8000cd6:	bd10      	pop	{r4, pc}
 8000cd8:	20000124 	.word	0x20000124
 8000cdc:	40011400 	.word	0x40011400
 8000ce0:	0000ffff 	.word	0x0000ffff

08000ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM21)
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_TIM_Base_MspInit+0x38>)
{
 8000ce8:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM21)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10d      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000cee:	2304      	movs	r3, #4
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000cf2:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000cf4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	f001 f88b 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000d02:	2014      	movs	r0, #20
 8000d04:	f001 f8b2 	bl	8001e6c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 8000d08:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM22)
 8000d0a:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d1fb      	bne.n	8000d08 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000d10:	2320      	movs	r3, #32
 8000d12:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000d14:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000d1a:	e7f5      	b.n	8000d08 <HAL_TIM_Base_MspInit+0x24>
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40011400 	.word	0x40011400

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b500      	push	{lr}
 8000d2a:	b08f      	sub	sp, #60	; 0x3c
	uint8_t data[50] = "Hello group 8\r\n";
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	490a      	ldr	r1, [pc, #40]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d30:	a801      	add	r0, sp, #4
 8000d32:	f002 fb99 	bl	8003468 <memcpy>
 8000d36:	2222      	movs	r2, #34	; 0x22
 8000d38:	2100      	movs	r1, #0
 8000d3a:	a805      	add	r0, sp, #20
 8000d3c:	f002 fb9d 	bl	800347a <memset>

	HAL_UART_Transmit(&huart2, data, strlen((char*)data), 100);
 8000d40:	a801      	add	r0, sp, #4
 8000d42:	f7ff f9e1 	bl	8000108 <strlen>
 8000d46:	2364      	movs	r3, #100	; 0x64
 8000d48:	b282      	uxth	r2, r0
 8000d4a:	a901      	add	r1, sp, #4
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d4e:	f002 f950 	bl	8002ff2 <HAL_UART_Transmit>
}
 8000d52:	b00f      	add	sp, #60	; 0x3c
 8000d54:	bd00      	pop	{pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	08003d90 	.word	0x08003d90
 8000d5c:	20000164 	.word	0x20000164

08000d60 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <MX_USART2_UART_Init+0x30>)
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x34>)
{
 8000d64:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000d66:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000d68:	2396      	movs	r3, #150	; 0x96
 8000d6a:	019b      	lsls	r3, r3, #6
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 8000d6e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d70:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d72:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d74:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d76:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d78:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d82:	f002 f9ff 	bl	8003184 <HAL_UART_Init>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8000d8a:	f7ff feef 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bd10      	pop	{r4, pc}
 8000d90:	20000164 	.word	0x20000164
 8000d94:	40004400 	.word	0x40004400

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	0004      	movs	r4, r0
 8000d9c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	2214      	movs	r2, #20
 8000da0:	2100      	movs	r1, #0
 8000da2:	a801      	add	r0, sp, #4
 8000da4:	f002 fb69 	bl	800347a <memset>
  if(uartHandle->Instance==USART2)
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_UART_MspInit+0x54>)
 8000daa:	6822      	ldr	r2, [r4, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d11a      	bne.n	8000de6 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_UART_MspInit+0x58>)
 8000db4:	0292      	lsls	r2, r2, #10
 8000db6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dba:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	400b      	ands	r3, r1
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_UART_MspInit+0x5c>)
 8000dd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	185b      	adds	r3, r3, r1
 8000dda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000ddc:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000de0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f001 f869 	bl	8001eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000de6:	b006      	add	sp, #24
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	00008004 	.word	0x00008004

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff fef6 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 fafb 	bl	8003420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fe8d 	bl	8000b48 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
   ldr   r0, =_estack
 8000e30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e3c:	08003f50 	.word	0x08003f50
  ldr r2, =_sbss
 8000e40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e44:	20000254 	.word	0x20000254

08000e48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_COMP_IRQHandler>

08000e4a <calc_temperature>:
/*****************************INTERNAL APIs***********************************************/
#ifndef BME68X_USE_FPU

/* @brief This internal API is used to calculate the temperature value. */
static int16_t calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8000e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int64_t var2;
    int64_t var3;
    int16_t calc_temp;

    /*lint -save -e701 -e702 -e704 */
    var1 = ((int32_t)temp_adc >> 3) - ((int32_t)dev->calib.par_t1 << 1);
 8000e4c:	8bcb      	ldrh	r3, [r1, #30]
 8000e4e:	10c0      	asrs	r0, r0, #3
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	1ac4      	subs	r4, r0, r3
 8000e54:	17e7      	asrs	r7, r4, #31
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8000e56:	07fb      	lsls	r3, r7, #31
 8000e58:	0860      	lsrs	r0, r4, #1
 8000e5a:	4318      	orrs	r0, r3
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e5c:	1ccb      	adds	r3, r1, #3
 8000e5e:	7fdb      	ldrb	r3, [r3, #31]
{
 8000e60:	000d      	movs	r5, r1
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	011e      	lsls	r6, r3, #4
 8000e66:	17db      	asrs	r3, r3, #31
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8000e68:	0039      	movs	r1, r7
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e6a:	9301      	str	r3, [sp, #4]
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	003b      	movs	r3, r7
 8000e70:	f7ff fb2a 	bl	80004c8 <__aeabi_lmul>
 8000e74:	050b      	lsls	r3, r1, #20
 8000e76:	0b02      	lsrs	r2, r0, #12
 8000e78:	431a      	orrs	r2, r3
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e7a:	0030      	movs	r0, r6
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8000e7c:	130b      	asrs	r3, r1, #12
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e7e:	9901      	ldr	r1, [sp, #4]
 8000e80:	f7ff fb22 	bl	80004c8 <__aeabi_lmul>
 8000e84:	9001      	str	r0, [sp, #4]
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 8000e86:	2320      	movs	r3, #32
 8000e88:	5ee8      	ldrsh	r0, [r5, r3]
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e8a:	000e      	movs	r6, r1
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	0022      	movs	r2, r4
 8000e90:	17c1      	asrs	r1, r0, #31
 8000e92:	f7ff fb19 	bl	80004c8 <__aeabi_lmul>
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e96:	9b01      	ldr	r3, [sp, #4]
 8000e98:	04b6      	lsls	r6, r6, #18
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 8000e9a:	0549      	lsls	r1, r1, #21
 8000e9c:	0ac0      	lsrs	r0, r0, #11
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000e9e:	0b9b      	lsrs	r3, r3, #14
    var2 = (var1 * (int32_t)dev->calib.par_t2) >> 11;
 8000ea0:	4308      	orrs	r0, r1
    var3 = ((var3) * ((int32_t)dev->calib.par_t3 << 4)) >> 14;
 8000ea2:	4333      	orrs	r3, r6
    dev->calib.t_fine = (int32_t)(var2 + var3);
 8000ea4:	18c3      	adds	r3, r0, r3
    calc_temp = (int16_t)(((dev->calib.t_fine * 5) + 128) >> 8);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	4358      	muls	r0, r3
 8000eaa:	3080      	adds	r0, #128	; 0x80
 8000eac:	1200      	asrs	r0, r0, #8
    dev->calib.t_fine = (int32_t)(var2 + var3);
 8000eae:	63ab      	str	r3, [r5, #56]	; 0x38

    /*lint -restore */
    return calc_temp;
 8000eb0:	b200      	sxth	r0, r0
}
 8000eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000eb4 <calc_pressure>:
     */
    const int32_t pres_ovf_check = INT32_C(0x40000000);

    /*lint -save -e701 -e702 -e713 */
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8000eb4:	000a      	movs	r2, r1
{
 8000eb6:	b570      	push	{r4, r5, r6, lr}
 8000eb8:	000c      	movs	r4, r1
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8000eba:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8000ebc:	322e      	adds	r2, #46	; 0x2e
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8000ebe:	105d      	asrs	r5, r3, #1
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <calc_pressure+0xbc>)
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8000ec2:	7812      	ldrb	r2, [r2, #0]
    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8000ec4:	18ed      	adds	r5, r5, r3
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8000ec6:	10ab      	asrs	r3, r5, #2
 8000ec8:	435b      	muls	r3, r3
 8000eca:	b252      	sxtb	r2, r2
 8000ecc:	12de      	asrs	r6, r3, #11
 8000ece:	4356      	muls	r6, r2
    var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8000ed0:	212c      	movs	r1, #44	; 0x2c
 8000ed2:	5e62      	ldrsh	r2, [r4, r1]
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) * (int32_t)dev->calib.par_p6) >> 2;
 8000ed4:	10b6      	asrs	r6, r6, #2
    var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8000ed6:	436a      	muls	r2, r5
 8000ed8:	0052      	lsls	r2, r2, #1
 8000eda:	1992      	adds	r2, r2, r6
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
 8000edc:	2626      	movs	r6, #38	; 0x26
 8000ede:	5fa1      	ldrsh	r1, [r4, r6]
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8000ee0:	135b      	asrs	r3, r3, #13
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
 8000ee2:	434d      	muls	r5, r1
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	3128      	adds	r1, #40	; 0x28
 8000ee8:	7809      	ldrb	r1, [r1, #0]
           (((int32_t)dev->calib.par_p2 * var1) >> 1);
 8000eea:	106d      	asrs	r5, r5, #1
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8000eec:	b249      	sxtb	r1, r1
 8000eee:	0149      	lsls	r1, r1, #5
 8000ef0:	434b      	muls	r3, r1
    var1 = var1 >> 18;
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8000ef2:	2180      	movs	r1, #128	; 0x80
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) * ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8000ef4:	10db      	asrs	r3, r3, #3
 8000ef6:	195b      	adds	r3, r3, r5
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8000ef8:	0209      	lsls	r1, r1, #8
    var1 = var1 >> 18;
 8000efa:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8000efc:	185b      	adds	r3, r3, r1
 8000efe:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8000f00:	1092      	asrs	r2, r2, #2
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8000f02:	4359      	muls	r1, r3
    pressure_comp = 1048576 - pres_adc;
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	035b      	lsls	r3, r3, #13
 8000f08:	1a1b      	subs	r3, r3, r0
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8000f0a:	252a      	movs	r5, #42	; 0x2a
 8000f0c:	5f60      	ldrsh	r0, [r4, r5]
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8000f0e:	13c9      	asrs	r1, r1, #15
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8000f10:	0400      	lsls	r0, r0, #16
 8000f12:	1882      	adds	r2, r0, r2
    pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8000f14:	1312      	asrs	r2, r2, #12
 8000f16:	1a9a      	subs	r2, r3, r2
    if (pressure_comp >= pres_ovf_check)
 8000f18:	2380      	movs	r3, #128	; 0x80
    pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8000f1a:	4816      	ldr	r0, [pc, #88]	; (8000f74 <calc_pressure+0xc0>)
    if (pressure_comp >= pres_ovf_check)
 8000f1c:	05db      	lsls	r3, r3, #23
    pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8000f1e:	4350      	muls	r0, r2
    if (pressure_comp >= pres_ovf_check)
 8000f20:	4298      	cmp	r0, r3
 8000f22:	db20      	blt.n	8000f66 <calc_pressure+0xb2>
    {
        pressure_comp = ((pressure_comp / var1) << 1);
 8000f24:	f7ff f9a0 	bl	8000268 <__divsi3>
 8000f28:	0042      	lsls	r2, r0, #1
    else
    {
        pressure_comp = ((pressure_comp << 1) / var1);
    }

    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) * (pressure_comp >> 3)) >> 13)) >> 12;
 8000f2a:	10d1      	asrs	r1, r2, #3
 8000f2c:	4349      	muls	r1, r1
 8000f2e:	2032      	movs	r0, #50	; 0x32
 8000f30:	5e23      	ldrsh	r3, [r4, r0]
 8000f32:	1349      	asrs	r1, r1, #13
 8000f34:	434b      	muls	r3, r1
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
 8000f36:	2130      	movs	r1, #48	; 0x30
 8000f38:	5e66      	ldrsh	r6, [r4, r1]
    var3 =
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8000f3a:	1215      	asrs	r5, r2, #8
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
 8000f3c:	1090      	asrs	r0, r2, #2
 8000f3e:	4346      	muls	r6, r0
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8000f40:	0028      	movs	r0, r5
         (int32_t)dev->calib.par_p10) >> 17;
 8000f42:	0021      	movs	r1, r4
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8000f44:	4368      	muls	r0, r5
 8000f46:	4345      	muls	r5, r0
         (int32_t)dev->calib.par_p10) >> 17;
 8000f48:	3134      	adds	r1, #52	; 0x34
 8000f4a:	7808      	ldrb	r0, [r1, #0]
    var2 = ((int32_t)(pressure_comp >> 2) * (int32_t)dev->calib.par_p8) >> 13;
 8000f4c:	1376      	asrs	r6, r6, #13
        ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8000f4e:	4368      	muls	r0, r5
    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) * (pressure_comp >> 3)) >> 13)) >> 12;
 8000f50:	131b      	asrs	r3, r3, #12
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8000f52:	199b      	adds	r3, r3, r6
    var3 =
 8000f54:	1440      	asrs	r0, r0, #17
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 + ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8000f56:	1818      	adds	r0, r3, r0
 8000f58:	232f      	movs	r3, #47	; 0x2f
 8000f5a:	56e3      	ldrsb	r3, [r4, r3]
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	18c0      	adds	r0, r0, r3
 8000f60:	1100      	asrs	r0, r0, #4
 8000f62:	1880      	adds	r0, r0, r2

    /*lint -restore */
    return (uint32_t)pressure_comp;
}
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
        pressure_comp = ((pressure_comp << 1) / var1);
 8000f66:	0040      	lsls	r0, r0, #1
 8000f68:	f7ff f97e 	bl	8000268 <__divsi3>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	e7dc      	b.n	8000f2a <calc_pressure+0x76>
 8000f70:	ffff0600 	.word	0xffff0600
 8000f74:	00000c35 	.word	0x00000c35

08000f78 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int32_t var6;
    int32_t temp_scaled;
    int32_t calc_hum;

    /*lint -save -e702 -e704 */
    temp_scaled = (((int32_t)dev->calib.t_fine * 5) + 128) >> 8;
 8000f7a:	2505      	movs	r5, #5
{
 8000f7c:	0007      	movs	r7, r0
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
    var2 =
        ((int32_t)dev->calib.par_h2 *
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8000f7e:	2016      	movs	r0, #22
    temp_scaled = (((int32_t)dev->calib.t_fine * 5) + 128) >> 8;
 8000f80:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8000f82:	5608      	ldrsb	r0, [r1, r0]
    temp_scaled = (((int32_t)dev->calib.t_fine * 5) + 128) >> 8;
 8000f84:	435d      	muls	r5, r3
 8000f86:	3580      	adds	r5, #128	; 0x80
 8000f88:	122d      	asrs	r5, r5, #8
{
 8000f8a:	000e      	movs	r6, r1
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8000f8c:	4368      	muls	r0, r5
 8000f8e:	2164      	movs	r1, #100	; 0x64
 8000f90:	f7ff f96a 	bl	8000268 <__divsi3>
 8000f94:	4368      	muls	r0, r5
 8000f96:	2164      	movs	r1, #100	; 0x64
 8000f98:	1180      	asrs	r0, r0, #6
 8000f9a:	f7ff f965 	bl	8000268 <__divsi3>
 8000f9e:	0004      	movs	r4, r0
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
 8000fa0:	2015      	movs	r0, #21
 8000fa2:	5630      	ldrsb	r0, [r6, r0]
 8000fa4:	2164      	movs	r1, #100	; 0x64
 8000fa6:	4368      	muls	r0, r5
 8000fa8:	f7ff f95e 	bl	8000268 <__divsi3>
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8000fac:	2380      	movs	r3, #128	; 0x80
         (((temp_scaled * (int32_t)dev->calib.par_h4) / ((int32_t)100)) +
 8000fae:	1824      	adds	r4, r4, r0
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8000fb0:	01db      	lsls	r3, r3, #7
        ((int32_t)dev->calib.par_h2 *
 8000fb2:	8a70      	ldrh	r0, [r6, #18]
          (((temp_scaled * ((temp_scaled * (int32_t)dev->calib.par_h5) / ((int32_t)100))) >> 6) / ((int32_t)100)) +
 8000fb4:	18e4      	adds	r4, r4, r3
        ((int32_t)dev->calib.par_h2 *
 8000fb6:	4344      	muls	r4, r0
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
 8000fb8:	8a30      	ldrh	r0, [r6, #16]
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
 8000fba:	2164      	movs	r1, #100	; 0x64
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
 8000fbc:	0100      	lsls	r0, r0, #4
 8000fbe:	1a3f      	subs	r7, r7, r0
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	5630      	ldrsb	r0, [r6, r0]
    var2 =
 8000fc4:	12a4      	asrs	r4, r4, #10
           (((temp_scaled * (int32_t)dev->calib.par_h3) / ((int32_t)100)) >> 1);
 8000fc6:	4368      	muls	r0, r5
 8000fc8:	f7ff f94e 	bl	8000268 <__divsi3>
 8000fcc:	1040      	asrs	r0, r0, #1
    var1 = (int32_t)(hum_adc - ((int32_t)((int32_t)dev->calib.par_h1 * 16))) -
 8000fce:	1a38      	subs	r0, r7, r0
          (int32_t)(1 << 14))) >> 10;
    var3 = var1 * var2;
 8000fd0:	4344      	muls	r4, r0
    var4 = (int32_t)dev->calib.par_h6 << 7;
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8000fd2:	2018      	movs	r0, #24
 8000fd4:	5630      	ldrsb	r0, [r6, r0]
 8000fd6:	2164      	movs	r1, #100	; 0x64
 8000fd8:	4368      	muls	r0, r5
 8000fda:	f7ff f945 	bl	8000268 <__divsi3>
    var4 = (int32_t)dev->calib.par_h6 << 7;
 8000fde:	7df3      	ldrb	r3, [r6, #23]
 8000fe0:	01db      	lsls	r3, r3, #7
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8000fe2:	18c3      	adds	r3, r0, r3
    var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8000fe4:	13a0      	asrs	r0, r4, #14
 8000fe6:	4340      	muls	r0, r0
 8000fe8:	1282      	asrs	r2, r0, #10
    var4 = ((var4) + ((temp_scaled * (int32_t)dev->calib.par_h7) / ((int32_t)100))) >> 4;
 8000fea:	1118      	asrs	r0, r3, #4
    var6 = (var4 * var5) >> 1;
    calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
 8000fec:	23fa      	movs	r3, #250	; 0xfa
    var6 = (var4 * var5) >> 1;
 8000fee:	4350      	muls	r0, r2
 8000ff0:	1040      	asrs	r0, r0, #1
    calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
 8000ff2:	1900      	adds	r0, r0, r4
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	1280      	asrs	r0, r0, #10
 8000ff8:	4358      	muls	r0, r3
 8000ffa:	1300      	asrs	r0, r0, #12
 8000ffc:	43c3      	mvns	r3, r0
 8000ffe:	17db      	asrs	r3, r3, #31
 8001000:	4018      	ands	r0, r3
    {
        calc_hum = 0;
    }

    /*lint -restore */
    return (uint32_t)calc_hum;
 8001002:	4b02      	ldr	r3, [pc, #8]	; (800100c <calc_humidity+0x94>)
 8001004:	4298      	cmp	r0, r3
 8001006:	dd00      	ble.n	800100a <calc_humidity+0x92>
 8001008:	0018      	movs	r0, r3
}
 800100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100c:	000186a0 	.word	0x000186a0

08001010 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using integer */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	000c      	movs	r4, r1
    {
        temp = 400;
    }

    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8001014:	231a      	movs	r3, #26
 8001016:	5ec9      	ldrsh	r1, [r1, r3]
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <calc_res_heat+0x88>)
{
 800101a:	0002      	movs	r2, r0
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800101c:	18c9      	adds	r1, r1, r3
 800101e:	1c03      	adds	r3, r0, #0
 8001020:	20c8      	movs	r0, #200	; 0xc8
 8001022:	0040      	lsls	r0, r0, #1
 8001024:	4282      	cmp	r2, r0
 8001026:	d900      	bls.n	800102a <calc_res_heat+0x1a>
 8001028:	1c03      	adds	r3, r0, #0
 800102a:	b298      	uxth	r0, r3
 800102c:	4348      	muls	r0, r1
 800102e:	2114      	movs	r1, #20
 8001030:	f7ff f91a 	bl	8000268 <__divsi3>
 8001034:	23c8      	movs	r3, #200	; 0xc8
 8001036:	039b      	lsls	r3, r3, #14
 8001038:	210a      	movs	r1, #10
 800103a:	18c0      	adds	r0, r0, r3
 800103c:	2519      	movs	r5, #25
 800103e:	f7ff f913 	bl	8000268 <__divsi3>
 8001042:	23c4      	movs	r3, #196	; 0xc4
 8001044:	5765      	ldrsb	r5, [r4, r5]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	18ed      	adds	r5, r5, r3
 800104a:	4345      	muls	r5, r0
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800104c:	230e      	movs	r3, #14
 800104e:	201c      	movs	r0, #28
 8001050:	21fa      	movs	r1, #250	; 0xfa
 8001052:	56e3      	ldrsb	r3, [r4, r3]
 8001054:	5620      	ldrsb	r0, [r4, r0]
 8001056:	0089      	lsls	r1, r1, #2
 8001058:	4358      	muls	r0, r3
 800105a:	f7ff f905 	bl	8000268 <__divsi3>
    var3 = var1 + (var2 / 2);
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 800105e:	0023      	movs	r3, r4
 8001060:	333c      	adds	r3, #60	; 0x3c
 8001062:	7819      	ldrb	r1, [r3, #0]
    var3 = var1 + (var2 / 2);
 8001064:	106d      	asrs	r5, r5, #1
    var1 = (((int32_t)dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8001066:	0200      	lsls	r0, r0, #8
    var3 = var1 + (var2 / 2);
 8001068:	1828      	adds	r0, r5, r0
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 800106a:	3104      	adds	r1, #4
 800106c:	f7ff f8fc 	bl	8000268 <__divsi3>
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 8001070:	233d      	movs	r3, #61	; 0x3d
 8001072:	2183      	movs	r1, #131	; 0x83
 8001074:	56e3      	ldrsb	r3, [r4, r3]
 8001076:	4359      	muls	r1, r3
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	18c9      	adds	r1, r1, r3
    heatr_res_x100 = (int32_t)(((var4 / var5) - 250) * 34);
 800107e:	f7ff f8f3 	bl	8000268 <__divsi3>
 8001082:	0003      	movs	r3, r0
 8001084:	2022      	movs	r0, #34	; 0x22
 8001086:	3bfa      	subs	r3, #250	; 0xfa
 8001088:	4358      	muls	r0, r3
    heatr_res = (uint8_t)((heatr_res_x100 + 50) / 100);
 800108a:	2164      	movs	r1, #100	; 0x64
 800108c:	3032      	adds	r0, #50	; 0x32
 800108e:	f7ff f8eb 	bl	8000268 <__divsi3>

    return heatr_res;
 8001092:	b2c0      	uxtb	r0, r0
}
 8001094:	bd70      	pop	{r4, r5, r6, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	00025999 	.word	0x00025999

0800109c <null_ptr_check>:
/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
    int8_t rslt = BME68X_OK;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800109c:	2800      	cmp	r0, #0
 800109e:	d00a      	beq.n	80010b6 <null_ptr_check+0x1a>
 80010a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <null_ptr_check+0x1a>
 80010a6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <null_ptr_check+0x1a>
 80010ac:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80010ae:	4243      	negs	r3, r0
 80010b0:	4158      	adcs	r0, r3
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80010b2:	4240      	negs	r0, r0
    }

    return rslt;
}
 80010b4:	4770      	bx	lr
        rslt = BME68X_E_NULL_PTR;
 80010b6:	2001      	movs	r0, #1
 80010b8:	e7fb      	b.n	80010b2 <null_ptr_check+0x16>

080010ba <boundary_check>:
{
 80010ba:	b570      	push	{r4, r5, r6, lr}
 80010bc:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 80010be:	0010      	movs	r0, r2
{
 80010c0:	000e      	movs	r6, r1
 80010c2:	0014      	movs	r4, r2
    rslt = null_ptr_check(dev);
 80010c4:	f7ff ffea 	bl	800109c <null_ptr_check>
    if ((value != NULL) && (rslt == BME68X_OK))
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d109      	bne.n	80010e0 <boundary_check+0x26>
        if (*value > max)
 80010cc:	782b      	ldrb	r3, [r5, #0]
 80010ce:	42b3      	cmp	r3, r6
 80010d0:	d905      	bls.n	80010de <boundary_check+0x24>
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80010d2:	2301      	movs	r3, #1
            *value = max;
 80010d4:	702e      	strb	r6, [r5, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80010d6:	344d      	adds	r4, #77	; 0x4d
 80010d8:	7822      	ldrb	r2, [r4, #0]
 80010da:	4313      	orrs	r3, r2
 80010dc:	7023      	strb	r3, [r4, #0]
}
 80010de:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME68X_E_NULL_PTR;
 80010e0:	2001      	movs	r0, #1
 80010e2:	4240      	negs	r0, r0
 80010e4:	e7fb      	b.n	80010de <boundary_check+0x24>

080010e6 <set_mem_page>:
{
 80010e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010e8:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 80010ea:	0008      	movs	r0, r1
{
 80010ec:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 80010ee:	f7ff ffd5 	bl	800109c <null_ptr_check>
 80010f2:	1e06      	subs	r6, r0, #0
    if (rslt == BME68X_OK)
 80010f4:	d128      	bne.n	8001148 <set_mem_page+0x62>
        if (reg_addr > 0x7f)
 80010f6:	b263      	sxtb	r3, r4
            mem_page = BME68X_MEM_PAGE0;
 80010f8:	43db      	mvns	r3, r3
        if (mem_page != dev->mem_page)
 80010fa:	7b6a      	ldrb	r2, [r5, #13]
            mem_page = BME68X_MEM_PAGE0;
 80010fc:	0fdb      	lsrs	r3, r3, #31
 80010fe:	011b      	lsls	r3, r3, #4
        if (mem_page != dev->mem_page)
 8001100:	429a      	cmp	r2, r3
 8001102:	d021      	beq.n	8001148 <set_mem_page+0x62>
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001104:	4669      	mov	r1, sp
 8001106:	6c2c      	ldr	r4, [r5, #64]	; 0x40
            dev->mem_page = mem_page;
 8001108:	736b      	strb	r3, [r5, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800110a:	2201      	movs	r2, #1
 800110c:	20f3      	movs	r0, #243	; 0xf3
 800110e:	686b      	ldr	r3, [r5, #4]
 8001110:	3107      	adds	r1, #7
 8001112:	47a0      	blx	r4
 8001114:	002c      	movs	r4, r5
 8001116:	344c      	adds	r4, #76	; 0x4c
 8001118:	7020      	strb	r0, [r4, #0]
            if (dev->intf_rslt != 0)
 800111a:	2800      	cmp	r0, #0
 800111c:	d112      	bne.n	8001144 <set_mem_page+0x5e>
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 800111e:	466a      	mov	r2, sp
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001120:	2110      	movs	r1, #16
 8001122:	7b6b      	ldrb	r3, [r5, #13]
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8001124:	79d2      	ldrb	r2, [r2, #7]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001126:	400b      	ands	r3, r1
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8001128:	438a      	bics	r2, r1
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800112a:	4313      	orrs	r3, r2
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800112c:	4669      	mov	r1, sp
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800112e:	466a      	mov	r2, sp
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8001130:	6c6f      	ldr	r7, [r5, #68]	; 0x44
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8001132:	71d3      	strb	r3, [r2, #7]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8001134:	3107      	adds	r1, #7
 8001136:	2201      	movs	r2, #1
 8001138:	686b      	ldr	r3, [r5, #4]
 800113a:	3073      	adds	r0, #115	; 0x73
 800113c:	47b8      	blx	r7
 800113e:	7020      	strb	r0, [r4, #0]
                if (dev->intf_rslt != 0)
 8001140:	2800      	cmp	r0, #0
 8001142:	d001      	beq.n	8001148 <set_mem_page+0x62>
                    rslt = BME68X_E_COM_FAIL;
 8001144:	2602      	movs	r6, #2
 8001146:	4276      	negs	r6, r6
}
 8001148:	0030      	movs	r0, r6
 800114a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800114c <get_mem_page>:
{
 800114c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800114e:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 8001150:	f7ff ffa4 	bl	800109c <null_ptr_check>
    if (rslt == BME68X_OK)
 8001154:	2800      	cmp	r0, #0
 8001156:	d110      	bne.n	800117a <get_mem_page+0x2e>
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8001158:	466b      	mov	r3, sp
 800115a:	1ddd      	adds	r5, r3, #7
 800115c:	2201      	movs	r2, #1
 800115e:	6863      	ldr	r3, [r4, #4]
 8001160:	0029      	movs	r1, r5
 8001162:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8001164:	30f3      	adds	r0, #243	; 0xf3
 8001166:	47b0      	blx	r6
 8001168:	0023      	movs	r3, r4
 800116a:	334c      	adds	r3, #76	; 0x4c
 800116c:	7018      	strb	r0, [r3, #0]
        if (dev->intf_rslt != 0)
 800116e:	2800      	cmp	r0, #0
 8001170:	d104      	bne.n	800117c <get_mem_page+0x30>
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8001172:	2210      	movs	r2, #16
 8001174:	782b      	ldrb	r3, [r5, #0]
 8001176:	4013      	ands	r3, r2
 8001178:	7363      	strb	r3, [r4, #13]
}
 800117a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            rslt = BME68X_E_COM_FAIL;
 800117c:	2002      	movs	r0, #2
 800117e:	4240      	negs	r0, r0
    return rslt;
 8001180:	e7fb      	b.n	800117a <get_mem_page+0x2e>
	...

08001184 <calc_gas_resistance_low.isra.0>:
static uint32_t calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t lookup_table1[16] = {
 8001186:	2640      	movs	r6, #64	; 0x40
static uint32_t calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8001188:	0014      	movs	r4, r2
    uint32_t lookup_table1[16] = {
 800118a:	4d23      	ldr	r5, [pc, #140]	; (8001218 <calc_gas_resistance_low.isra.0+0x94>)
static uint32_t calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 800118c:	b0a3      	sub	sp, #140	; 0x8c
    uint32_t lookup_table1[16] = {
 800118e:	0032      	movs	r2, r6
static uint32_t calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
 8001190:	9001      	str	r0, [sp, #4]
 8001192:	9100      	str	r1, [sp, #0]
    uint32_t lookup_table2[16] = {
 8001194:	af12      	add	r7, sp, #72	; 0x48
    uint32_t lookup_table1[16] = {
 8001196:	0029      	movs	r1, r5
 8001198:	a802      	add	r0, sp, #8
 800119a:	f002 f965 	bl	8003468 <memcpy>
    uint32_t lookup_table2[16] = {
 800119e:	19a9      	adds	r1, r5, r6
 80011a0:	0032      	movs	r2, r6
 80011a2:	0038      	movs	r0, r7
 80011a4:	f002 f960 	bl	8003468 <memcpy>
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80011a8:	2205      	movs	r2, #5
 80011aa:	2300      	movs	r3, #0
 80011ac:	0020      	movs	r0, r4
 80011ae:	17e1      	asrs	r1, r4, #31
 80011b0:	f7ff f98a 	bl	80004c8 <__aeabi_lmul>
 80011b4:	2300      	movs	r3, #0
 80011b6:	2600      	movs	r6, #0
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <calc_gas_resistance_low.isra.0+0x98>)
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80011ba:	0035      	movs	r5, r6
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80011bc:	1880      	adds	r0, r0, r2
 80011be:	4159      	adcs	r1, r3
 80011c0:	9b00      	ldr	r3, [sp, #0]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	9a00      	ldr	r2, [sp, #0]
 80011c8:	ab02      	add	r3, sp, #8
 80011ca:	58d2      	ldr	r2, [r2, r3]
 80011cc:	0033      	movs	r3, r6
 80011ce:	f7ff f97b 	bl	80004c8 <__aeabi_lmul>
 80011d2:	140b      	asrs	r3, r1, #16
 80011d4:	040c      	lsls	r4, r1, #16
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80011d6:	9901      	ldr	r1, [sp, #4]
    var1 = (int64_t)((1340 + (5 * (int64_t)dev->calib.range_sw_err)) * ((int64_t)lookup_table1[gas_range])) >> 16;
 80011d8:	0c02      	lsrs	r2, r0, #16
 80011da:	4322      	orrs	r2, r4
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80011dc:	20ff      	movs	r0, #255	; 0xff
 80011de:	03cc      	lsls	r4, r1, #15
 80011e0:	2101      	movs	r1, #1
 80011e2:	0600      	lsls	r0, r0, #24
 80011e4:	4249      	negs	r1, r1
 80011e6:	1824      	adds	r4, r4, r0
 80011e8:	414d      	adcs	r5, r1
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 80011ea:	9900      	ldr	r1, [sp, #0]
    var2 = (((int64_t)((int64_t)gas_res_adc << 15) - (int64_t)(16777216)) + var1);
 80011ec:	18a4      	adds	r4, r4, r2
 80011ee:	415d      	adcs	r5, r3
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 80011f0:	59c8      	ldr	r0, [r1, r7]
 80011f2:	0031      	movs	r1, r6
 80011f4:	f7ff f968 	bl	80004c8 <__aeabi_lmul>
 80011f8:	05ce      	lsls	r6, r1, #23
 80011fa:	0a42      	lsrs	r2, r0, #9
 80011fc:	4332      	orrs	r2, r6
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
 80011fe:	0860      	lsrs	r0, r4, #1
 8001200:	07ee      	lsls	r6, r5, #31
    var3 = (((int64_t)lookup_table2[gas_range] * (int64_t)var1) >> 9);
 8001202:	124b      	asrs	r3, r1, #9
    calc_gas_res = (uint32_t)((var3 + ((int64_t)var2 >> 1)) / (int64_t)var2);
 8001204:	4330      	orrs	r0, r6
 8001206:	1069      	asrs	r1, r5, #1
 8001208:	1880      	adds	r0, r0, r2
 800120a:	4159      	adcs	r1, r3
 800120c:	0022      	movs	r2, r4
 800120e:	002b      	movs	r3, r5
 8001210:	f7ff f916 	bl	8000440 <__aeabi_ldivmod>
}
 8001214:	b023      	add	sp, #140	; 0x8c
 8001216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001218:	08003dc4 	.word	0x08003dc4
 800121c:	0000053c 	.word	0x0000053c

08001220 <bme68x_set_regs>:
{
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	001c      	movs	r4, r3
 8001224:	000d      	movs	r5, r1
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001226:	2100      	movs	r1, #0
{
 8001228:	b089      	sub	sp, #36	; 0x24
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	0006      	movs	r6, r0
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 800122e:	2210      	movs	r2, #16
 8001230:	a804      	add	r0, sp, #16
 8001232:	9103      	str	r1, [sp, #12]
 8001234:	f002 f921 	bl	800347a <memset>
    rslt = null_ptr_check(dev);
 8001238:	0020      	movs	r0, r4
 800123a:	f7ff ff2f 	bl	800109c <null_ptr_check>
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 800123e:	2800      	cmp	r0, #0
 8001240:	d134      	bne.n	80012ac <bme68x_set_regs+0x8c>
 8001242:	2e00      	cmp	r6, #0
 8001244:	d032      	beq.n	80012ac <bme68x_set_regs+0x8c>
 8001246:	2d00      	cmp	r5, #0
 8001248:	d030      	beq.n	80012ac <bme68x_set_regs+0x8c>
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800124a:	9b00      	ldr	r3, [sp, #0]
 800124c:	3b01      	subs	r3, #1
 800124e:	2b09      	cmp	r3, #9
 8001250:	d82e      	bhi.n	80012b0 <bme68x_set_regs+0x90>
 8001252:	9b00      	ldr	r3, [sp, #0]
 8001254:	af03      	add	r7, sp, #12
 8001256:	18eb      	adds	r3, r5, r3
 8001258:	9301      	str	r3, [sp, #4]
            for (index = 0; index < len; index++)
 800125a:	9b01      	ldr	r3, [sp, #4]
 800125c:	429d      	cmp	r5, r3
 800125e:	d113      	bne.n	8001288 <bme68x_set_regs+0x68>
            if (rslt == BME68X_OK)
 8001260:	2800      	cmp	r0, #0
 8001262:	d10f      	bne.n	8001284 <bme68x_set_regs+0x64>
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001264:	9b00      	ldr	r3, [sp, #0]
 8001266:	a902      	add	r1, sp, #8
 8001268:	005a      	lsls	r2, r3, #1
 800126a:	ab02      	add	r3, sp, #8
 800126c:	7918      	ldrb	r0, [r3, #4]
 800126e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001270:	6863      	ldr	r3, [r4, #4]
 8001272:	3a01      	subs	r2, #1
 8001274:	3105      	adds	r1, #5
 8001276:	47a8      	blx	r5
 8001278:	344c      	adds	r4, #76	; 0x4c
 800127a:	7020      	strb	r0, [r4, #0]
                if (dev->intf_rslt != 0)
 800127c:	2800      	cmp	r0, #0
 800127e:	d001      	beq.n	8001284 <bme68x_set_regs+0x64>
                    rslt = BME68X_E_COM_FAIL;
 8001280:	2002      	movs	r0, #2
            rslt = BME68X_E_INVALID_LENGTH;
 8001282:	4240      	negs	r0, r0
}
 8001284:	b009      	add	sp, #36	; 0x24
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (dev->intf == BME68X_SPI_INTF)
 8001288:	7b22      	ldrb	r2, [r4, #12]
                    rslt = set_mem_page(reg_addr[index], dev);
 800128a:	7833      	ldrb	r3, [r6, #0]
                if (dev->intf == BME68X_SPI_INTF)
 800128c:	2a00      	cmp	r2, #0
 800128e:	d106      	bne.n	800129e <bme68x_set_regs+0x7e>
                    rslt = set_mem_page(reg_addr[index], dev);
 8001290:	0018      	movs	r0, r3
 8001292:	0021      	movs	r1, r4
 8001294:	f7ff ff27 	bl	80010e6 <set_mem_page>
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001298:	227f      	movs	r2, #127	; 0x7f
 800129a:	7833      	ldrb	r3, [r6, #0]
 800129c:	4013      	ands	r3, r2
                    tmp_buff[(2 * index)] = reg_addr[index];
 800129e:	703b      	strb	r3, [r7, #0]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 80012a0:	782b      	ldrb	r3, [r5, #0]
 80012a2:	3601      	adds	r6, #1
 80012a4:	707b      	strb	r3, [r7, #1]
            for (index = 0; index < len; index++)
 80012a6:	3501      	adds	r5, #1
 80012a8:	3702      	adds	r7, #2
 80012aa:	e7d6      	b.n	800125a <bme68x_set_regs+0x3a>
        rslt = BME68X_E_NULL_PTR;
 80012ac:	2001      	movs	r0, #1
 80012ae:	e7e8      	b.n	8001282 <bme68x_set_regs+0x62>
            rslt = BME68X_E_INVALID_LENGTH;
 80012b0:	2004      	movs	r0, #4
 80012b2:	e7e6      	b.n	8001282 <bme68x_set_regs+0x62>

080012b4 <bme68x_get_regs>:
{
 80012b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012b6:	0006      	movs	r6, r0
    rslt = null_ptr_check(dev);
 80012b8:	0018      	movs	r0, r3
{
 80012ba:	000f      	movs	r7, r1
 80012bc:	001d      	movs	r5, r3
 80012be:	9201      	str	r2, [sp, #4]
    rslt = null_ptr_check(dev);
 80012c0:	f7ff feec 	bl	800109c <null_ptr_check>
 80012c4:	1e04      	subs	r4, r0, #0
    if ((rslt == BME68X_OK) && reg_data)
 80012c6:	d11a      	bne.n	80012fe <bme68x_get_regs+0x4a>
 80012c8:	2f00      	cmp	r7, #0
 80012ca:	d018      	beq.n	80012fe <bme68x_get_regs+0x4a>
        if (dev->intf == BME68X_SPI_INTF)
 80012cc:	7b2b      	ldrb	r3, [r5, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <bme68x_get_regs+0x2e>
            rslt = set_mem_page(reg_addr, dev);
 80012d2:	0029      	movs	r1, r5
 80012d4:	0030      	movs	r0, r6
 80012d6:	f7ff ff06 	bl	80010e6 <set_mem_page>
 80012da:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
 80012dc:	d101      	bne.n	80012e2 <bme68x_get_regs+0x2e>
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	431e      	orrs	r6, r3
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80012e2:	0030      	movs	r0, r6
 80012e4:	686b      	ldr	r3, [r5, #4]
 80012e6:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 80012e8:	0039      	movs	r1, r7
 80012ea:	9a01      	ldr	r2, [sp, #4]
 80012ec:	47b0      	blx	r6
 80012ee:	354c      	adds	r5, #76	; 0x4c
 80012f0:	7028      	strb	r0, [r5, #0]
        if (dev->intf_rslt != 0)
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d001      	beq.n	80012fa <bme68x_get_regs+0x46>
            rslt = BME68X_E_COM_FAIL;
 80012f6:	2402      	movs	r4, #2
        rslt = BME68X_E_NULL_PTR;
 80012f8:	4264      	negs	r4, r4
}
 80012fa:	0020      	movs	r0, r4
 80012fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rslt = BME68X_E_NULL_PTR;
 80012fe:	2401      	movs	r4, #1
 8001300:	e7fa      	b.n	80012f8 <bme68x_get_regs+0x44>
	...

08001304 <bme68x_soft_reset>:
{
 8001304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001306:	466b      	mov	r3, sp
 8001308:	1d9d      	adds	r5, r3, #6
 800130a:	23e0      	movs	r3, #224	; 0xe0
 800130c:	702b      	strb	r3, [r5, #0]
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 800130e:	466b      	mov	r3, sp
 8001310:	1dde      	adds	r6, r3, #7
 8001312:	23b6      	movs	r3, #182	; 0xb6
{
 8001314:	0007      	movs	r7, r0
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001316:	7033      	strb	r3, [r6, #0]
    rslt = null_ptr_check(dev);
 8001318:	f7ff fec0 	bl	800109c <null_ptr_check>
 800131c:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
 800131e:	d10a      	bne.n	8001336 <bme68x_soft_reset+0x32>
        if (dev->intf == BME68X_SPI_INTF)
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <bme68x_soft_reset+0x36>
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001326:	003b      	movs	r3, r7
 8001328:	2201      	movs	r2, #1
 800132a:	0031      	movs	r1, r6
 800132c:	0028      	movs	r0, r5
 800132e:	f7ff ff77 	bl	8001220 <bme68x_set_regs>
 8001332:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
 8001334:	d007      	beq.n	8001346 <bme68x_soft_reset+0x42>
}
 8001336:	0020      	movs	r0, r4
 8001338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            rslt = get_mem_page(dev);
 800133a:	0038      	movs	r0, r7
 800133c:	f7ff ff06 	bl	800114c <get_mem_page>
 8001340:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
 8001342:	d1f8      	bne.n	8001336 <bme68x_soft_reset+0x32>
 8001344:	e7ef      	b.n	8001326 <bme68x_soft_reset+0x22>
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <bme68x_soft_reset+0x5c>)
 800134c:	4798      	blx	r3
                if (dev->intf == BME68X_SPI_INTF)
 800134e:	7b3b      	ldrb	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <bme68x_soft_reset+0x32>
                    rslt = get_mem_page(dev);
 8001354:	0038      	movs	r0, r7
 8001356:	f7ff fef9 	bl	800114c <get_mem_page>
 800135a:	0004      	movs	r4, r0
 800135c:	e7eb      	b.n	8001336 <bme68x_soft_reset+0x32>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	00002710 	.word	0x00002710

08001364 <bme68x_init>:
{
 8001364:	b530      	push	{r4, r5, lr}
 8001366:	0004      	movs	r4, r0
 8001368:	b08d      	sub	sp, #52	; 0x34
    (void) bme68x_soft_reset(dev);
 800136a:	f7ff ffcb 	bl	8001304 <bme68x_soft_reset>
    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800136e:	0023      	movs	r3, r4
 8001370:	2201      	movs	r2, #1
 8001372:	0021      	movs	r1, r4
 8001374:	20d0      	movs	r0, #208	; 0xd0
 8001376:	f7ff ff9d 	bl	80012b4 <bme68x_get_regs>
    if (rslt == BME68X_OK)
 800137a:	2800      	cmp	r0, #0
 800137c:	d000      	beq.n	8001380 <bme68x_init+0x1c>
 800137e:	e086      	b.n	800148e <bme68x_init+0x12a>
        if (dev->chip_id == BME68X_CHIP_ID)
 8001380:	7823      	ldrb	r3, [r4, #0]
 8001382:	2b61      	cmp	r3, #97	; 0x61
 8001384:	d000      	beq.n	8001388 <bme68x_init+0x24>
 8001386:	e084      	b.n	8001492 <bme68x_init+0x12e>

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
    int8_t rslt;
    uint8_t reg_data = 0;
 8001388:	ad01      	add	r5, sp, #4
 800138a:	7028      	strb	r0, [r5, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 800138c:	0023      	movs	r3, r4
 800138e:	2201      	movs	r2, #1
 8001390:	0029      	movs	r1, r5
 8001392:	30f0      	adds	r0, #240	; 0xf0
 8001394:	f7ff ff8e 	bl	80012b4 <bme68x_get_regs>

    if (rslt == BME68X_OK)
 8001398:	2800      	cmp	r0, #0
 800139a:	d178      	bne.n	800148e <bme68x_init+0x12a>
    {
        dev->variant_id = reg_data;
 800139c:	782b      	ldrb	r3, [r5, #0]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 800139e:	2217      	movs	r2, #23
        dev->variant_id = reg_data;
 80013a0:	60a3      	str	r3, [r4, #8]
    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 80013a2:	0029      	movs	r1, r5
 80013a4:	0023      	movs	r3, r4
 80013a6:	308a      	adds	r0, #138	; 0x8a
 80013a8:	f7ff ff84 	bl	80012b4 <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80013ac:	2800      	cmp	r0, #0
 80013ae:	d16e      	bne.n	800148e <bme68x_init+0x12a>
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 80013b0:	211b      	movs	r1, #27
 80013b2:	0023      	movs	r3, r4
 80013b4:	220e      	movs	r2, #14
 80013b6:	4469      	add	r1, sp
 80013b8:	30e1      	adds	r0, #225	; 0xe1
 80013ba:	f7ff ff7b 	bl	80012b4 <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80013be:	2800      	cmp	r0, #0
 80013c0:	d165      	bne.n	800148e <bme68x_init+0x12a>
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80013c2:	2129      	movs	r1, #41	; 0x29
 80013c4:	0023      	movs	r3, r4
 80013c6:	2205      	movs	r2, #5
 80013c8:	4469      	add	r1, sp
 80013ca:	f7ff ff73 	bl	80012b4 <bme68x_get_regs>
    if (rslt == BME68X_OK)
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d15d      	bne.n	800148e <bme68x_init+0x12a>
        dev->calib.par_t1 =
 80013d2:	2223      	movs	r2, #35	; 0x23
 80013d4:	446a      	add	r2, sp
 80013d6:	7853      	ldrb	r3, [r2, #1]
 80013d8:	7811      	ldrb	r1, [r2, #0]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	430b      	orrs	r3, r1
 80013de:	83e3      	strh	r3, [r4, #30]
        dev->calib.par_t2 =
 80013e0:	882b      	ldrh	r3, [r5, #0]
 80013e2:	8423      	strh	r3, [r4, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80013e4:	78aa      	ldrb	r2, [r5, #2]
 80013e6:	1ce3      	adds	r3, r4, #3
 80013e8:	77da      	strb	r2, [r3, #31]
        dev->calib.par_p1 =
 80013ea:	88ab      	ldrh	r3, [r5, #4]
 80013ec:	84a3      	strh	r3, [r4, #36]	; 0x24
        dev->calib.par_p2 =
 80013ee:	88eb      	ldrh	r3, [r5, #6]
 80013f0:	84e3      	strh	r3, [r4, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80013f2:	0023      	movs	r3, r4
 80013f4:	7a2a      	ldrb	r2, [r5, #8]
 80013f6:	3328      	adds	r3, #40	; 0x28
 80013f8:	701a      	strb	r2, [r3, #0]
        dev->calib.par_p4 =
 80013fa:	896b      	ldrh	r3, [r5, #10]
 80013fc:	8563      	strh	r3, [r4, #42]	; 0x2a
        dev->calib.par_p5 =
 80013fe:	89ab      	ldrh	r3, [r5, #12]
 8001400:	85a3      	strh	r3, [r4, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8001402:	0023      	movs	r3, r4
 8001404:	7bea      	ldrb	r2, [r5, #15]
 8001406:	332e      	adds	r3, #46	; 0x2e
 8001408:	701a      	strb	r2, [r3, #0]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 800140a:	7baa      	ldrb	r2, [r5, #14]
 800140c:	705a      	strb	r2, [r3, #1]
        dev->calib.par_p8 =
 800140e:	8a6b      	ldrh	r3, [r5, #18]
 8001410:	8623      	strh	r3, [r4, #48]	; 0x30
        dev->calib.par_p9 =
 8001412:	8aab      	ldrh	r3, [r5, #20]
 8001414:	8663      	strh	r3, [r4, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8001416:	0023      	movs	r3, r4
 8001418:	7daa      	ldrb	r2, [r5, #22]
 800141a:	3334      	adds	r3, #52	; 0x34
 800141c:	701a      	strb	r2, [r3, #0]
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 800141e:	220f      	movs	r2, #15
 8001420:	7e2b      	ldrb	r3, [r5, #24]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001422:	7e69      	ldrb	r1, [r5, #25]
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8001424:	401a      	ands	r2, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8001426:	0109      	lsls	r1, r1, #4
 8001428:	430a      	orrs	r2, r1
        dev->calib.par_h1 =
 800142a:	8222      	strh	r2, [r4, #16]
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 800142c:	7dea      	ldrb	r2, [r5, #23]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	4313      	orrs	r3, r2
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8001434:	2225      	movs	r2, #37	; 0x25
        dev->calib.par_h2 =
 8001436:	8263      	strh	r3, [r4, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8001438:	7eab      	ldrb	r3, [r5, #26]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 800143a:	446a      	add	r2, sp
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 800143c:	7523      	strb	r3, [r4, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 800143e:	7eeb      	ldrb	r3, [r5, #27]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8001440:	7811      	ldrb	r1, [r2, #0]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8001442:	7563      	strb	r3, [r4, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8001444:	7f2b      	ldrb	r3, [r5, #28]
 8001446:	75a3      	strb	r3, [r4, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8001448:	7f6b      	ldrb	r3, [r5, #29]
 800144a:	75e3      	strb	r3, [r4, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 800144c:	7fab      	ldrb	r3, [r5, #30]
 800144e:	7623      	strb	r3, [r4, #24]
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8001450:	ab02      	add	r3, sp, #8
 8001452:	7fdb      	ldrb	r3, [r3, #31]
 8001454:	7663      	strb	r3, [r4, #25]
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8001456:	7853      	ldrb	r3, [r2, #1]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8001458:	0022      	movs	r2, r4
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	430b      	orrs	r3, r1
        dev->calib.par_gh2 =
 800145e:	8363      	strh	r3, [r4, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8001460:	2309      	movs	r3, #9
 8001462:	446b      	add	r3, sp
 8001464:	7fdb      	ldrb	r3, [r3, #31]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8001466:	323c      	adds	r2, #60	; 0x3c
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8001468:	7723      	strb	r3, [r4, #28]
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800146a:	ab03      	add	r3, sp, #12
 800146c:	7fdb      	ldrb	r3, [r3, #31]
 800146e:	069b      	lsls	r3, r3, #26
 8001470:	0f9b      	lsrs	r3, r3, #30
 8001472:	7013      	strb	r3, [r2, #0]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8001474:	220a      	movs	r2, #10
 8001476:	0023      	movs	r3, r4
 8001478:	446a      	add	r2, sp
 800147a:	7fd2      	ldrb	r2, [r2, #31]
 800147c:	333d      	adds	r3, #61	; 0x3d
 800147e:	701a      	strb	r2, [r3, #0]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8001480:	232d      	movs	r3, #45	; 0x2d
 8001482:	446b      	add	r3, sp
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	343e      	adds	r4, #62	; 0x3e
 8001488:	b25b      	sxtb	r3, r3
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	7023      	strb	r3, [r4, #0]
}
 800148e:	b00d      	add	sp, #52	; 0x34
 8001490:	bd30      	pop	{r4, r5, pc}
            rslt = BME68X_E_DEV_NOT_FOUND;
 8001492:	2003      	movs	r0, #3
 8001494:	4240      	negs	r0, r0
 8001496:	e7fa      	b.n	800148e <bme68x_init+0x12a>

08001498 <bme68x_set_op_mode>:
{
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	b085      	sub	sp, #20
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 800149c:	ab02      	add	r3, sp, #8
 800149e:	1ddf      	adds	r7, r3, #7
 80014a0:	2374      	movs	r3, #116	; 0x74
{
 80014a2:	000d      	movs	r5, r1
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80014a4:	2603      	movs	r6, #3
{
 80014a6:	9001      	str	r0, [sp, #4]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80014a8:	703b      	strb	r3, [r7, #0]
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80014aa:	a902      	add	r1, sp, #8
 80014ac:	002b      	movs	r3, r5
 80014ae:	2201      	movs	r2, #1
 80014b0:	2074      	movs	r0, #116	; 0x74
 80014b2:	3106      	adds	r1, #6
 80014b4:	f7ff fefe 	bl	80012b4 <bme68x_get_regs>
 80014b8:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
 80014ba:	d113      	bne.n	80014e4 <bme68x_set_op_mode+0x4c>
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80014bc:	ab02      	add	r3, sp, #8
 80014be:	7998      	ldrb	r0, [r3, #6]
            if (pow_mode != BME68X_SLEEP_MODE)
 80014c0:	4230      	tst	r0, r6
 80014c2:	d012      	beq.n	80014ea <bme68x_set_op_mode+0x52>
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80014c4:	43b0      	bics	r0, r6
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014c6:	a902      	add	r1, sp, #8
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80014c8:	7198      	strb	r0, [r3, #6]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014ca:	3106      	adds	r1, #6
 80014cc:	002b      	movs	r3, r5
 80014ce:	2201      	movs	r2, #1
 80014d0:	0038      	movs	r0, r7
 80014d2:	f7ff fea5 	bl	8001220 <bme68x_set_regs>
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80014d6:	6869      	ldr	r1, [r5, #4]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014d8:	0004      	movs	r4, r0
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80014da:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <bme68x_set_op_mode+0x78>)
 80014de:	4798      	blx	r3
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80014e0:	2c00      	cmp	r4, #0
 80014e2:	d0e2      	beq.n	80014aa <bme68x_set_op_mode+0x12>
}
 80014e4:	0020      	movs	r0, r4
 80014e6:	b005      	add	sp, #20
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80014ea:	9b01      	ldr	r3, [sp, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f9      	beq.n	80014e4 <bme68x_set_op_mode+0x4c>
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80014f0:	9b01      	ldr	r3, [sp, #4]
 80014f2:	43b0      	bics	r0, r6
 80014f4:	4033      	ands	r3, r6
 80014f6:	4318      	orrs	r0, r3
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014f8:	a902      	add	r1, sp, #8
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80014fa:	ab02      	add	r3, sp, #8
 80014fc:	7198      	strb	r0, [r3, #6]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014fe:	2201      	movs	r2, #1
 8001500:	002b      	movs	r3, r5
 8001502:	0038      	movs	r0, r7
 8001504:	3106      	adds	r1, #6
 8001506:	f7ff fe8b 	bl	8001220 <bme68x_set_regs>
 800150a:	0004      	movs	r4, r0
 800150c:	e7ea      	b.n	80014e4 <bme68x_set_op_mode+0x4c>
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	00002710 	.word	0x00002710

08001514 <bme68x_get_op_mode>:
{
 8001514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001516:	000b      	movs	r3, r1
 8001518:	1e04      	subs	r4, r0, #0
    if (op_mode)
 800151a:	d00b      	beq.n	8001534 <bme68x_get_op_mode+0x20>
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800151c:	466a      	mov	r2, sp
 800151e:	1dd5      	adds	r5, r2, #7
 8001520:	0029      	movs	r1, r5
 8001522:	2201      	movs	r2, #1
 8001524:	2074      	movs	r0, #116	; 0x74
 8001526:	f7ff fec5 	bl	80012b4 <bme68x_get_regs>
        *op_mode = mode & BME68X_MODE_MSK;
 800152a:	2203      	movs	r2, #3
 800152c:	782b      	ldrb	r3, [r5, #0]
 800152e:	4013      	ands	r3, r2
 8001530:	7023      	strb	r3, [r4, #0]
}
 8001532:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        rslt = BME68X_E_NULL_PTR;
 8001534:	2001      	movs	r0, #1
 8001536:	4240      	negs	r0, r0
 8001538:	e7fb      	b.n	8001532 <bme68x_get_op_mode+0x1e>
	...

0800153c <bme68x_set_conf>:
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	b089      	sub	sp, #36	; 0x24
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001540:	af04      	add	r7, sp, #16
{
 8001542:	000d      	movs	r5, r1
 8001544:	0004      	movs	r4, r0
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001546:	4948      	ldr	r1, [pc, #288]	; (8001668 <bme68x_set_conf+0x12c>)
 8001548:	2205      	movs	r2, #5
 800154a:	0038      	movs	r0, r7
 800154c:	f001 ff8c 	bl	8003468 <memcpy>
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001550:	2300      	movs	r3, #0
 8001552:	ae06      	add	r6, sp, #24
 8001554:	9306      	str	r3, [sp, #24]
 8001556:	7133      	strb	r3, [r6, #4]
    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001558:	ab02      	add	r3, sp, #8
 800155a:	0029      	movs	r1, r5
 800155c:	1dd8      	adds	r0, r3, #7
 800155e:	f7ff ffd9 	bl	8001514 <bme68x_get_op_mode>
    if (rslt == BME68X_OK)
 8001562:	2800      	cmp	r0, #0
 8001564:	d000      	beq.n	8001568 <bme68x_set_conf+0x2c>
 8001566:	e07a      	b.n	800165e <bme68x_set_conf+0x122>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001568:	0029      	movs	r1, r5
 800156a:	f7ff ff95 	bl	8001498 <bme68x_set_op_mode>
 800156e:	9001      	str	r0, [sp, #4]
    if (conf == NULL)
 8001570:	2c00      	cmp	r4, #0
 8001572:	d10e      	bne.n	8001592 <bme68x_set_conf+0x56>
        rslt = BME68X_E_NULL_PTR;
 8001574:	2001      	movs	r0, #1
 8001576:	4240      	negs	r0, r0
    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001578:	ab02      	add	r3, sp, #8
 800157a:	3307      	adds	r3, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <bme68x_set_conf+0x52>
 8001582:	2800      	cmp	r0, #0
 8001584:	d103      	bne.n	800158e <bme68x_set_conf+0x52>
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001586:	0029      	movs	r1, r5
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ff85 	bl	8001498 <bme68x_set_op_mode>
}
 800158e:	b009      	add	sp, #36	; 0x24
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (rslt == BME68X_OK)
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ef      	bne.n	8001578 <bme68x_set_conf+0x3c>
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001598:	002b      	movs	r3, r5
 800159a:	2205      	movs	r2, #5
 800159c:	0031      	movs	r1, r6
 800159e:	7838      	ldrb	r0, [r7, #0]
 80015a0:	f7ff fe88 	bl	80012b4 <bme68x_get_regs>
        dev->info_msg = BME68X_OK;
 80015a4:	002b      	movs	r3, r5
 80015a6:	9a01      	ldr	r2, [sp, #4]
 80015a8:	334d      	adds	r3, #77	; 0x4d
 80015aa:	701a      	strb	r2, [r3, #0]
        if (rslt == BME68X_OK)
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d1e3      	bne.n	8001578 <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 80015b0:	002a      	movs	r2, r5
 80015b2:	2107      	movs	r1, #7
 80015b4:	1ce0      	adds	r0, r4, #3
 80015b6:	f7ff fd80 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d1dc      	bne.n	8001578 <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80015be:	002a      	movs	r2, r5
 80015c0:	2105      	movs	r1, #5
 80015c2:	1c60      	adds	r0, r4, #1
 80015c4:	f7ff fd79 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1d5      	bne.n	8001578 <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80015cc:	002a      	movs	r2, r5
 80015ce:	2105      	movs	r1, #5
 80015d0:	1ca0      	adds	r0, r4, #2
 80015d2:	f7ff fd72 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d1ce      	bne.n	8001578 <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80015da:	002a      	movs	r2, r5
 80015dc:	2105      	movs	r1, #5
 80015de:	0020      	movs	r0, r4
 80015e0:	f7ff fd6b 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d1c7      	bne.n	8001578 <bme68x_set_conf+0x3c>
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 80015e8:	002a      	movs	r2, r5
 80015ea:	2108      	movs	r1, #8
 80015ec:	1d20      	adds	r0, r4, #4
 80015ee:	f7ff fd64 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d1c0      	bne.n	8001578 <bme68x_set_conf+0x3c>
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80015f6:	211c      	movs	r1, #28
 80015f8:	78e2      	ldrb	r2, [r4, #3]
 80015fa:	7933      	ldrb	r3, [r6, #4]
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	438b      	bics	r3, r1
 8001600:	400a      	ands	r2, r1
 8001602:	431a      	orrs	r2, r3
 8001604:	b253      	sxtb	r3, r2
 8001606:	9301      	str	r3, [sp, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001608:	78f3      	ldrb	r3, [r6, #3]
 800160a:	7862      	ldrb	r2, [r4, #1]
 800160c:	301f      	adds	r0, #31
 800160e:	0152      	lsls	r2, r2, #5
 8001610:	4003      	ands	r3, r0
 8001612:	4313      	orrs	r3, r2
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001614:	78a2      	ldrb	r2, [r4, #2]
 8001616:	438b      	bics	r3, r1
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	4011      	ands	r1, r2
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 800161c:	2207      	movs	r2, #7
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 800161e:	4319      	orrs	r1, r3
 8001620:	70f1      	strb	r1, [r6, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001622:	7873      	ldrb	r3, [r6, #1]
 8001624:	7821      	ldrb	r1, [r4, #0]
 8001626:	4393      	bics	r3, r2
 8001628:	4011      	ands	r1, r2
 800162a:	430b      	orrs	r3, r1
 800162c:	7073      	strb	r3, [r6, #1]
            if (conf->odr != BME68X_ODR_NONE)
 800162e:	7923      	ldrb	r3, [r4, #4]
                odr3 = 0;
 8001630:	2100      	movs	r1, #0
            if (conf->odr != BME68X_ODR_NONE)
 8001632:	2b08      	cmp	r3, #8
 8001634:	d101      	bne.n	800163a <bme68x_set_conf+0xfe>
    uint8_t odr20 = 0, odr3 = 1;
 8001636:	2101      	movs	r1, #1
 8001638:	2300      	movs	r3, #0
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 800163a:	9a01      	ldr	r2, [sp, #4]
 800163c:	015b      	lsls	r3, r3, #5
 800163e:	4002      	ands	r2, r0
 8001640:	431a      	orrs	r2, r3
 8001642:	7132      	strb	r2, [r6, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001644:	227f      	movs	r2, #127	; 0x7f
 8001646:	7833      	ldrb	r3, [r6, #0]
 8001648:	01c9      	lsls	r1, r1, #7
 800164a:	4013      	ands	r3, r2
 800164c:	430b      	orrs	r3, r1
 800164e:	7033      	strb	r3, [r6, #0]
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001650:	0031      	movs	r1, r6
 8001652:	002b      	movs	r3, r5
 8001654:	0038      	movs	r0, r7
 8001656:	3a7a      	subs	r2, #122	; 0x7a
 8001658:	f7ff fde2 	bl	8001220 <bme68x_set_regs>
 800165c:	e78c      	b.n	8001578 <bme68x_set_conf+0x3c>
    if (conf == NULL)
 800165e:	2c00      	cmp	r4, #0
 8001660:	d000      	beq.n	8001664 <bme68x_set_conf+0x128>
 8001662:	e789      	b.n	8001578 <bme68x_set_conf+0x3c>
 8001664:	e786      	b.n	8001574 <bme68x_set_conf+0x38>
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	08003e65 	.word	0x08003e65

0800166c <bme68x_get_meas_dur>:
{
 800166c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800166e:	000c      	movs	r4, r1
 8001670:	0006      	movs	r6, r0
 8001672:	0015      	movs	r5, r2
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8001674:	4668      	mov	r0, sp
 8001676:	2206      	movs	r2, #6
 8001678:	4917      	ldr	r1, [pc, #92]	; (80016d8 <bme68x_get_meas_dur+0x6c>)
 800167a:	f001 fef5 	bl	8003468 <memcpy>
    if (conf != NULL)
 800167e:	2c00      	cmp	r4, #0
 8001680:	d101      	bne.n	8001686 <bme68x_get_meas_dur+0x1a>
    uint32_t meas_dur = 0; /* Calculate in us */
 8001682:	2000      	movs	r0, #0
}
 8001684:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001686:	002a      	movs	r2, r5
 8001688:	2105      	movs	r1, #5
 800168a:	1c60      	adds	r0, r4, #1
 800168c:	f7ff fd15 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 8001690:	2800      	cmp	r0, #0
 8001692:	d1f6      	bne.n	8001682 <bme68x_get_meas_dur+0x16>
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001694:	002a      	movs	r2, r5
 8001696:	2105      	movs	r1, #5
 8001698:	1ca0      	adds	r0, r4, #2
 800169a:	f7ff fd0e 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 800169e:	2800      	cmp	r0, #0
 80016a0:	d1ef      	bne.n	8001682 <bme68x_get_meas_dur+0x16>
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80016a2:	002a      	movs	r2, r5
 80016a4:	2105      	movs	r1, #5
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7ff fd07 	bl	80010ba <boundary_check>
        if (rslt == BME68X_OK)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1e8      	bne.n	8001682 <bme68x_get_meas_dur+0x16>
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 80016b0:	466a      	mov	r2, sp
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 80016b2:	4669      	mov	r1, sp
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 80016b4:	7863      	ldrb	r3, [r4, #1]
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 80016b8:	78a2      	ldrb	r2, [r4, #2]
 80016ba:	5c8a      	ldrb	r2, [r1, r2]
 80016bc:	18d2      	adds	r2, r2, r3
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 80016be:	7823      	ldrb	r3, [r4, #0]
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	189a      	adds	r2, r3, r2
            meas_dur = meas_cycles * UINT32_C(1963);
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <bme68x_get_meas_dur+0x70>)
 80016c6:	4353      	muls	r3, r2
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <bme68x_get_meas_dur+0x74>)
 80016ca:	1898      	adds	r0, r3, r2
            if (op_mode != BME68X_PARALLEL_MODE)
 80016cc:	2e02      	cmp	r6, #2
 80016ce:	d1d9      	bne.n	8001684 <bme68x_get_meas_dur+0x18>
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <bme68x_get_meas_dur+0x78>)
 80016d2:	1898      	adds	r0, r3, r2
 80016d4:	e7d6      	b.n	8001684 <bme68x_get_meas_dur+0x18>
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	08003e44 	.word	0x08003e44
 80016dc:	000007ab 	.word	0x000007ab
 80016e0:	000014ad 	.word	0x000014ad
 80016e4:	000010c5 	.word	0x000010c5

080016e8 <bme68x_get_data>:
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	001e      	movs	r6, r3
 80016ec:	b0b9      	sub	sp, #228	; 0xe4
    struct bme68x_data field_data[3] = { { 0 } };
 80016ee:	ac29      	add	r4, sp, #164	; 0xa4
{
 80016f0:	9004      	str	r0, [sp, #16]
 80016f2:	9102      	str	r1, [sp, #8]
 80016f4:	9206      	str	r2, [sp, #24]
    struct bme68x_data field_data[3] = { { 0 } };
 80016f6:	2100      	movs	r1, #0
 80016f8:	223c      	movs	r2, #60	; 0x3c
 80016fa:	0020      	movs	r0, r4
 80016fc:	f001 febd 	bl	800347a <memset>
    field_ptr[1] = &field_data[1];
 8001700:	ab2e      	add	r3, sp, #184	; 0xb8
 8001702:	9312      	str	r3, [sp, #72]	; 0x48
    rslt = null_ptr_check(dev);
 8001704:	0030      	movs	r0, r6
    field_ptr[2] = &field_data[2];
 8001706:	ab33      	add	r3, sp, #204	; 0xcc
    field_ptr[0] = &field_data[0];
 8001708:	9411      	str	r4, [sp, #68]	; 0x44
    field_ptr[2] = &field_data[2];
 800170a:	9313      	str	r3, [sp, #76]	; 0x4c
    rslt = null_ptr_check(dev);
 800170c:	f7ff fcc6 	bl	800109c <null_ptr_check>
 8001710:	1e07      	subs	r7, r0, #0
    if ((rslt == BME68X_OK) && (data != NULL))
 8001712:	d005      	beq.n	8001720 <bme68x_get_data+0x38>
        rslt = BME68X_E_NULL_PTR;
 8001714:	2301      	movs	r3, #1
 8001716:	425b      	negs	r3, r3
 8001718:	9301      	str	r3, [sp, #4]
}
 800171a:	9801      	ldr	r0, [sp, #4]
 800171c:	b039      	add	sp, #228	; 0xe4
 800171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((rslt == BME68X_OK) && (data != NULL))
 8001720:	9b02      	ldr	r3, [sp, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f6      	beq.n	8001714 <bme68x_get_data+0x2c>
        if (op_mode == BME68X_FORCED_MODE)
 8001726:	9b04      	ldr	r3, [sp, #16]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d000      	beq.n	800172e <bme68x_get_data+0x46>
 800172c:	e0d9      	b.n	80018e2 <bme68x_get_data+0x1fa>
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800172e:	0001      	movs	r1, r0
 8001730:	901c      	str	r0, [sp, #112]	; 0x70
 8001732:	220d      	movs	r2, #13
 8001734:	a81d      	add	r0, sp, #116	; 0x74
 8001736:	f001 fea0 	bl	800347a <memset>
 800173a:	2505      	movs	r5, #5
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 800173c:	af1c      	add	r7, sp, #112	; 0x70
 800173e:	0039      	movs	r1, r7
 8001740:	0033      	movs	r3, r6
 8001742:	2211      	movs	r2, #17
 8001744:	201d      	movs	r0, #29
 8001746:	f7ff fdb5 	bl	80012b4 <bme68x_get_regs>
 800174a:	9001      	str	r0, [sp, #4]
 800174c:	0001      	movs	r1, r0
        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 800174e:	7838      	ldrb	r0, [r7, #0]
 8001750:	227f      	movs	r2, #127	; 0x7f
 8001752:	0003      	movs	r3, r0
 8001754:	4393      	bics	r3, r2
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8001756:	3a70      	subs	r2, #112	; 0x70
 8001758:	4010      	ands	r0, r2
 800175a:	9a02      	ldr	r2, [sp, #8]
        data->meas_index = buff[1];
 800175c:	9c02      	ldr	r4, [sp, #8]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 800175e:	7050      	strb	r0, [r2, #1]
        data->meas_index = buff[1];
 8001760:	787a      	ldrb	r2, [r7, #1]
 8001762:	70a2      	strb	r2, [r4, #2]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8001764:	78ba      	ldrb	r2, [r7, #2]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001766:	68b4      	ldr	r4, [r6, #8]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8001768:	9205      	str	r2, [sp, #20]
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	9207      	str	r2, [sp, #28]
 800176e:	793a      	ldrb	r2, [r7, #4]
 8001770:	9208      	str	r2, [sp, #32]
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8001772:	797a      	ldrb	r2, [r7, #5]
 8001774:	9209      	str	r2, [sp, #36]	; 0x24
 8001776:	79ba      	ldrb	r2, [r7, #6]
 8001778:	920a      	str	r2, [sp, #40]	; 0x28
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	920b      	str	r2, [sp, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 800177e:	7a3a      	ldrb	r2, [r7, #8]
 8001780:	920c      	str	r2, [sp, #48]	; 0x30
 8001782:	7a7a      	ldrb	r2, [r7, #9]
 8001784:	920d      	str	r2, [sp, #52]	; 0x34
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8001786:	7b7a      	ldrb	r2, [r7, #13]
 8001788:	920e      	str	r2, [sp, #56]	; 0x38
 800178a:	7bba      	ldrb	r2, [r7, #14]
 800178c:	9203      	str	r2, [sp, #12]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 800178e:	7bfa      	ldrb	r2, [r7, #15]
 8001790:	920f      	str	r2, [sp, #60]	; 0x3c
 8001792:	7c3f      	ldrb	r7, [r7, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001794:	2220      	movs	r2, #32
 8001796:	2c01      	cmp	r4, #1
 8001798:	d178      	bne.n	800188c <bme68x_get_data+0x1a4>
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 800179a:	b27c      	sxtb	r4, r7
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800179c:	4022      	ands	r2, r4
 800179e:	4313      	orrs	r3, r2
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 80017a0:	2210      	movs	r2, #16
 80017a2:	4022      	ands	r2, r4
 80017a4:	4313      	orrs	r3, r2
 80017a6:	9a02      	ldr	r2, [sp, #8]
 80017a8:	7013      	strb	r3, [r2, #0]
        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db00      	blt.n	80017b2 <bme68x_get_data+0xca>
 80017b0:	e07f      	b.n	80018b2 <bme68x_get_data+0x1ca>
 80017b2:	2900      	cmp	r1, #0
 80017b4:	d000      	beq.n	80017b8 <bme68x_get_data+0xd0>
 80017b6:	e082      	b.n	80018be <bme68x_get_data+0x1d6>
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80017b8:	1cd1      	adds	r1, r2, #3
 80017ba:	0033      	movs	r3, r6
 80017bc:	2201      	movs	r2, #1
 80017be:	305a      	adds	r0, #90	; 0x5a
 80017c0:	f7ff fd78 	bl	80012b4 <bme68x_get_regs>
 80017c4:	9001      	str	r0, [sp, #4]
            if (rslt == BME68X_OK)
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d179      	bne.n	80018be <bme68x_get_data+0x1d6>
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80017ca:	9b02      	ldr	r3, [sp, #8]
 80017cc:	2201      	movs	r2, #1
 80017ce:	7858      	ldrb	r0, [r3, #1]
 80017d0:	1d19      	adds	r1, r3, #4
 80017d2:	3050      	adds	r0, #80	; 0x50
 80017d4:	0033      	movs	r3, r6
 80017d6:	b2c0      	uxtb	r0, r0
 80017d8:	f7ff fd6c 	bl	80012b4 <bme68x_get_regs>
 80017dc:	9001      	str	r0, [sp, #4]
            if (rslt == BME68X_OK)
 80017de:	2800      	cmp	r0, #0
 80017e0:	d16d      	bne.n	80018be <bme68x_get_data+0x1d6>
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80017e2:	9b02      	ldr	r3, [sp, #8]
 80017e4:	2201      	movs	r2, #1
 80017e6:	7858      	ldrb	r0, [r3, #1]
 80017e8:	1d59      	adds	r1, r3, #5
 80017ea:	3064      	adds	r0, #100	; 0x64
 80017ec:	0033      	movs	r3, r6
 80017ee:	b2c0      	uxtb	r0, r0
 80017f0:	f7ff fd60 	bl	80012b4 <bme68x_get_regs>
 80017f4:	9001      	str	r0, [sp, #4]
            if (rslt == BME68X_OK)
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d161      	bne.n	80018be <bme68x_get_data+0x1d6>
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80017fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                data->temperature = calc_temperature(adc_temp, dev);
 80017fc:	0031      	movs	r1, r6
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80017fe:	0118      	lsls	r0, r3, #4
 8001800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	4318      	orrs	r0, r3
 8001806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001808:	031b      	lsls	r3, r3, #12
 800180a:	4318      	orrs	r0, r3
                data->temperature = calc_temperature(adc_temp, dev);
 800180c:	f7ff fb1d 	bl	8000e4a <calc_temperature>
 8001810:	9b02      	ldr	r3, [sp, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8001812:	0031      	movs	r1, r6
                data->temperature = calc_temperature(adc_temp, dev);
 8001814:	80d8      	strh	r0, [r3, #6]
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8001816:	9b07      	ldr	r3, [sp, #28]
 8001818:	0118      	lsls	r0, r3, #4
 800181a:	9b08      	ldr	r3, [sp, #32]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	4318      	orrs	r0, r3
 8001820:	9b05      	ldr	r3, [sp, #20]
 8001822:	031b      	lsls	r3, r3, #12
 8001824:	4318      	orrs	r0, r3
                data->pressure = calc_pressure(adc_pres, dev);
 8001826:	f7ff fb45 	bl	8000eb4 <calc_pressure>
 800182a:	9b02      	ldr	r3, [sp, #8]
                data->humidity = calc_humidity(adc_hum, dev);
 800182c:	0031      	movs	r1, r6
                data->pressure = calc_pressure(adc_pres, dev);
 800182e:	6098      	str	r0, [r3, #8]
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8001830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001832:	0218      	lsls	r0, r3, #8
                data->humidity = calc_humidity(adc_hum, dev);
 8001834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001836:	4318      	orrs	r0, r3
 8001838:	f7ff fb9e 	bl	8000f78 <calc_humidity>
 800183c:	9b02      	ldr	r3, [sp, #8]
 800183e:	60d8      	str	r0, [r3, #12]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001840:	68b3      	ldr	r3, [r6, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d126      	bne.n	8001894 <bme68x_get_data+0x1ac>
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8001846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001848:	09b9      	lsrs	r1, r7, #6
 800184a:	009b      	lsls	r3, r3, #2
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 800184c:	4319      	orrs	r1, r3
 800184e:	4ba2      	ldr	r3, [pc, #648]	; (8001ad8 <bme68x_get_data+0x3f0>)
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 8001850:	48a2      	ldr	r0, [pc, #648]	; (8001adc <bme68x_get_data+0x3f4>)
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8001852:	18c9      	adds	r1, r1, r3
    var2 *= INT32_C(3);
 8001854:	2303      	movs	r3, #3
 8001856:	4359      	muls	r1, r3
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8001858:	330c      	adds	r3, #12
 800185a:	401f      	ands	r7, r3
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	02db      	lsls	r3, r3, #11
 8001860:	40fb      	lsrs	r3, r7
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 8001862:	4358      	muls	r0, r3
    var2 = INT32_C(4096) + var2;
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	015b      	lsls	r3, r3, #5
 8001868:	18c9      	adds	r1, r1, r3
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 800186a:	f7fe fc73 	bl	8000154 <__udivsi3>
    calc_gas_res = calc_gas_res * 100;
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	4343      	muls	r3, r0
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8001872:	9a02      	ldr	r2, [sp, #8]
 8001874:	6113      	str	r3, [r2, #16]
            rslt = read_field_data(0, data, dev);
 8001876:	2200      	movs	r2, #0
                if (data->status & BME68X_NEW_DATA_MSK)
 8001878:	9b02      	ldr	r3, [sp, #8]
                    new_fields = 1;
 800187a:	9d04      	ldr	r5, [sp, #16]
                if (data->status & BME68X_NEW_DATA_MSK)
 800187c:	781b      	ldrb	r3, [r3, #0]
            rslt = read_field_data(0, data, dev);
 800187e:	9201      	str	r2, [sp, #4]
                if (data->status & BME68X_NEW_DATA_MSK)
 8001880:	2b7f      	cmp	r3, #127	; 0x7f
 8001882:	d828      	bhi.n	80018d6 <bme68x_get_data+0x1ee>
                    new_fields = 0;
 8001884:	0015      	movs	r5, r2
                rslt = BME68X_W_NO_NEW_DATA;
 8001886:	2302      	movs	r3, #2
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	e024      	b.n	80018d6 <bme68x_get_data+0x1ee>
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800188c:	466c      	mov	r4, sp
 800188e:	7b24      	ldrb	r4, [r4, #12]
 8001890:	b264      	sxtb	r4, r4
 8001892:	e783      	b.n	800179c <bme68x_get_data+0xb4>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8001894:	210f      	movs	r1, #15
 8001896:	223e      	movs	r2, #62	; 0x3e
 8001898:	9b03      	ldr	r3, [sp, #12]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 800189a:	9803      	ldr	r0, [sp, #12]
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800189c:	4019      	ands	r1, r3
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 800189e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018a0:	0980      	lsrs	r0, r0, #6
 80018a2:	009b      	lsls	r3, r3, #2
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80018a4:	56b2      	ldrsb	r2, [r6, r2]
 80018a6:	4318      	orrs	r0, r3
 80018a8:	f7ff fc6c 	bl	8001184 <calc_gas_resistance_low.isra.0>
 80018ac:	9b02      	ldr	r3, [sp, #8]
 80018ae:	6118      	str	r0, [r3, #16]
            if (rslt == BME68X_OK)
 80018b0:	e7e1      	b.n	8001876 <bme68x_get_data+0x18e>
        if (rslt == BME68X_OK)
 80018b2:	2900      	cmp	r1, #0
 80018b4:	d103      	bne.n	80018be <bme68x_get_data+0x1d6>
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80018b6:	6871      	ldr	r1, [r6, #4]
 80018b8:	4888      	ldr	r0, [pc, #544]	; (8001adc <bme68x_get_data+0x3f4>)
 80018ba:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80018bc:	4798      	blx	r3
    while ((tries) && (rslt == BME68X_OK))
 80018be:	3d01      	subs	r5, #1
 80018c0:	b2ed      	uxtb	r5, r5
 80018c2:	9b01      	ldr	r3, [sp, #4]
 80018c4:	2d00      	cmp	r5, #0
 80018c6:	d004      	beq.n	80018d2 <bme68x_get_data+0x1ea>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <bme68x_get_data+0x1e6>
 80018cc:	e736      	b.n	800173c <bme68x_get_data+0x54>
    uint8_t i = 0, j = 0, new_fields = 0;
 80018ce:	2500      	movs	r5, #0
 80018d0:	e001      	b.n	80018d6 <bme68x_get_data+0x1ee>
            if (rslt == BME68X_OK)
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0cf      	beq.n	8001876 <bme68x_get_data+0x18e>
        if (n_data == NULL)
 80018d6:	9b06      	ldr	r3, [sp, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d100      	bne.n	80018de <bme68x_get_data+0x1f6>
 80018dc:	e71a      	b.n	8001714 <bme68x_get_data+0x2c>
            *n_data = new_fields;
 80018de:	701d      	strb	r5, [r3, #0]
    return rslt;
 80018e0:	e71b      	b.n	800171a <bme68x_get_data+0x32>
            rslt = BME68X_W_DEFINE_OP_MODE;
 80018e2:	2301      	movs	r3, #1
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80018e4:	9804      	ldr	r0, [sp, #16]
    uint8_t i = 0, j = 0, new_fields = 0;
 80018e6:	003d      	movs	r5, r7
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80018e8:	3802      	subs	r0, #2
            rslt = BME68X_W_DEFINE_OP_MODE;
 80018ea:	9301      	str	r3, [sp, #4]
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80018ec:	4298      	cmp	r0, r3
 80018ee:	d8f2      	bhi.n	80018d6 <bme68x_get_data+0x1ee>
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80018f0:	222f      	movs	r2, #47	; 0x2f
 80018f2:	0039      	movs	r1, r7
 80018f4:	a81d      	add	r0, sp, #116	; 0x74
 80018f6:	971c      	str	r7, [sp, #112]	; 0x70
 80018f8:	f001 fdbf 	bl	800347a <memset>
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80018fc:	221a      	movs	r2, #26
 80018fe:	0039      	movs	r1, r7
 8001900:	a815      	add	r0, sp, #84	; 0x54
 8001902:	9714      	str	r7, [sp, #80]	; 0x50
 8001904:	f001 fdb9 	bl	800347a <memset>
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8001908:	0033      	movs	r3, r6
 800190a:	2233      	movs	r2, #51	; 0x33
 800190c:	201d      	movs	r0, #29
 800190e:	a91c      	add	r1, sp, #112	; 0x70
 8001910:	f7ff fcd0 	bl	80012b4 <bme68x_get_regs>
 8001914:	9001      	str	r0, [sp, #4]
    if (rslt == BME68X_OK)
 8001916:	2800      	cmp	r0, #0
 8001918:	d17d      	bne.n	8001a16 <bme68x_get_data+0x32e>
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800191a:	0033      	movs	r3, r6
 800191c:	221e      	movs	r2, #30
 800191e:	2050      	movs	r0, #80	; 0x50
 8001920:	a914      	add	r1, sp, #80	; 0x50
 8001922:	f7ff fcc7 	bl	80012b4 <bme68x_get_regs>
 8001926:	ad1c      	add	r5, sp, #112	; 0x70
 8001928:	9001      	str	r0, [sp, #4]
 800192a:	9703      	str	r7, [sp, #12]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800192c:	2800      	cmp	r0, #0
 800192e:	d172      	bne.n	8001a16 <bme68x_get_data+0x32e>
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8001930:	9b03      	ldr	r3, [sp, #12]
 8001932:	a911      	add	r1, sp, #68	; 0x44
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	585f      	ldr	r7, [r3, r1]
        data[i]->meas_index = buff[off + 1];
 8001938:	7869      	ldrb	r1, [r5, #1]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800193a:	78e8      	ldrb	r0, [r5, #3]
        data[i]->meas_index = buff[off + 1];
 800193c:	70b9      	strb	r1, [r7, #2]
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800193e:	78a9      	ldrb	r1, [r5, #2]
 8001940:	0100      	lsls	r0, r0, #4
 8001942:	0309      	lsls	r1, r1, #12
 8001944:	4301      	orrs	r1, r0
                        ((uint32_t) buff[off + 4] / 16));
 8001946:	7928      	ldrb	r0, [r5, #4]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8001948:	7a6c      	ldrb	r4, [r5, #9]
                        ((uint32_t) buff[off + 4] / 16));
 800194a:	0900      	lsrs	r0, r0, #4
        adc_pres =
 800194c:	4301      	orrs	r1, r0
 800194e:	9107      	str	r1, [sp, #28]
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8001950:	7968      	ldrb	r0, [r5, #5]
 8001952:	79a9      	ldrb	r1, [r5, #6]
 8001954:	0300      	lsls	r0, r0, #12
 8001956:	0109      	lsls	r1, r1, #4
 8001958:	4308      	orrs	r0, r1
                        ((uint32_t) buff[off + 7] / 16));
 800195a:	79e9      	ldrb	r1, [r5, #7]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 800195c:	230f      	movs	r3, #15
                        ((uint32_t) buff[off + 7] / 16));
 800195e:	0909      	lsrs	r1, r1, #4
        adc_temp =
 8001960:	4308      	orrs	r0, r1
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8001962:	7a29      	ldrb	r1, [r5, #8]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8001964:	782a      	ldrb	r2, [r5, #0]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8001966:	0209      	lsls	r1, r1, #8
 8001968:	430c      	orrs	r4, r1
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800196a:	7b69      	ldrb	r1, [r5, #13]
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 800196c:	9408      	str	r4, [sp, #32]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800196e:	9109      	str	r1, [sp, #36]	; 0x24
 8001970:	7ba9      	ldrb	r1, [r5, #14]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001972:	68b4      	ldr	r4, [r6, #8]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8001974:	9104      	str	r1, [sp, #16]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8001976:	7be9      	ldrb	r1, [r5, #15]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8001978:	4013      	ands	r3, r2
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 800197a:	910a      	str	r1, [sp, #40]	; 0x28
 800197c:	7c29      	ldrb	r1, [r5, #16]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 800197e:	707b      	strb	r3, [r7, #1]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8001980:	9105      	str	r1, [sp, #20]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8001982:	217f      	movs	r1, #127	; 0x7f
 8001984:	438a      	bics	r2, r1
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8001986:	b251      	sxtb	r1, r2
 8001988:	2220      	movs	r2, #32
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800198a:	2c01      	cmp	r4, #1
 800198c:	d15a      	bne.n	8001a44 <bme68x_get_data+0x35c>
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800198e:	466c      	mov	r4, sp
 8001990:	7d24      	ldrb	r4, [r4, #20]
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8001992:	b264      	sxtb	r4, r4
 8001994:	4022      	ands	r2, r4
 8001996:	430a      	orrs	r2, r1
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8001998:	2110      	movs	r1, #16
 800199a:	4021      	ands	r1, r4
 800199c:	4311      	orrs	r1, r2
        data[i]->idac = set_val[data[i]->gas_index];
 800199e:	aa14      	add	r2, sp, #80	; 0x50
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80019a0:	7039      	strb	r1, [r7, #0]
        data[i]->idac = set_val[data[i]->gas_index];
 80019a2:	5cd1      	ldrb	r1, [r2, r3]
 80019a4:	7139      	strb	r1, [r7, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80019a6:	0019      	movs	r1, r3
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80019a8:	3314      	adds	r3, #20
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80019aa:	310a      	adds	r1, #10
 80019ac:	5c51      	ldrb	r1, [r2, r1]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80019b0:	70f9      	strb	r1, [r7, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80019b2:	717b      	strb	r3, [r7, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80019b4:	0031      	movs	r1, r6
 80019b6:	f7ff fa48 	bl	8000e4a <calc_temperature>
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80019ba:	0031      	movs	r1, r6
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80019bc:	80f8      	strh	r0, [r7, #6]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80019be:	9807      	ldr	r0, [sp, #28]
 80019c0:	f7ff fa78 	bl	8000eb4 <calc_pressure>
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80019c4:	0031      	movs	r1, r6
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80019c6:	60b8      	str	r0, [r7, #8]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80019c8:	9808      	ldr	r0, [sp, #32]
 80019ca:	f7ff fad5 	bl	8000f78 <calc_humidity>
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80019ce:	68b3      	ldr	r3, [r6, #8]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80019d0:	60f8      	str	r0, [r7, #12]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d139      	bne.n	8001a4a <bme68x_get_data+0x362>
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80019d6:	9a05      	ldr	r2, [sp, #20]
 80019d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019da:	0991      	lsrs	r1, r2, #6
 80019dc:	009b      	lsls	r3, r3, #2
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 80019de:	4319      	orrs	r1, r3
 80019e0:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <bme68x_get_data+0x3f0>)
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 80019e2:	2080      	movs	r0, #128	; 0x80
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 80019e4:	18c9      	adds	r1, r1, r3
    var2 *= INT32_C(3);
 80019e6:	2303      	movs	r3, #3
 80019e8:	4359      	muls	r1, r3
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 80019ea:	0013      	movs	r3, r2
 80019ec:	220f      	movs	r2, #15
 80019ee:	02c0      	lsls	r0, r0, #11
 80019f0:	4013      	ands	r3, r2
 80019f2:	40d8      	lsrs	r0, r3
 80019f4:	0003      	movs	r3, r0
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 80019f6:	4839      	ldr	r0, [pc, #228]	; (8001adc <bme68x_get_data+0x3f4>)
 80019f8:	4358      	muls	r0, r3
    var2 = INT32_C(4096) + var2;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	015b      	lsls	r3, r3, #5
 80019fe:	18c9      	adds	r1, r1, r3
    calc_gas_res = (UINT32_C(10000) * var1) / (uint32_t)var2;
 8001a00:	f7fe fba8 	bl	8000154 <__udivsi3>
    calc_gas_res = calc_gas_res * 100;
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	4358      	muls	r0, r3
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001a08:	9b03      	ldr	r3, [sp, #12]
 8001a0a:	6138      	str	r0, [r7, #16]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	9303      	str	r3, [sp, #12]
 8001a10:	3511      	adds	r5, #17
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d18c      	bne.n	8001930 <bme68x_get_data+0x248>
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	9901      	ldr	r1, [sp, #4]
            new_fields = 0;
 8001a1a:	001d      	movs	r5, r3
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001a1c:	aa11      	add	r2, sp, #68	; 0x44
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	d143      	bne.n	8001aaa <bme68x_get_data+0x3c2>
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001a22:	0099      	lsls	r1, r3, #2
 8001a24:	5889      	ldr	r1, [r1, r2]
 8001a26:	7809      	ldrb	r1, [r1, #0]
 8001a28:	297f      	cmp	r1, #127	; 0x7f
 8001a2a:	d901      	bls.n	8001a30 <bme68x_get_data+0x348>
                    new_fields++;
 8001a2c:	3501      	adds	r5, #1
 8001a2e:	b2ed      	uxtb	r5, r5
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001a30:	3301      	adds	r3, #1
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d1f5      	bne.n	8001a22 <bme68x_get_data+0x33a>
 8001a36:	2300      	movs	r3, #0
                for (j = i + 1; j < 3; j++)
 8001a38:	0017      	movs	r7, r2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	3204      	adds	r2, #4
 8001a3e:	0011      	movs	r1, r2
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	e010      	b.n	8001a66 <bme68x_get_data+0x37e>
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8001a44:	466c      	mov	r4, sp
 8001a46:	7c24      	ldrb	r4, [r4, #16]
 8001a48:	e7a3      	b.n	8001992 <bme68x_get_data+0x2aa>
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	223e      	movs	r2, #62	; 0x3e
 8001a4e:	9904      	ldr	r1, [sp, #16]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8001a50:	9804      	ldr	r0, [sp, #16]
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8001a52:	4019      	ands	r1, r3
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8001a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a56:	0980      	lsrs	r0, r0, #6
 8001a58:	009b      	lsls	r3, r3, #2
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8001a5a:	56b2      	ldrsb	r2, [r6, r2]
 8001a5c:	4318      	orrs	r0, r3
 8001a5e:	f7ff fb91 	bl	8001184 <calc_gas_resistance_low.isra.0>
 8001a62:	e7d1      	b.n	8001a08 <bme68x_get_data+0x320>
 8001a64:	2302      	movs	r3, #2
 8001a66:	9304      	str	r3, [sp, #16]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8001a68:	2300      	movs	r3, #0
    meas_index1 = (int16_t)field[low_index]->meas_index;
 8001a6a:	6838      	ldr	r0, [r7, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8001a6c:	680e      	ldr	r6, [r1, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8001a6e:	7804      	ldrb	r4, [r0, #0]
 8001a70:	56f3      	ldrsb	r3, [r6, r3]
 8001a72:	2c7f      	cmp	r4, #127	; 0x7f
 8001a74:	d90f      	bls.n	8001a96 <bme68x_get_data+0x3ae>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da0f      	bge.n	8001a9a <bme68x_get_data+0x3b2>
        int16_t diff = meas_index2 - meas_index1;
 8001a7a:	7884      	ldrb	r4, [r0, #2]
 8001a7c:	78b3      	ldrb	r3, [r6, #2]
 8001a7e:	1b1b      	subs	r3, r3, r4
 8001a80:	b29b      	uxth	r3, r3
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8001a82:	1c9c      	adds	r4, r3, #2
 8001a84:	b2a4      	uxth	r4, r4
 8001a86:	2c01      	cmp	r4, #1
 8001a88:	d902      	bls.n	8001a90 <bme68x_get_data+0x3a8>
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	dd04      	ble.n	8001a9a <bme68x_get_data+0x3b2>
    field[index1] = field[index2];
 8001a90:	603e      	str	r6, [r7, #0]
    field[index2] = temp;
 8001a92:	6008      	str	r0, [r1, #0]
}
 8001a94:	e001      	b.n	8001a9a <bme68x_get_data+0x3b2>
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dbfa      	blt.n	8001a90 <bme68x_get_data+0x3a8>
                for (j = i + 1; j < 3; j++)
 8001a9a:	9b04      	ldr	r3, [sp, #16]
 8001a9c:	3104      	adds	r1, #4
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d1e0      	bne.n	8001a64 <bme68x_get_data+0x37c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8001aa2:	9903      	ldr	r1, [sp, #12]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	2902      	cmp	r1, #2
 8001aa8:	d1c6      	bne.n	8001a38 <bme68x_get_data+0x350>
 8001aaa:	9902      	ldr	r1, [sp, #8]
 8001aac:	ab11      	add	r3, sp, #68	; 0x44
 8001aae:	000e      	movs	r6, r1
 8001ab0:	469c      	mov	ip, r3
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001ab2:	9b01      	ldr	r3, [sp, #4]
 8001ab4:	363c      	adds	r6, #60	; 0x3c
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <bme68x_get_data+0x3e8>
                data[i] = *field_ptr[i];
 8001aba:	4662      	mov	r2, ip
 8001abc:	ca08      	ldmia	r2!, {r3}
 8001abe:	4694      	mov	ip, r2
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	cb91      	ldmia	r3!, {r0, r4, r7}
 8001ac4:	c291      	stmia	r2!, {r0, r4, r7}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001ac6:	3114      	adds	r1, #20
                data[i] = *field_ptr[i];
 8001ac8:	cb11      	ldmia	r3!, {r0, r4}
 8001aca:	c211      	stmia	r2!, {r0, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001acc:	42b1      	cmp	r1, r6
 8001ace:	d1f4      	bne.n	8001aba <bme68x_get_data+0x3d2>
            if (new_fields == 0)
 8001ad0:	2d00      	cmp	r5, #0
 8001ad2:	d000      	beq.n	8001ad6 <bme68x_get_data+0x3ee>
 8001ad4:	e6ff      	b.n	80018d6 <bme68x_get_data+0x1ee>
 8001ad6:	e6d6      	b.n	8001886 <bme68x_get_data+0x19e>
 8001ad8:	fffffe00 	.word	0xfffffe00
 8001adc:	00002710 	.word	0x00002710

08001ae0 <bme68x_set_heatr_conf>:
{
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	0017      	movs	r7, r2
 8001ae4:	b095      	sub	sp, #84	; 0x54
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001ae6:	4a9b      	ldr	r2, [pc, #620]	; (8001d54 <bme68x_set_heatr_conf+0x274>)
 8001ae8:	ab07      	add	r3, sp, #28
{
 8001aea:	1e0e      	subs	r6, r1, #0
 8001aec:	9001      	str	r0, [sp, #4]
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8001aee:	801a      	strh	r2, [r3, #0]
    if (conf != NULL)
 8001af0:	d100      	bne.n	8001af4 <bme68x_set_heatr_conf+0x14>
 8001af2:	e093      	b.n	8001c1c <bme68x_set_heatr_conf+0x13c>
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001af4:	0039      	movs	r1, r7
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fcce 	bl	8001498 <bme68x_set_op_mode>
 8001afc:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
 8001afe:	d000      	beq.n	8001b02 <bme68x_set_heatr_conf+0x22>
 8001b00:	e081      	b.n	8001c06 <bme68x_set_heatr_conf+0x126>
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8001b02:	226e      	movs	r2, #110	; 0x6e
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001b04:	4d94      	ldr	r5, [pc, #592]	; (8001d58 <bme68x_set_heatr_conf+0x278>)
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8001b06:	ab06      	add	r3, sp, #24
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001b08:	3506      	adds	r5, #6
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8001b0a:	70da      	strb	r2, [r3, #3]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001b0c:	0029      	movs	r1, r5
 8001b0e:	3a64      	subs	r2, #100	; 0x64
 8001b10:	a808      	add	r0, sp, #32
 8001b12:	f001 fca9 	bl	8003468 <memcpy>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001b16:	220a      	movs	r2, #10
 8001b18:	0029      	movs	r1, r5
 8001b1a:	a80b      	add	r0, sp, #44	; 0x2c
 8001b1c:	f001 fca4 	bl	8003468 <memcpy>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001b20:	220a      	movs	r2, #10
 8001b22:	0029      	movs	r1, r5
 8001b24:	a80e      	add	r0, sp, #56	; 0x38
 8001b26:	f001 fc9f 	bl	8003468 <memcpy>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001b2a:	220a      	movs	r2, #10
 8001b2c:	0029      	movs	r1, r5
 8001b2e:	a811      	add	r0, sp, #68	; 0x44
 8001b30:	f001 fc9a 	bl	8003468 <memcpy>
    switch (op_mode)
 8001b34:	9b01      	ldr	r3, [sp, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d100      	bne.n	8001b3c <bme68x_set_heatr_conf+0x5c>
 8001b3a:	e0a8      	b.n	8001c8e <bme68x_set_heatr_conf+0x1ae>
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d100      	bne.n	8001b42 <bme68x_set_heatr_conf+0x62>
 8001b40:	e068      	b.n	8001c14 <bme68x_set_heatr_conf+0x134>
 8001b42:	3401      	adds	r4, #1
 8001b44:	42a3      	cmp	r3, r4
 8001b46:	d15e      	bne.n	8001c06 <bme68x_set_heatr_conf+0x126>
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8001b48:	235a      	movs	r3, #90	; 0x5a
 8001b4a:	aa06      	add	r2, sp, #24
 8001b4c:	7213      	strb	r3, [r2, #8]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8001b4e:	8870      	ldrh	r0, [r6, #2]
 8001b50:	0039      	movs	r1, r7
 8001b52:	f7ff fa5d 	bl	8001010 <calc_res_heat>
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8001b56:	2120      	movs	r1, #32
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8001b58:	ab06      	add	r3, sp, #24
 8001b5a:	7518      	strb	r0, [r3, #20]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	aa06      	add	r2, sp, #24
 8001b60:	1852      	adds	r2, r2, r1
 8001b62:	7013      	strb	r3, [r2, #0]
    if (dur >= 0xfc0)
 8001b64:	23fc      	movs	r3, #252	; 0xfc
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8001b66:	88b1      	ldrh	r1, [r6, #4]
        durval = 0xff; /* Max duration*/
 8001b68:	22ff      	movs	r2, #255	; 0xff
    if (dur >= 0xfc0)
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	4299      	cmp	r1, r3
 8001b6e:	d205      	bcs.n	8001b7c <bme68x_set_heatr_conf+0x9c>
    uint8_t factor = 0;
 8001b70:	2300      	movs	r3, #0
        while (dur > 0x3F)
 8001b72:	293f      	cmp	r1, #63	; 0x3f
 8001b74:	d84a      	bhi.n	8001c0c <bme68x_set_heatr_conf+0x12c>
        durval = (uint8_t)(dur + (factor * 64));
 8001b76:	019b      	lsls	r3, r3, #6
 8001b78:	185b      	adds	r3, r3, r1
 8001b7a:	b2da      	uxtb	r2, r3
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8001b7c:	212c      	movs	r1, #44	; 0x2c
            (*nb_conv) = 0;
 8001b7e:	2500      	movs	r5, #0
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8001b80:	ab06      	add	r3, sp, #24
 8001b82:	185b      	adds	r3, r3, r1
 8001b84:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8001b86:	003b      	movs	r3, r7
 8001b88:	9a01      	ldr	r2, [sp, #4]
 8001b8a:	a90b      	add	r1, sp, #44	; 0x2c
 8001b8c:	a808      	add	r0, sp, #32
 8001b8e:	f7ff fb47 	bl	8001220 <bme68x_set_regs>
 8001b92:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
 8001b94:	d137      	bne.n	8001c06 <bme68x_set_heatr_conf+0x126>
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8001b96:	003b      	movs	r3, r7
 8001b98:	9a01      	ldr	r2, [sp, #4]
 8001b9a:	a911      	add	r1, sp, #68	; 0x44
 8001b9c:	a80e      	add	r0, sp, #56	; 0x38
 8001b9e:	f7ff fb3f 	bl	8001220 <bme68x_set_regs>
 8001ba2:	1e04      	subs	r4, r0, #0
        if (rslt == BME68X_OK)
 8001ba4:	d12f      	bne.n	8001c06 <bme68x_set_heatr_conf+0x126>
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	2202      	movs	r2, #2
 8001baa:	2070      	movs	r0, #112	; 0x70
 8001bac:	a911      	add	r1, sp, #68	; 0x44
 8001bae:	f7ff fb81 	bl	80012b4 <bme68x_get_regs>
 8001bb2:	1e04      	subs	r4, r0, #0
            if (rslt == BME68X_OK)
 8001bb4:	d127      	bne.n	8001c06 <bme68x_set_heatr_conf+0x126>
                if (conf->enable == BME68X_ENABLE)
 8001bb6:	7832      	ldrb	r2, [r6, #0]
 8001bb8:	2a01      	cmp	r2, #1
 8001bba:	d000      	beq.n	8001bbe <bme68x_set_heatr_conf+0xde>
 8001bbc:	e0c4      	b.n	8001d48 <bme68x_set_heatr_conf+0x268>
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d100      	bne.n	8001bc6 <bme68x_set_heatr_conf+0xe6>
 8001bc4:	e0c3      	b.n	8001d4e <bme68x_set_heatr_conf+0x26e>
                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001bc6:	202c      	movs	r0, #44	; 0x2c
 8001bc8:	2108      	movs	r1, #8
 8001bca:	ab06      	add	r3, sp, #24
 8001bcc:	181b      	adds	r3, r3, r0
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	00e4      	lsls	r4, r4, #3
 8001bd2:	438b      	bics	r3, r1
 8001bd4:	431c      	orrs	r4, r3
 8001bd6:	ab06      	add	r3, sp, #24
 8001bd8:	181b      	adds	r3, r3, r0
 8001bda:	701c      	strb	r4, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001bdc:	3001      	adds	r0, #1
 8001bde:	ab06      	add	r3, sp, #24
 8001be0:	181b      	adds	r3, r3, r0
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3107      	adds	r1, #7
 8001be6:	438b      	bics	r3, r1
 8001be8:	431d      	orrs	r5, r3
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8001bea:	2330      	movs	r3, #48	; 0x30
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	439d      	bics	r5, r3
 8001bf0:	ab06      	add	r3, sp, #24
 8001bf2:	181b      	adds	r3, r3, r0
 8001bf4:	4315      	orrs	r5, r2
 8001bf6:	701d      	strb	r5, [r3, #0]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	a911      	add	r1, sp, #68	; 0x44
 8001bfe:	a807      	add	r0, sp, #28
 8001c00:	f7ff fb0e 	bl	8001220 <bme68x_set_regs>
 8001c04:	0004      	movs	r4, r0
}
 8001c06:	0020      	movs	r0, r4
 8001c08:	b015      	add	sp, #84	; 0x54
 8001c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            factor += 1;
 8001c0c:	3301      	adds	r3, #1
            dur = dur / 4;
 8001c0e:	0889      	lsrs	r1, r1, #2
            factor += 1;
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e7ae      	b.n	8001b72 <bme68x_set_heatr_conf+0x92>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8001c14:	68f3      	ldr	r3, [r6, #12]
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <bme68x_set_heatr_conf+0x142>
        rslt = BME68X_E_NULL_PTR;
 8001c1c:	2401      	movs	r4, #1
 8001c1e:	4264      	negs	r4, r4
 8001c20:	e7f1      	b.n	8001c06 <bme68x_set_heatr_conf+0x126>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8001c22:	68b3      	ldr	r3, [r6, #8]
 8001c24:	9303      	str	r3, [sp, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f8      	beq.n	8001c1c <bme68x_set_heatr_conf+0x13c>
            for (i = 0; i < conf->profile_len; i++)
 8001c2a:	0025      	movs	r5, r4
 8001c2c:	7c33      	ldrb	r3, [r6, #16]
 8001c2e:	9301      	str	r3, [sp, #4]
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8001c30:	ab08      	add	r3, sp, #32
 8001c32:	9304      	str	r3, [sp, #16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8001c34:	ab0b      	add	r3, sp, #44	; 0x2c
 8001c36:	9305      	str	r3, [sp, #20]
            for (i = 0; i < conf->profile_len; i++)
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	b2ec      	uxtb	r4, r5
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	d801      	bhi.n	8001c44 <bme68x_set_heatr_conf+0x164>
 8001c40:	001d      	movs	r5, r3
 8001c42:	e7a0      	b.n	8001b86 <bme68x_set_heatr_conf+0xa6>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8001c44:	0023      	movs	r3, r4
 8001c46:	9a04      	ldr	r2, [sp, #16]
 8001c48:	335a      	adds	r3, #90	; 0x5a
 8001c4a:	54ab      	strb	r3, [r5, r2]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8001c4c:	9b03      	ldr	r3, [sp, #12]
 8001c4e:	006a      	lsls	r2, r5, #1
 8001c50:	5a98      	ldrh	r0, [r3, r2]
 8001c52:	0039      	movs	r1, r7
 8001c54:	f7ff f9dc 	bl	8001010 <calc_res_heat>
 8001c58:	9b05      	ldr	r3, [sp, #20]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8001c5a:	3464      	adds	r4, #100	; 0x64
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8001c5c:	5558      	strb	r0, [r3, r5]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8001c5e:	ab0e      	add	r3, sp, #56	; 0x38
 8001c60:	54ec      	strb	r4, [r5, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8001c62:	9b02      	ldr	r3, [sp, #8]
 8001c64:	006a      	lsls	r2, r5, #1
 8001c66:	5a99      	ldrh	r1, [r3, r2]
    if (dur >= 0xfc0)
 8001c68:	23fc      	movs	r3, #252	; 0xfc
        durval = 0xff; /* Max duration*/
 8001c6a:	22ff      	movs	r2, #255	; 0xff
    if (dur >= 0xfc0)
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4299      	cmp	r1, r3
 8001c70:	d205      	bcs.n	8001c7e <bme68x_set_heatr_conf+0x19e>
    uint8_t factor = 0;
 8001c72:	2300      	movs	r3, #0
        while (dur > 0x3F)
 8001c74:	293f      	cmp	r1, #63	; 0x3f
 8001c76:	d806      	bhi.n	8001c86 <bme68x_set_heatr_conf+0x1a6>
        durval = (uint8_t)(dur + (factor * 64));
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	185b      	adds	r3, r3, r1
 8001c7c:	b2da      	uxtb	r2, r3
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8001c7e:	ab11      	add	r3, sp, #68	; 0x44
 8001c80:	54ea      	strb	r2, [r5, r3]
            for (i = 0; i < conf->profile_len; i++)
 8001c82:	3501      	adds	r5, #1
 8001c84:	e7d8      	b.n	8001c38 <bme68x_set_heatr_conf+0x158>
            factor += 1;
 8001c86:	3301      	adds	r3, #1
            dur = dur / 4;
 8001c88:	0889      	lsrs	r1, r1, #2
            factor += 1;
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	e7f2      	b.n	8001c74 <bme68x_set_heatr_conf+0x194>
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8001c8e:	68f3      	ldr	r3, [r6, #12]
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0c2      	beq.n	8001c1c <bme68x_set_heatr_conf+0x13c>
 8001c96:	68b3      	ldr	r3, [r6, #8]
 8001c98:	9304      	str	r3, [sp, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0be      	beq.n	8001c1c <bme68x_set_heatr_conf+0x13c>
            if (conf->shared_heatr_dur == 0)
 8001c9e:	8a73      	ldrh	r3, [r6, #18]
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <bme68x_set_heatr_conf+0x1c8>
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8001ca6:	2403      	movs	r4, #3
            for (i = 0; i < conf->profile_len; i++)
 8001ca8:	2500      	movs	r5, #0
 8001caa:	7c33      	ldrb	r3, [r6, #16]
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	b2eb      	uxtb	r3, r5
 8001cb0:	9305      	str	r3, [sp, #20]
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	b2ea      	uxtb	r2, r5
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d823      	bhi.n	8001d02 <bme68x_set_heatr_conf+0x222>
    if (dur >= 0x783)
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <bme68x_set_heatr_conf+0x27c>)
 8001cbc:	9902      	ldr	r1, [sp, #8]
        heatdurval = 0xff; /* Max duration */
 8001cbe:	23ff      	movs	r3, #255	; 0xff
    if (dur >= 0x783)
 8001cc0:	4291      	cmp	r1, r2
 8001cc2:	d80d      	bhi.n	8001ce0 <bme68x_set_heatr_conf+0x200>
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8001cc4:	20fa      	movs	r0, #250	; 0xfa
 8001cc6:	0080      	lsls	r0, r0, #2
 8001cc8:	4348      	muls	r0, r1
 8001cca:	21de      	movs	r1, #222	; 0xde
 8001ccc:	31ff      	adds	r1, #255	; 0xff
 8001cce:	f7fe fa41 	bl	8000154 <__udivsi3>
    uint8_t factor = 0;
 8001cd2:	2300      	movs	r3, #0
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8001cd4:	b280      	uxth	r0, r0
        while (dur > 0x3F)
 8001cd6:	283f      	cmp	r0, #63	; 0x3f
 8001cd8:	d832      	bhi.n	8001d40 <bme68x_set_heatr_conf+0x260>
        heatdurval = (uint8_t)(dur + (factor * 64));
 8001cda:	019b      	lsls	r3, r3, #6
 8001cdc:	181b      	adds	r3, r3, r0
 8001cde:	b2db      	uxtb	r3, r3
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8001ce0:	aa06      	add	r2, sp, #24
 8001ce2:	1c91      	adds	r1, r2, #2
 8001ce4:	700b      	strb	r3, [r1, #0]
            if (rslt == BME68X_OK)
 8001ce6:	2c00      	cmp	r4, #0
 8001ce8:	d000      	beq.n	8001cec <bme68x_set_heatr_conf+0x20c>
 8001cea:	e78c      	b.n	8001c06 <bme68x_set_heatr_conf+0x126>
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8001cec:	a806      	add	r0, sp, #24
 8001cee:	003b      	movs	r3, r7
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	3003      	adds	r0, #3
 8001cf4:	f7ff fa94 	bl	8001220 <bme68x_set_regs>
 8001cf8:	1e04      	subs	r4, r0, #0
    if (rslt == BME68X_OK)
 8001cfa:	d000      	beq.n	8001cfe <bme68x_set_heatr_conf+0x21e>
 8001cfc:	e783      	b.n	8001c06 <bme68x_set_heatr_conf+0x126>
 8001cfe:	9d01      	ldr	r5, [sp, #4]
 8001d00:	e741      	b.n	8001b86 <bme68x_set_heatr_conf+0xa6>
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8001d02:	2108      	movs	r1, #8
 8001d04:	9b05      	ldr	r3, [sp, #20]
 8001d06:	aa06      	add	r2, sp, #24
 8001d08:	1852      	adds	r2, r2, r1
 8001d0a:	335a      	adds	r3, #90	; 0x5a
 8001d0c:	5553      	strb	r3, [r2, r5]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8001d0e:	9b04      	ldr	r3, [sp, #16]
 8001d10:	006a      	lsls	r2, r5, #1
 8001d12:	5a98      	ldrh	r0, [r3, r2]
 8001d14:	0039      	movs	r1, r7
 8001d16:	f7ff f97b 	bl	8001010 <calc_res_heat>
 8001d1a:	2214      	movs	r2, #20
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8001d1c:	2120      	movs	r1, #32
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8001d1e:	ab06      	add	r3, sp, #24
 8001d20:	189b      	adds	r3, r3, r2
 8001d22:	5558      	strb	r0, [r3, r5]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8001d24:	9b05      	ldr	r3, [sp, #20]
 8001d26:	aa06      	add	r2, sp, #24
 8001d28:	1852      	adds	r2, r2, r1
 8001d2a:	3364      	adds	r3, #100	; 0x64
 8001d2c:	5553      	strb	r3, [r2, r5]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8001d2e:	9b03      	ldr	r3, [sp, #12]
 8001d30:	006a      	lsls	r2, r5, #1
 8001d32:	5a9b      	ldrh	r3, [r3, r2]
 8001d34:	310c      	adds	r1, #12
 8001d36:	aa06      	add	r2, sp, #24
 8001d38:	1852      	adds	r2, r2, r1
 8001d3a:	5553      	strb	r3, [r2, r5]
            for (i = 0; i < conf->profile_len; i++)
 8001d3c:	3501      	adds	r5, #1
 8001d3e:	e7b6      	b.n	8001cae <bme68x_set_heatr_conf+0x1ce>
            factor += 1;
 8001d40:	3301      	adds	r3, #1
            dur = dur >> 2;
 8001d42:	0880      	lsrs	r0, r0, #2
            factor += 1;
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e7c6      	b.n	8001cd6 <bme68x_set_heatr_conf+0x1f6>
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8001d48:	0002      	movs	r2, r0
                    hctrl = BME68X_DISABLE_HEATER;
 8001d4a:	2401      	movs	r4, #1
 8001d4c:	e73b      	b.n	8001bc6 <bme68x_set_heatr_conf+0xe6>
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8001d4e:	2202      	movs	r2, #2
 8001d50:	e739      	b.n	8001bc6 <bme68x_set_heatr_conf+0xe6>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	00007170 	.word	0x00007170
 8001d58:	08003e44 	.word	0x08003e44
 8001d5c:	00000782 	.word	0x00000782

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b570      	push	{r4, r5, r6, lr}
 8001d62:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	20fa      	movs	r0, #250	; 0xfa
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_InitTick+0x3c>)
 8001d68:	0080      	lsls	r0, r0, #2
 8001d6a:	7819      	ldrb	r1, [r3, #0]
 8001d6c:	f7fe f9f2 	bl	8000154 <__udivsi3>
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_InitTick+0x40>)
 8001d72:	0001      	movs	r1, r0
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f7fe f9ed 	bl	8000154 <__udivsi3>
 8001d7a:	f000 f883 	bl	8001e84 <HAL_SYSTICK_Config>
 8001d7e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d82:	2c00      	cmp	r4, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	2d03      	cmp	r5, #3
 8001d88:	d807      	bhi.n	8001d9a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8a:	3802      	subs	r0, #2
 8001d8c:	0022      	movs	r2, r4
 8001d8e:	0029      	movs	r1, r5
 8001d90:	f000 f842 	bl	8001e18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	0020      	movs	r0, r4
 8001d96:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_InitTick+0x44>)
 8001d98:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000008 	.word	0x20000008

08001da8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_Init+0x24>)
{
 8001dac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001dae:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db0:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db6:	f7ff ffd3 	bl	8001d60 <HAL_InitTick>
 8001dba:	1e04      	subs	r4, r0, #0
 8001dbc:	d103      	bne.n	8001dc6 <HAL_Init+0x1e>
    HAL_MspInit();
 8001dbe:	f7fe fed7 	bl	8000b70 <HAL_MspInit>
}
 8001dc2:	0020      	movs	r0, r4
 8001dc4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001dc6:	2401      	movs	r4, #1
 8001dc8:	e7fb      	b.n	8001dc2 <HAL_Init+0x1a>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	40022000 	.word	0x40022000

08001dd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_IncTick+0x10>)
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <HAL_IncTick+0x14>)
 8001dd4:	6811      	ldr	r1, [r2, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	185b      	adds	r3, r3, r1
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	4770      	bx	lr
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	200001ec 	.word	0x200001ec
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001de8:	4b01      	ldr	r3, [pc, #4]	; (8001df0 <HAL_GetTick+0x8>)
 8001dea:	6818      	ldr	r0, [r3, #0]
}
 8001dec:	4770      	bx	lr
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	200001ec 	.word	0x200001ec

08001df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fff6 	bl	8001de8 <HAL_GetTick>
 8001dfc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	1c63      	adds	r3, r4, #1
 8001e00:	d002      	beq.n	8001e08 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_Delay+0x20>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	1b40      	subs	r0, r0, r5
 8001e0e:	42a0      	cmp	r0, r4
 8001e10:	d3fa      	bcc.n	8001e08 <HAL_Delay+0x14>
  {
  }
}
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e18:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1a:	25ff      	movs	r5, #255	; 0xff
 8001e1c:	2403      	movs	r4, #3
 8001e1e:	002a      	movs	r2, r5
 8001e20:	4004      	ands	r4, r0
 8001e22:	00e4      	lsls	r4, r4, #3
 8001e24:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e26:	0189      	lsls	r1, r1, #6
 8001e28:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e2c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001e30:	2800      	cmp	r0, #0
 8001e32:	db0a      	blt.n	8001e4a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	24c0      	movs	r4, #192	; 0xc0
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_NVIC_SetPriority+0x4c>)
 8001e38:	0880      	lsrs	r0, r0, #2
 8001e3a:	0080      	lsls	r0, r0, #2
 8001e3c:	18c0      	adds	r0, r0, r3
 8001e3e:	00a4      	lsls	r4, r4, #2
 8001e40:	5903      	ldr	r3, [r0, r4]
 8001e42:	401a      	ands	r2, r3
 8001e44:	4311      	orrs	r1, r2
 8001e46:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001e48:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	4003      	ands	r3, r0
 8001e4e:	3b08      	subs	r3, #8
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <HAL_NVIC_SetPriority+0x50>)
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	181b      	adds	r3, r3, r0
 8001e58:	69d8      	ldr	r0, [r3, #28]
 8001e5a:	4002      	ands	r2, r0
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	61d9      	str	r1, [r3, #28]
 8001e60:	e7f2      	b.n	8001e48 <HAL_NVIC_SetPriority+0x30>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	db05      	blt.n	8001e7c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e70:	231f      	movs	r3, #31
 8001e72:	4018      	ands	r0, r3
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	4083      	lsls	r3, r0
 8001e78:	4a01      	ldr	r2, [pc, #4]	; (8001e80 <HAL_NVIC_EnableIRQ+0x14>)
 8001e7a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e7c:	4770      	bx	lr
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	1e43      	subs	r3, r0, #1
 8001e88:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d20d      	bcs.n	8001eac <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e90:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e94:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e98:	6a03      	ldr	r3, [r0, #32]
 8001e9a:	0609      	lsls	r1, r1, #24
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001eac:	4770      	bx	lr
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	e000e010 	.word	0xe000e010
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <HAL_GPIO_Init+0x158>)
{
 8001eba:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ebc:	1882      	adds	r2, r0, r2
 8001ebe:	1e54      	subs	r4, r2, #1
 8001ec0:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001ec2:	2300      	movs	r3, #0
{
 8001ec4:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ec6:	3205      	adds	r2, #5
 8001ec8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001eca:	680a      	ldr	r2, [r1, #0]
 8001ecc:	0014      	movs	r4, r2
 8001ece:	40dc      	lsrs	r4, r3
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x1e>
        EXTI->IMR = temp;
      }
    }
    position++;
  }
}
 8001ed2:	b005      	add	sp, #20
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ed6:	2701      	movs	r7, #1
 8001ed8:	003c      	movs	r4, r7
 8001eda:	0015      	movs	r5, r2
 8001edc:	409c      	lsls	r4, r3
 8001ede:	4025      	ands	r5, r4
 8001ee0:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8001ee2:	4222      	tst	r2, r4
 8001ee4:	d100      	bne.n	8001ee8 <HAL_GPIO_Init+0x30>
 8001ee6:	e090      	b.n	800200a <HAL_GPIO_Init+0x152>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ee8:	684a      	ldr	r2, [r1, #4]
 8001eea:	9200      	str	r2, [sp, #0]
 8001eec:	2203      	movs	r2, #3
 8001eee:	9d00      	ldr	r5, [sp, #0]
 8001ef0:	4015      	ands	r5, r2
 8001ef2:	46ac      	mov	ip, r5
 8001ef4:	005d      	lsls	r5, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001ef6:	40aa      	lsls	r2, r5
 8001ef8:	43d2      	mvns	r2, r2
 8001efa:	9202      	str	r2, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001efc:	4662      	mov	r2, ip
 8001efe:	3a01      	subs	r2, #1
 8001f00:	42ba      	cmp	r2, r7
 8001f02:	d828      	bhi.n	8001f56 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8001f04:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f06:	9a02      	ldr	r2, [sp, #8]
 8001f08:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	68ca      	ldr	r2, [r1, #12]
 8001f0c:	40aa      	lsls	r2, r5
 8001f0e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8001f10:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f12:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f14:	43a2      	bics	r2, r4
 8001f16:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	9a00      	ldr	r2, [sp, #0]
 8001f1a:	0912      	lsrs	r2, r2, #4
 8001f1c:	403a      	ands	r2, r7
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001f22:	6042      	str	r2, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f24:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f26:	9a02      	ldr	r2, [sp, #8]
 8001f28:	4014      	ands	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2a:	688a      	ldr	r2, [r1, #8]
 8001f2c:	40aa      	lsls	r2, r5
 8001f2e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001f30:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	4662      	mov	r2, ip
 8001f34:	2a02      	cmp	r2, #2
 8001f36:	d111      	bne.n	8001f5c <HAL_GPIO_Init+0xa4>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f38:	2407      	movs	r4, #7
 8001f3a:	270f      	movs	r7, #15
 8001f3c:	401c      	ands	r4, r3
 8001f3e:	00a4      	lsls	r4, r4, #2
 8001f40:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	1882      	adds	r2, r0, r2
 8001f48:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f4a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f4c:	690f      	ldr	r7, [r1, #16]
 8001f4e:	40a7      	lsls	r7, r4
 8001f50:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	6216      	str	r6, [r2, #32]
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f56:	4662      	mov	r2, ip
 8001f58:	2a03      	cmp	r2, #3
 8001f5a:	d1e3      	bne.n	8001f24 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8001f5c:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f5e:	9c02      	ldr	r4, [sp, #8]
 8001f60:	4014      	ands	r4, r2
 8001f62:	0022      	movs	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f64:	4664      	mov	r4, ip
 8001f66:	40ac      	lsls	r4, r5
 8001f68:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001f6a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6c:	22c0      	movs	r2, #192	; 0xc0
 8001f6e:	9c00      	ldr	r4, [sp, #0]
 8001f70:	0292      	lsls	r2, r2, #10
 8001f72:	4214      	tst	r4, r2
 8001f74:	d049      	beq.n	800200a <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2701      	movs	r7, #1
 8001f78:	4c26      	ldr	r4, [pc, #152]	; (8002014 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f7a:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f7e:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	433a      	orrs	r2, r7
 8001f82:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <HAL_GPIO_Init+0x160>)
 8001f86:	089c      	lsrs	r4, r3, #2
 8001f88:	00a4      	lsls	r4, r4, #2
 8001f8a:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	00ad      	lsls	r5, r5, #2
 8001f90:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f92:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f94:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f96:	22a0      	movs	r2, #160	; 0xa0
 8001f98:	05d2      	lsls	r2, r2, #23
 8001f9a:	4694      	mov	ip, r2
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4560      	cmp	r0, ip
 8001fa0:	d009      	beq.n	8001fb6 <HAL_GPIO_Init+0xfe>
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_GPIO_Init+0x164>)
 8001fa4:	4694      	mov	ip, r2
 8001fa6:	003a      	movs	r2, r7
 8001fa8:	4560      	cmp	r0, ip
 8001faa:	d004      	beq.n	8001fb6 <HAL_GPIO_Init+0xfe>
 8001fac:	4f1c      	ldr	r7, [pc, #112]	; (8002020 <HAL_GPIO_Init+0x168>)
 8001fae:	1892      	adds	r2, r2, r2
 8001fb0:	42b8      	cmp	r0, r7
 8001fb2:	d000      	beq.n	8001fb6 <HAL_GPIO_Init+0xfe>
 8001fb4:	9a03      	ldr	r2, [sp, #12]
 8001fb6:	40aa      	lsls	r2, r5
 8001fb8:	4316      	orrs	r6, r2
        temp = EXTI->RTSR;
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x16c>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fbc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR;
 8001fbe:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	9c01      	ldr	r4, [sp, #4]
          temp |= iocurrent;
 8001fc2:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc4:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001fc8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fca:	02ff      	lsls	r7, r7, #11
 8001fcc:	d401      	bmi.n	8001fd2 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8001fce:	0035      	movs	r5, r6
 8001fd0:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001fd2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001fd4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8001fd6:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001fda:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fdc:	02bf      	lsls	r7, r7, #10
 8001fde:	d401      	bmi.n	8001fe4 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	0035      	movs	r5, r6
 8001fe2:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 8001fe4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8001fe6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001fe8:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fea:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001fec:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fee:	03bf      	lsls	r7, r7, #14
 8001ff0:	d401      	bmi.n	8001ff6 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	0035      	movs	r5, r6
 8001ff4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001ff6:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001ff8:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8001ffa:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001ffe:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002000:	03ff      	lsls	r7, r7, #15
 8002002:	d401      	bmi.n	8002008 <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8002004:	4025      	ands	r5, r4
 8002006:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8002008:	6016      	str	r6, [r2, #0]
    position++;
 800200a:	3301      	adds	r3, #1
 800200c:	e75d      	b.n	8001eca <HAL_GPIO_Init+0x12>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	afffe400 	.word	0xafffe400
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000
 800201c:	50000400 	.word	0x50000400
 8002020:	50000800 	.word	0x50000800
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002028:	2a00      	cmp	r2, #0
 800202a:	d001      	beq.n	8002030 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800202e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002030:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002032:	e7fc      	b.n	800202e <HAL_GPIO_WritePin+0x6>

08002034 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002034:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002036:	0013      	movs	r3, r2
 8002038:	400b      	ands	r3, r1
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	4391      	bics	r1, r2
 800203e:	4319      	orrs	r1, r3
 8002040:	6181      	str	r1, [r0, #24]
}
 8002042:	4770      	bx	lr

08002044 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	0792      	lsls	r2, r2, #30
 800204a:	d501      	bpl.n	8002050 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800204c:	2200      	movs	r2, #0
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002050:	2201      	movs	r2, #1
 8002052:	6999      	ldr	r1, [r3, #24]
 8002054:	4211      	tst	r1, r2
 8002056:	d102      	bne.n	800205e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002058:	6999      	ldr	r1, [r3, #24]
 800205a:	430a      	orrs	r2, r1
 800205c:	619a      	str	r2, [r3, #24]
  }
}
 800205e:	4770      	bx	lr

08002060 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002060:	b530      	push	{r4, r5, lr}
 8002062:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002064:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002066:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002068:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800206a:	0589      	lsls	r1, r1, #22
 800206c:	431a      	orrs	r2, r3
 800206e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <I2C_TransferConfig+0x28>)
 8002072:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002074:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002076:	0d64      	lsrs	r4, r4, #21
 8002078:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800207a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800207c:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800207e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002080:	432a      	orrs	r2, r5
 8002082:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002084:	bd30      	pop	{r4, r5, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	03ff63ff 	.word	0x03ff63ff

0800208c <I2C_IsErrorOccurred>:
{
 800208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800208e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002090:	6802      	ldr	r2, [r0, #0]
{
 8002092:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002094:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002096:	2310      	movs	r3, #16
 8002098:	000f      	movs	r7, r1
{
 800209a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800209c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020a0:	4219      	tst	r1, r3
 80020a2:	d00e      	beq.n	80020c2 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020a4:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 80020a8:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	423a      	tst	r2, r7
 80020b2:	d164      	bne.n	800217e <I2C_IsErrorOccurred+0xf2>
 80020b4:	9a01      	ldr	r2, [sp, #4]
 80020b6:	2a00      	cmp	r2, #0
 80020b8:	d032      	beq.n	8002120 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 80020ba:	2704      	movs	r7, #4
    status = HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80020be:	9b00      	ldr	r3, [sp, #0]
 80020c0:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020c2:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80020c4:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020c6:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 80020c8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020ca:	420a      	tst	r2, r1
 80020cc:	d002      	beq.n	80020d4 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80020ce:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020d0:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80020d2:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	00c9      	lsls	r1, r1, #3
 80020d8:	420a      	tst	r2, r1
 80020da:	d003      	beq.n	80020e4 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80020dc:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020de:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80020e0:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 80020e2:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0089      	lsls	r1, r1, #2
 80020e8:	420a      	tst	r2, r1
 80020ea:	d04d      	beq.n	8002188 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 80020ec:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020ee:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80020f0:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 80020f2:	0020      	movs	r0, r4
 80020f4:	f7ff ffa6 	bl	8002044 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	4925      	ldr	r1, [pc, #148]	; (8002190 <I2C_IsErrorOccurred+0x104>)
 80020fc:	6853      	ldr	r3, [r2, #4]
 80020fe:	400b      	ands	r3, r1
 8002100:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002102:	0023      	movs	r3, r4
 8002104:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002106:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002108:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 800210a:	4307      	orrs	r7, r0
 800210c:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	0022      	movs	r2, r4
 8002112:	2300      	movs	r3, #0
 8002114:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8002116:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800211a:	2001      	movs	r0, #1
 800211c:	7023      	strb	r3, [r4, #0]
 800211e:	e035      	b.n	800218c <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8002120:	1c72      	adds	r2, r6, #1
 8002122:	d0c4      	beq.n	80020ae <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002124:	f7ff fe60 	bl	8001de8 <HAL_GetTick>
 8002128:	1b40      	subs	r0, r0, r5
 800212a:	42b0      	cmp	r0, r6
 800212c:	d801      	bhi.n	8002132 <I2C_IsErrorOccurred+0xa6>
 800212e:	2e00      	cmp	r6, #0
 8002130:	d1bc      	bne.n	80020ac <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8002132:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002134:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002136:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002138:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800213a:	7811      	ldrb	r1, [r2, #0]
 800213c:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800213e:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8002140:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	0209      	lsls	r1, r1, #8
 8002146:	420a      	tst	r2, r1
 8002148:	d00c      	beq.n	8002164 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800214e:	4210      	tst	r0, r2
 8002150:	d108      	bne.n	8002164 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8002152:	4661      	mov	r1, ip
 8002154:	2920      	cmp	r1, #32
 8002156:	d005      	beq.n	8002164 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800215e:	f7ff fe43 	bl	8001de8 <HAL_GetTick>
 8002162:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	423b      	tst	r3, r7
 800216a:	d19f      	bne.n	80020ac <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800216c:	f7ff fe3c 	bl	8001de8 <HAL_GetTick>
 8002170:	1b40      	subs	r0, r0, r5
 8002172:	2819      	cmp	r0, #25
 8002174:	d9f6      	bls.n	8002164 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	e796      	b.n	80020ac <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800217e:	9a01      	ldr	r2, [sp, #4]
 8002180:	2a00      	cmp	r2, #0
 8002182:	d19a      	bne.n	80020ba <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002184:	61df      	str	r7, [r3, #28]
 8002186:	e798      	b.n	80020ba <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8002188:	2800      	cmp	r0, #0
 800218a:	d1b2      	bne.n	80020f2 <I2C_IsErrorOccurred+0x66>
}
 800218c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	fe00e800 	.word	0xfe00e800

08002194 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	0004      	movs	r4, r0
 8002198:	000d      	movs	r5, r1
 800219a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800219c:	2702      	movs	r7, #2
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	423b      	tst	r3, r7
 80021a4:	d001      	beq.n	80021aa <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80021a6:	2000      	movs	r0, #0
}
 80021a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021aa:	0032      	movs	r2, r6
 80021ac:	0029      	movs	r1, r5
 80021ae:	0020      	movs	r0, r4
 80021b0:	f7ff ff6c 	bl	800208c <I2C_IsErrorOccurred>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d118      	bne.n	80021ea <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80021b8:	1c6b      	adds	r3, r5, #1
 80021ba:	d0f0      	beq.n	800219e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7ff fe14 	bl	8001de8 <HAL_GetTick>
 80021c0:	1b80      	subs	r0, r0, r6
 80021c2:	42a8      	cmp	r0, r5
 80021c4:	d801      	bhi.n	80021ca <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	d1e9      	bne.n	800219e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	001a      	movs	r2, r3
 80021d0:	403a      	ands	r2, r7
 80021d2:	423b      	tst	r3, r7
 80021d4:	d1e3      	bne.n	800219e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	2120      	movs	r1, #32
 80021d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021da:	430b      	orrs	r3, r1
 80021dc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021de:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80021e0:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	3341      	adds	r3, #65	; 0x41
 80021e4:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80021e8:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e7dc      	b.n	80021a8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080021ee <I2C_WaitOnFlagUntilTimeout>:
{
 80021ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f0:	0004      	movs	r4, r0
 80021f2:	000d      	movs	r5, r1
 80021f4:	0017      	movs	r7, r2
 80021f6:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021f8:	6822      	ldr	r2, [r4, #0]
 80021fa:	6993      	ldr	r3, [r2, #24]
 80021fc:	402b      	ands	r3, r5
 80021fe:	1b5b      	subs	r3, r3, r5
 8002200:	4259      	negs	r1, r3
 8002202:	414b      	adcs	r3, r1
 8002204:	42bb      	cmp	r3, r7
 8002206:	d001      	beq.n	800220c <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002208:	2000      	movs	r0, #0
 800220a:	e01f      	b.n	800224c <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800220c:	1c73      	adds	r3, r6, #1
 800220e:	d0f4      	beq.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002210:	f7ff fdea 	bl	8001de8 <HAL_GetTick>
 8002214:	9b06      	ldr	r3, [sp, #24]
 8002216:	1ac0      	subs	r0, r0, r3
 8002218:	42b0      	cmp	r0, r6
 800221a:	d801      	bhi.n	8002220 <I2C_WaitOnFlagUntilTimeout+0x32>
 800221c:	2e00      	cmp	r6, #0
 800221e:	d1eb      	bne.n	80021f8 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	402b      	ands	r3, r5
 8002226:	1b5b      	subs	r3, r3, r5
 8002228:	425a      	negs	r2, r3
 800222a:	4153      	adcs	r3, r2
 800222c:	42bb      	cmp	r3, r7
 800222e:	d1e3      	bne.n	80021f8 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002230:	2220      	movs	r2, #32
 8002232:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	4313      	orrs	r3, r2
 8002238:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800223a:	0023      	movs	r3, r4
 800223c:	3341      	adds	r3, #65	; 0x41
 800223e:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	0022      	movs	r2, r4
 8002242:	2300      	movs	r3, #0
 8002244:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8002246:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800224a:	7023      	strb	r3, [r4, #0]
}
 800224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800224e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800224e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002250:	0004      	movs	r4, r0
 8002252:	000e      	movs	r6, r1
 8002254:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002256:	2520      	movs	r5, #32
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	422b      	tst	r3, r5
 800225e:	d001      	beq.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002260:	2000      	movs	r0, #0
}
 8002262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002264:	003a      	movs	r2, r7
 8002266:	0031      	movs	r1, r6
 8002268:	0020      	movs	r0, r4
 800226a:	f7ff ff0f 	bl	800208c <I2C_IsErrorOccurred>
 800226e:	2800      	cmp	r0, #0
 8002270:	d115      	bne.n	800229e <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7ff fdb9 	bl	8001de8 <HAL_GetTick>
 8002276:	1bc0      	subs	r0, r0, r7
 8002278:	42b0      	cmp	r0, r6
 800227a:	d801      	bhi.n	8002280 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800227c:	2e00      	cmp	r6, #0
 800227e:	d1eb      	bne.n	8002258 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	001a      	movs	r2, r3
 8002286:	402a      	ands	r2, r5
 8002288:	422b      	tst	r3, r5
 800228a:	d1e5      	bne.n	8002258 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800228e:	432b      	orrs	r3, r5
 8002290:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002292:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002294:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002296:	3341      	adds	r3, #65	; 0x41
 8002298:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 800229c:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800229e:	2001      	movs	r0, #1
 80022a0:	e7df      	b.n	8002262 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

080022a4 <HAL_I2C_Init>:
{
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d03f      	beq.n	800232e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ae:	0025      	movs	r5, r4
 80022b0:	3541      	adds	r5, #65	; 0x41
 80022b2:	782b      	ldrb	r3, [r5, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80022ba:	0023      	movs	r3, r4
 80022bc:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80022be:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80022c0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80022c2:	f7fe fba1 	bl	8000a08 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c6:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80022c8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ca:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ce:	481d      	ldr	r0, [pc, #116]	; (8002344 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 80022d0:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022d2:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	438a      	bics	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d8:	6861      	ldr	r1, [r4, #4]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_I2C_Init+0xa4>)
 80022dc:	400a      	ands	r2, r1
 80022de:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4002      	ands	r2, r0
 80022e4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022e6:	68e2      	ldr	r2, [r4, #12]
 80022e8:	2a01      	cmp	r2, #1
 80022ea:	d121      	bne.n	8002330 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0209      	lsls	r1, r1, #8
 80022f0:	4331      	orrs	r1, r6
 80022f2:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	4915      	ldr	r1, [pc, #84]	; (800234c <HAL_I2C_Init+0xa8>)
 80022f8:	4311      	orrs	r1, r2
 80022fa:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022fc:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022fe:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002300:	4002      	ands	r2, r0
 8002302:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002304:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002308:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800230a:	69a1      	ldr	r1, [r4, #24]
 800230c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800230e:	430a      	orrs	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002312:	6a21      	ldr	r1, [r4, #32]
 8002314:	69e2      	ldr	r2, [r4, #28]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800231a:	2201      	movs	r2, #1
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002322:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002326:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002328:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232a:	3442      	adds	r4, #66	; 0x42
 800232c:	7020      	strb	r0, [r4, #0]
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002330:	2184      	movs	r1, #132	; 0x84
 8002332:	0209      	lsls	r1, r1, #8
 8002334:	4331      	orrs	r1, r6
 8002336:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002338:	2a02      	cmp	r2, #2
 800233a:	d1db      	bne.n	80022f4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e7d7      	b.n	80022f4 <HAL_I2C_Init+0x50>
 8002344:	ffff7fff 	.word	0xffff7fff
 8002348:	f0ffffff 	.word	0xf0ffffff
 800234c:	02008000 	.word	0x02008000

08002350 <HAL_I2C_Mem_Write>:
{
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	9304      	str	r3, [sp, #16]
 8002356:	ab0e      	add	r3, sp, #56	; 0x38
 8002358:	9203      	str	r2, [sp, #12]
 800235a:	cb04      	ldmia	r3!, {r2}
 800235c:	0004      	movs	r4, r0
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	9205      	str	r2, [sp, #20]
 8002362:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	0003      	movs	r3, r0
 8002366:	3341      	adds	r3, #65	; 0x41
 8002368:	9307      	str	r3, [sp, #28]
 800236a:	781b      	ldrb	r3, [r3, #0]
{
 800236c:	000f      	movs	r7, r1
    return HAL_BUSY;
 800236e:	2002      	movs	r0, #2
{
 8002370:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	2b20      	cmp	r3, #32
 8002374:	d108      	bne.n	8002388 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002376:	2a00      	cmp	r2, #0
 8002378:	d002      	beq.n	8002380 <HAL_I2C_Mem_Write+0x30>
 800237a:	9b06      	ldr	r3, [sp, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
}
 8002388:	b009      	add	sp, #36	; 0x24
 800238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800238c:	0023      	movs	r3, r4
 800238e:	3340      	adds	r3, #64	; 0x40
 8002390:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8002392:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002394:	2a01      	cmp	r2, #1
 8002396:	d0f7      	beq.n	8002388 <HAL_I2C_Mem_Write+0x38>
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800239c:	f7ff fd24 	bl	8001de8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023a0:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80023a2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023a4:	9000      	str	r0, [sp, #0]
 80023a6:	2319      	movs	r3, #25
 80023a8:	2201      	movs	r2, #1
 80023aa:	0020      	movs	r0, r4
 80023ac:	0209      	lsls	r1, r1, #8
 80023ae:	f7ff ff1e 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d1e7      	bne.n	8002386 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b6:	2321      	movs	r3, #33	; 0x21
 80023b8:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023ba:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023bc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023be:	0023      	movs	r3, r4
 80023c0:	3342      	adds	r3, #66	; 0x42
 80023c2:	9307      	str	r3, [sp, #28]
 80023c4:	2340      	movs	r3, #64	; 0x40
 80023c6:	9a07      	ldr	r2, [sp, #28]
 80023c8:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 80023ca:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80023ce:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d0:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 80023d2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80023d4:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023d6:	466b      	mov	r3, sp
 80023d8:	7c1a      	ldrb	r2, [r3, #16]
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_I2C_Mem_Write+0x1b4>)
 80023dc:	0020      	movs	r0, r4
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	045b      	lsls	r3, r3, #17
 80023e4:	f7ff fe3c 	bl	8002060 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e8:	002a      	movs	r2, r5
 80023ea:	0031      	movs	r1, r6
 80023ec:	0020      	movs	r0, r4
 80023ee:	f7ff fed1 	bl	8002194 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d126      	bne.n	8002444 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f6:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023f8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023fa:	2a01      	cmp	r2, #1
 80023fc:	d116      	bne.n	800242c <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023fe:	466a      	mov	r2, sp
 8002400:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002402:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002406:	0020      	movs	r0, r4
 8002408:	0033      	movs	r3, r6
 800240a:	2200      	movs	r2, #0
 800240c:	9500      	str	r5, [sp, #0]
 800240e:	f7ff feee 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 8002412:	2800      	cmp	r0, #0
 8002414:	d116      	bne.n	8002444 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002416:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002418:	2bff      	cmp	r3, #255	; 0xff
 800241a:	d817      	bhi.n	800244c <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800241c:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800241e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002420:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002422:	b292      	uxth	r2, r2
 8002424:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	9000      	str	r0, [sp, #0]
 800242a:	e014      	b.n	8002456 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800242c:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242e:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002430:	0a12      	lsrs	r2, r2, #8
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002434:	0020      	movs	r0, r4
 8002436:	002a      	movs	r2, r5
 8002438:	f7ff feac 	bl	8002194 <I2C_WaitOnTXISFlagUntilTimeout>
 800243c:	2800      	cmp	r0, #0
 800243e:	d101      	bne.n	8002444 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	e7dc      	b.n	80023fe <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 8002444:	2300      	movs	r3, #0
 8002446:	3440      	adds	r4, #64	; 0x40
 8002448:	7023      	strb	r3, [r4, #0]
 800244a:	e79c      	b.n	8002386 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800244c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800244e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002450:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002452:	045b      	lsls	r3, r3, #17
 8002454:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002456:	0039      	movs	r1, r7
 8002458:	0020      	movs	r0, r4
 800245a:	f7ff fe01 	bl	8002060 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800245e:	002a      	movs	r2, r5
 8002460:	0031      	movs	r1, r6
 8002462:	0020      	movs	r0, r4
 8002464:	f7ff fe96 	bl	8002194 <I2C_WaitOnTXISFlagUntilTimeout>
 8002468:	2800      	cmp	r0, #0
 800246a:	d000      	beq.n	800246e <HAL_I2C_Mem_Write+0x11e>
 800246c:	e78b      	b.n	8002386 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800246e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002474:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002476:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002478:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800247a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800247c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800247e:	3b01      	subs	r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002484:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002486:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002488:	b292      	uxth	r2, r2
 800248a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x170>
 8002490:	2a00      	cmp	r2, #0
 8002492:	d115      	bne.n	80024c0 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	0033      	movs	r3, r6
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0020      	movs	r0, r4
 800249a:	9500      	str	r5, [sp, #0]
 800249c:	f7ff fea7 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d000      	beq.n	80024a6 <HAL_I2C_Mem_Write+0x156>
 80024a4:	e76f      	b.n	8002386 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024a8:	2bff      	cmp	r3, #255	; 0xff
 80024aa:	d923      	bls.n	80024f4 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ac:	23ff      	movs	r3, #255	; 0xff
 80024ae:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	22ff      	movs	r2, #255	; 0xff
 80024b4:	9000      	str	r0, [sp, #0]
 80024b6:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b8:	0039      	movs	r1, r7
 80024ba:	0020      	movs	r0, r4
 80024bc:	f7ff fdd0 	bl	8002060 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80024c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cb      	bne.n	800245e <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c6:	002a      	movs	r2, r5
 80024c8:	0031      	movs	r1, r6
 80024ca:	0020      	movs	r0, r4
 80024cc:	f7ff febf 	bl	800224e <I2C_WaitOnSTOPFlagUntilTimeout>
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d000      	beq.n	80024d6 <HAL_I2C_Mem_Write+0x186>
 80024d4:	e757      	b.n	8002386 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d6:	2120      	movs	r1, #32
 80024d8:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80024da:	4d0b      	ldr	r5, [pc, #44]	; (8002508 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	402a      	ands	r2, r5
 80024e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	0023      	movs	r3, r4
 80024e6:	3341      	adds	r3, #65	; 0x41
 80024e8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ea:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80024ec:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ee:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80024f0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80024f2:	e749      	b.n	8002388 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f4:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80024f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f8:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80024fa:	b292      	uxth	r2, r2
 80024fc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	9000      	str	r0, [sp, #0]
 8002502:	e7d9      	b.n	80024b8 <HAL_I2C_Mem_Write+0x168>
 8002504:	80002000 	.word	0x80002000
 8002508:	fe00e800 	.word	0xfe00e800

0800250c <HAL_I2C_Mem_Read>:
{
 800250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	9304      	str	r3, [sp, #16]
 8002512:	ab0e      	add	r3, sp, #56	; 0x38
 8002514:	9203      	str	r2, [sp, #12]
 8002516:	cb04      	ldmia	r3!, {r2}
 8002518:	0004      	movs	r4, r0
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	9205      	str	r2, [sp, #20]
 800251e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	0003      	movs	r3, r0
 8002522:	3341      	adds	r3, #65	; 0x41
 8002524:	9307      	str	r3, [sp, #28]
 8002526:	781b      	ldrb	r3, [r3, #0]
{
 8002528:	000f      	movs	r7, r1
    return HAL_BUSY;
 800252a:	2002      	movs	r0, #2
{
 800252c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	2b20      	cmp	r3, #32
 8002530:	d108      	bne.n	8002544 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8002532:	2a00      	cmp	r2, #0
 8002534:	d002      	beq.n	800253c <HAL_I2C_Mem_Read+0x30>
 8002536:	9b06      	ldr	r3, [sp, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
}
 8002544:	b009      	add	sp, #36	; 0x24
 8002546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002548:	0023      	movs	r3, r4
 800254a:	3340      	adds	r3, #64	; 0x40
 800254c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800254e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002550:	2a01      	cmp	r2, #1
 8002552:	d0f7      	beq.n	8002544 <HAL_I2C_Mem_Read+0x38>
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002558:	f7ff fc46 	bl	8001de8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	2319      	movs	r3, #25
 8002560:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002562:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002564:	2201      	movs	r2, #1
 8002566:	0020      	movs	r0, r4
 8002568:	0209      	lsls	r1, r1, #8
 800256a:	f7ff fe40 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d1e7      	bne.n	8002542 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002572:	2222      	movs	r2, #34	; 0x22
 8002574:	9907      	ldr	r1, [sp, #28]
 8002576:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002578:	0022      	movs	r2, r4
 800257a:	3242      	adds	r2, #66	; 0x42
 800257c:	9207      	str	r2, [sp, #28]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	9907      	ldr	r1, [sp, #28]
 8002582:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8002584:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002586:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002588:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800258a:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800258c:	494d      	ldr	r1, [pc, #308]	; (80026c4 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 800258e:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002590:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8002592:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002594:	7c12      	ldrb	r2, [r2, #16]
 8002596:	0020      	movs	r0, r4
 8002598:	9100      	str	r1, [sp, #0]
 800259a:	0039      	movs	r1, r7
 800259c:	f7ff fd60 	bl	8002060 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a0:	002a      	movs	r2, r5
 80025a2:	0031      	movs	r1, r6
 80025a4:	0020      	movs	r0, r4
 80025a6:	f7ff fdf5 	bl	8002194 <I2C_WaitOnTXISFlagUntilTimeout>
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d127      	bne.n	80025fe <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ae:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025b2:	2a01      	cmp	r2, #1
 80025b4:	d117      	bne.n	80025e6 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b6:	466a      	mov	r2, sp
 80025b8:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025ba:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80025be:	0020      	movs	r0, r4
 80025c0:	0033      	movs	r3, r6
 80025c2:	2200      	movs	r2, #0
 80025c4:	9500      	str	r5, [sp, #0]
 80025c6:	f7ff fe12 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d117      	bne.n	80025fe <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025d0:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_I2C_Mem_Read+0x1bc>)
 80025d2:	2aff      	cmp	r2, #255	; 0xff
 80025d4:	d817      	bhi.n	8002606 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 80025d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025d8:	b292      	uxth	r2, r2
 80025da:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	049b      	lsls	r3, r3, #18
 80025e4:	e014      	b.n	8002610 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025e6:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e8:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ea:	0a12      	lsrs	r2, r2, #8
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ee:	0020      	movs	r0, r4
 80025f0:	002a      	movs	r2, r5
 80025f2:	f7ff fdcf 	bl	8002194 <I2C_WaitOnTXISFlagUntilTimeout>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	e7db      	b.n	80025b6 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	3440      	adds	r4, #64	; 0x40
 8002602:	7023      	strb	r3, [r4, #0]
 8002604:	e79d      	b.n	8002542 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002606:	22ff      	movs	r2, #255	; 0xff
 8002608:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002610:	0039      	movs	r1, r7
 8002612:	0020      	movs	r0, r4
 8002614:	f7ff fd24 	bl	8002060 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002618:	0033      	movs	r3, r6
 800261a:	2200      	movs	r2, #0
 800261c:	2104      	movs	r1, #4
 800261e:	0020      	movs	r0, r4
 8002620:	9500      	str	r5, [sp, #0]
 8002622:	f7ff fde4 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 8002626:	2800      	cmp	r0, #0
 8002628:	d000      	beq.n	800262c <HAL_I2C_Mem_Read+0x120>
 800262a:	e78a      	b.n	8002542 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002634:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002636:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002638:	3301      	adds	r3, #1
 800263a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800263c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800263e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002640:	3b01      	subs	r3, #1
 8002642:	b29b      	uxth	r3, r3
 8002644:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002646:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002648:	b292      	uxth	r2, r2
 800264a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800264c:	2b00      	cmp	r3, #0
 800264e:	d017      	beq.n	8002680 <HAL_I2C_Mem_Read+0x174>
 8002650:	2a00      	cmp	r2, #0
 8002652:	d115      	bne.n	8002680 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002654:	0033      	movs	r3, r6
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0020      	movs	r0, r4
 800265a:	9500      	str	r5, [sp, #0]
 800265c:	f7ff fdc7 	bl	80021ee <I2C_WaitOnFlagUntilTimeout>
 8002660:	2800      	cmp	r0, #0
 8002662:	d000      	beq.n	8002666 <HAL_I2C_Mem_Read+0x15a>
 8002664:	e76d      	b.n	8002542 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002666:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002668:	2bff      	cmp	r3, #255	; 0xff
 800266a:	d923      	bls.n	80026b4 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800266c:	23ff      	movs	r3, #255	; 0xff
 800266e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	22ff      	movs	r2, #255	; 0xff
 8002674:	9000      	str	r0, [sp, #0]
 8002676:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002678:	0039      	movs	r1, r7
 800267a:	0020      	movs	r0, r4
 800267c:	f7ff fcf0 	bl	8002060 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002680:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1c8      	bne.n	8002618 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	002a      	movs	r2, r5
 8002688:	0031      	movs	r1, r6
 800268a:	0020      	movs	r0, r4
 800268c:	f7ff fddf 	bl	800224e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002690:	2800      	cmp	r0, #0
 8002692:	d000      	beq.n	8002696 <HAL_I2C_Mem_Read+0x18a>
 8002694:	e755      	b.n	8002542 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002696:	2120      	movs	r1, #32
 8002698:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800269a:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	402a      	ands	r2, r5
 80026a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	0023      	movs	r3, r4
 80026a6:	3341      	adds	r3, #65	; 0x41
 80026a8:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026aa:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80026ac:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ae:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80026b0:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80026b2:	e747      	b.n	8002544 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b4:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80026b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b8:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80026ba:	b292      	uxth	r2, r2
 80026bc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	9000      	str	r0, [sp, #0]
 80026c2:	e7d9      	b.n	8002678 <HAL_I2C_Mem_Read+0x16c>
 80026c4:	80002000 	.word	0x80002000
 80026c8:	80002400 	.word	0x80002400
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d2:	0004      	movs	r4, r0
 80026d4:	3441      	adds	r4, #65	; 0x41
 80026d6:	7822      	ldrb	r2, [r4, #0]
{
 80026d8:	0003      	movs	r3, r0
 80026da:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80026de:	b2d6      	uxtb	r6, r2
 80026e0:	2a20      	cmp	r2, #32
 80026e2:	d118      	bne.n	8002716 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80026e4:	001d      	movs	r5, r3
 80026e6:	3540      	adds	r5, #64	; 0x40
 80026e8:	782a      	ldrb	r2, [r5, #0]
 80026ea:	2a01      	cmp	r2, #1
 80026ec:	d013      	beq.n	8002716 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3a23      	subs	r2, #35	; 0x23
 80026f6:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80026fa:	4391      	bics	r1, r2
 80026fc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002702:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002704:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	4339      	orrs	r1, r7
 800270a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800270c:	6819      	ldr	r1, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002714:	7028      	strb	r0, [r5, #0]
  }
}
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002718:	ffffefff 	.word	0xffffefff

0800271c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271c:	0002      	movs	r2, r0
{
 800271e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002720:	3241      	adds	r2, #65	; 0x41
 8002722:	7814      	ldrb	r4, [r2, #0]
{
 8002724:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002728:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800272a:	2c20      	cmp	r4, #32
 800272c:	d117      	bne.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800272e:	001c      	movs	r4, r3
 8002730:	3440      	adds	r4, #64	; 0x40
 8002732:	7826      	ldrb	r6, [r4, #0]
 8002734:	2e01      	cmp	r6, #1
 8002736:	d012      	beq.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002738:	3022      	adds	r0, #34	; 0x22
 800273a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3823      	subs	r0, #35	; 0x23
 8002740:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002742:	4f07      	ldr	r7, [pc, #28]	; (8002760 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002744:	4386      	bics	r6, r0
 8002746:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002748:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800274a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800274c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800274e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002750:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	4308      	orrs	r0, r1
 8002756:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002758:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800275a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800275c:	7020      	strb	r0, [r4, #0]
  }
}
 800275e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002760:	fffff0ff 	.word	0xfffff0ff

08002764 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002764:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_GetSysClockFreq+0x78>)
{
 8002768:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800276a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	4022      	ands	r2, r4
 800276e:	2a08      	cmp	r2, #8
 8002770:	d031      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x72>
 8002772:	2a0c      	cmp	r2, #12
 8002774:	d009      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x26>
 8002776:	2a04      	cmp	r2, #4
 8002778:	d125      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800277a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800277e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002780:	17c0      	asrs	r0, r0, #31
 8002782:	4018      	ands	r0, r3
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x80>)
 8002786:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002788:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800278a:	02a2      	lsls	r2, r4, #10
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800278c:	4816      	ldr	r0, [pc, #88]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x84>)
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800278e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002790:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002792:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002794:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002796:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002798:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800279c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279e:	4211      	tst	r1, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_RCC_GetSysClockFreq+0x88>)
 80027a4:	2300      	movs	r3, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	f7fd fe8e 	bl	80004c8 <__aeabi_lmul>
 80027ac:	0022      	movs	r2, r4
 80027ae:	2300      	movs	r3, #0
 80027b0:	f7fd fe6a 	bl	8000488 <__aeabi_uldivmod>
 80027b4:	e7e8      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2310      	movs	r3, #16
 80027ba:	421a      	tst	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80027c0:	e7f0      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x80>)
 80027c4:	e7ee      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027c6:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027c8:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027ca:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027d0:	3301      	adds	r3, #1
 80027d2:	4098      	lsls	r0, r3
      break;
 80027d4:	e7d8      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x88>)
 80027d8:	e7d6      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x24>
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	40021000 	.word	0x40021000
 80027e0:	ff48e500 	.word	0xff48e500
 80027e4:	00f42400 	.word	0x00f42400
 80027e8:	08003e5c 	.word	0x08003e5c
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	003d0900 	.word	0x003d0900

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x14>)
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <HAL_RCC_GetPCLK1Freq+0x18>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	055b      	lsls	r3, r3, #21
 80027fc:	0f5b      	lsrs	r3, r3, #29
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002802:	6810      	ldr	r0, [r2, #0]
 8002804:	40d8      	lsrs	r0, r3
}
 8002806:	4770      	bx	lr
 8002808:	40021000 	.word	0x40021000
 800280c:	08003e54 	.word	0x08003e54
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	049b      	lsls	r3, r3, #18
 800281c:	0f5b      	lsrs	r3, r3, #29
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002822:	6810      	ldr	r0, [r2, #0]
 8002824:	40d8      	lsrs	r0, r3
}
 8002826:	4770      	bx	lr
 8002828:	40021000 	.word	0x40021000
 800282c:	08003e54 	.word	0x08003e54
 8002830:	20000000 	.word	0x20000000

08002834 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002834:	2280      	movs	r2, #128	; 0x80
{
 8002836:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002838:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800283a:	05d2      	lsls	r2, r2, #23
 800283c:	4290      	cmp	r0, r2
 800283e:	d005      	beq.n	800284c <TIM_Base_SetConfig+0x18>
 8002840:	4c10      	ldr	r4, [pc, #64]	; (8002884 <TIM_Base_SetConfig+0x50>)
 8002842:	42a0      	cmp	r0, r4
 8002844:	d002      	beq.n	800284c <TIM_Base_SetConfig+0x18>
 8002846:	4c10      	ldr	r4, [pc, #64]	; (8002888 <TIM_Base_SetConfig+0x54>)
 8002848:	42a0      	cmp	r0, r4
 800284a:	d10f      	bne.n	800286c <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	2470      	movs	r4, #112	; 0x70
 800284e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002850:	684c      	ldr	r4, [r1, #4]
 8002852:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002854:	4290      	cmp	r0, r2
 8002856:	d005      	beq.n	8002864 <TIM_Base_SetConfig+0x30>
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <TIM_Base_SetConfig+0x50>)
 800285a:	4290      	cmp	r0, r2
 800285c:	d002      	beq.n	8002864 <TIM_Base_SetConfig+0x30>
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <TIM_Base_SetConfig+0x54>)
 8002860:	4290      	cmp	r0, r2
 8002862:	d103      	bne.n	800286c <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <TIM_Base_SetConfig+0x58>)
 8002866:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002868:	68ca      	ldr	r2, [r1, #12]
 800286a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	4393      	bics	r3, r2
 8002870:	690a      	ldr	r2, [r1, #16]
 8002872:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002874:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002876:	688b      	ldr	r3, [r1, #8]
 8002878:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800287a:	680b      	ldr	r3, [r1, #0]
 800287c:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800287e:	2301      	movs	r3, #1
 8002880:	6143      	str	r3, [r0, #20]
}
 8002882:	bd10      	pop	{r4, pc}
 8002884:	40010800 	.word	0x40010800
 8002888:	40011400 	.word	0x40011400
 800288c:	fffffcff 	.word	0xfffffcff

08002890 <HAL_TIM_Base_Init>:
{
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
  if (htim == NULL)
 8002896:	2c00      	cmp	r4, #0
 8002898:	d01d      	beq.n	80028d6 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 800289a:	0025      	movs	r5, r4
 800289c:	3539      	adds	r5, #57	; 0x39
 800289e:	782b      	ldrb	r3, [r5, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80028a6:	0023      	movs	r3, r4
 80028a8:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80028aa:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80028ac:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80028ae:	f7fe fa19 	bl	8000ce4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	1d21      	adds	r1, r4, #4
 80028ba:	f7ff ffbb 	bl	8002834 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028be:	0022      	movs	r2, r4
 80028c0:	2301      	movs	r3, #1
  return HAL_OK;
 80028c2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c4:	323e      	adds	r2, #62	; 0x3e
 80028c6:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	343d      	adds	r4, #61	; 0x3d
 80028ca:	3a04      	subs	r2, #4
 80028cc:	7013      	strb	r3, [r2, #0]
 80028ce:	7053      	strb	r3, [r2, #1]
 80028d0:	7093      	strb	r3, [r2, #2]
 80028d2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	702b      	strb	r3, [r5, #0]
}
 80028d6:	bd70      	pop	{r4, r5, r6, pc}

080028d8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	0002      	movs	r2, r0
{
 80028da:	0003      	movs	r3, r0
    return HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80028de:	3239      	adds	r2, #57	; 0x39
 80028e0:	7811      	ldrb	r1, [r2, #0]
 80028e2:	4281      	cmp	r1, r0
 80028e4:	d116      	bne.n	8002914 <HAL_TIM_Base_Start+0x3c>
  htim->State = HAL_TIM_STATE_BUSY;
 80028e6:	2102      	movs	r1, #2
 80028e8:	7011      	strb	r1, [r2, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	05d2      	lsls	r2, r2, #23
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d005      	beq.n	8002900 <HAL_TIM_Base_Start+0x28>
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_TIM_Base_Start+0x48>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d002      	beq.n	8002900 <HAL_TIM_Base_Start+0x28>
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_TIM_Base_Start+0x4c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10a      	bne.n	8002916 <HAL_TIM_Base_Start+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002900:	2107      	movs	r1, #7
 8002902:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8002904:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002906:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	2a06      	cmp	r2, #6
 800290a:	d003      	beq.n	8002914 <HAL_TIM_Base_Start+0x3c>
      __HAL_TIM_ENABLE(htim);
 800290c:	2201      	movs	r2, #1
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
}
 8002914:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4310      	orrs	r0, r2
 800291a:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800291c:	2000      	movs	r0, #0
 800291e:	e7f9      	b.n	8002914 <HAL_TIM_Base_Start+0x3c>
 8002920:	40010800 	.word	0x40010800
 8002924:	40011400 	.word	0x40011400

08002928 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002928:	0002      	movs	r2, r0
{
 800292a:	0003      	movs	r3, r0
    return HAL_ERROR;
 800292c:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800292e:	3239      	adds	r2, #57	; 0x39
 8002930:	7811      	ldrb	r1, [r2, #0]
 8002932:	4281      	cmp	r1, r0
 8002934:	d119      	bne.n	800296a <HAL_TIM_Base_Start_IT+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8002936:	2102      	movs	r1, #2
 8002938:	7011      	strb	r1, [r2, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	4302      	orrs	r2, r0
 8002940:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	05d2      	lsls	r2, r2, #23
 8002946:	4293      	cmp	r3, r2
 8002948:	d005      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x2e>
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_TIM_Base_Start_IT+0x50>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d002      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x2e>
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <HAL_TIM_Base_Start_IT+0x54>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10a      	bne.n	800296c <HAL_TIM_Base_Start_IT+0x44>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002956:	2107      	movs	r1, #7
 8002958:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 800295a:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800295c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	2a06      	cmp	r2, #6
 8002960:	d003      	beq.n	800296a <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8002962:	2201      	movs	r2, #1
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4310      	orrs	r0, r2
 8002970:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002972:	2000      	movs	r0, #0
 8002974:	e7f9      	b.n	800296a <HAL_TIM_Base_Start_IT+0x42>
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40010800 	.word	0x40010800
 800297c:	40011400 	.word	0x40011400

08002980 <HAL_TIM_ConfigClockSource>:
{
 8002980:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002982:	0005      	movs	r5, r0
 8002984:	2202      	movs	r2, #2
 8002986:	3538      	adds	r5, #56	; 0x38
 8002988:	782c      	ldrb	r4, [r5, #0]
{
 800298a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800298c:	0010      	movs	r0, r2
 800298e:	2c01      	cmp	r4, #1
 8002990:	d01d      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002992:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8002994:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002996:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8002998:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800299c:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299e:	484c      	ldr	r0, [pc, #304]	; (8002ad0 <HAL_TIM_ConfigClockSource+0x150>)
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a2:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80029a4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80029a6:	680a      	ldr	r2, [r1, #0]
 80029a8:	2a60      	cmp	r2, #96	; 0x60
 80029aa:	d05f      	beq.n	8002a6c <HAL_TIM_ConfigClockSource+0xec>
 80029ac:	d832      	bhi.n	8002a14 <HAL_TIM_ConfigClockSource+0x94>
 80029ae:	2a40      	cmp	r2, #64	; 0x40
 80029b0:	d100      	bne.n	80029b4 <HAL_TIM_ConfigClockSource+0x34>
 80029b2:	e074      	b.n	8002a9e <HAL_TIM_ConfigClockSource+0x11e>
 80029b4:	d814      	bhi.n	80029e0 <HAL_TIM_ConfigClockSource+0x60>
 80029b6:	2a20      	cmp	r2, #32
 80029b8:	d00c      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0x54>
 80029ba:	d809      	bhi.n	80029d0 <HAL_TIM_ConfigClockSource+0x50>
 80029bc:	2110      	movs	r1, #16
 80029be:	0010      	movs	r0, r2
 80029c0:	4388      	bics	r0, r1
 80029c2:	d007      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0x54>
 80029c4:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 80029c6:	2301      	movs	r3, #1
 80029c8:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80029ca:	2300      	movs	r3, #0
 80029cc:	702b      	strb	r3, [r5, #0]
}
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80029d0:	2a30      	cmp	r2, #48	; 0x30
 80029d2:	d1f7      	bne.n	80029c4 <HAL_TIM_ConfigClockSource+0x44>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029d4:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80029d6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029d8:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029da:	430a      	orrs	r2, r1
 80029dc:	2107      	movs	r1, #7
 80029de:	e032      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80029e0:	2a50      	cmp	r2, #80	; 0x50
 80029e2:	d1ef      	bne.n	80029c4 <HAL_TIM_ConfigClockSource+0x44>
  tmpccer = TIMx->CCER;
 80029e4:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e6:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e8:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ea:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ec:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f4:	43a2      	bics	r2, r4
 80029f6:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f8:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fa:	210a      	movs	r1, #10
 80029fc:	438f      	bics	r7, r1
 80029fe:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a00:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8002a02:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a06:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a08:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002a0a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a10:	2257      	movs	r2, #87	; 0x57
 8002a12:	e018      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002a14:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8002a18:	017f      	lsls	r7, r7, #5
 8002a1a:	42ba      	cmp	r2, r7
 8002a1c:	d0d3      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x46>
 8002a1e:	2080      	movs	r0, #128	; 0x80
 8002a20:	0180      	lsls	r0, r0, #6
 8002a22:	4282      	cmp	r2, r0
 8002a24:	d013      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0xce>
 8002a26:	0020      	movs	r0, r4
 8002a28:	2a70      	cmp	r2, #112	; 0x70
 8002a2a:	d1cc      	bne.n	80029c6 <HAL_TIM_ConfigClockSource+0x46>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a2c:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2e:	4829      	ldr	r0, [pc, #164]	; (8002ad4 <HAL_TIM_ConfigClockSource+0x154>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a30:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a32:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a34:	688a      	ldr	r2, [r1, #8]
 8002a36:	68c9      	ldr	r1, [r1, #12]
 8002a38:	4322      	orrs	r2, r4
 8002a3a:	0209      	lsls	r1, r1, #8
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a40:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a42:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002a44:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a46:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	e7bb      	b.n	80029c6 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8002a4e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a50:	4820      	ldr	r0, [pc, #128]	; (8002ad4 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a52:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a54:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	688a      	ldr	r2, [r1, #8]
 8002a58:	68c9      	ldr	r1, [r1, #12]
 8002a5a:	4322      	orrs	r2, r4
 8002a5c:	0209      	lsls	r1, r1, #8
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8002a62:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	01d2      	lsls	r2, r2, #7
 8002a6a:	e7ec      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6c:	6848      	ldr	r0, [r1, #4]
 8002a6e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a70:	2110      	movs	r1, #16
 8002a72:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a74:	4c18      	ldr	r4, [pc, #96]	; (8002ad8 <HAL_TIM_ConfigClockSource+0x158>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a76:	438a      	bics	r2, r1
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7e:	4021      	ands	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a80:	24a0      	movs	r4, #160	; 0xa0
 8002a82:	43a2      	bics	r2, r4
 8002a84:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a86:	033f      	lsls	r7, r7, #12
 8002a88:	4339      	orrs	r1, r7
  TIMx->CCMR1 = tmpccmr1 ;
 8002a8a:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a8c:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a8e:	0102      	lsls	r2, r0, #4
 8002a90:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8002a92:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002a94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a96:	438a      	bics	r2, r1
 8002a98:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9a:	2267      	movs	r2, #103	; 0x67
 8002a9c:	e7d3      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0xc6>
  tmpccer = TIMx->CCER;
 8002a9e:	6a1f      	ldr	r7, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa4:	43a2      	bics	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa6:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aac:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aae:	43a2      	bics	r2, r4
 8002ab0:	0014      	movs	r4, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ab2:	010a      	lsls	r2, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	438f      	bics	r7, r1
 8002ab8:	0039      	movs	r1, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aba:	4322      	orrs	r2, r4
  tmpccer |= TIM_ICPolarity;
 8002abc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac2:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002ac4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aca:	2247      	movs	r2, #71	; 0x47
 8002acc:	e7bb      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0xc6>
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	ffff0088 	.word	0xffff0088
 8002ad4:	ffff00ff 	.word	0xffff00ff
 8002ad8:	ffff0fff 	.word	0xffff0fff

08002adc <HAL_TIM_OC_DelayElapsedCallback>:
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_IC_CaptureCallback>:
 8002ade:	4770      	bx	lr

08002ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_TIM_TriggerCallback>:
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	6803      	ldr	r3, [r0, #0]
{
 8002ae8:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aea:	6919      	ldr	r1, [r3, #16]
{
 8002aec:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aee:	4211      	tst	r1, r2
 8002af0:	d00d      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af2:	68d9      	ldr	r1, [r3, #12]
 8002af4:	4211      	tst	r1, r2
 8002af6:	d00a      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af8:	3a05      	subs	r2, #5
 8002afa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afc:	3204      	adds	r2, #4
 8002afe:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	079b      	lsls	r3, r3, #30
 8002b04:	d05e      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	f7ff ffea 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b0e:	2204      	movs	r2, #4
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	6919      	ldr	r1, [r3, #16]
 8002b14:	4211      	tst	r1, r2
 8002b16:	d010      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	4211      	tst	r1, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1e:	3a09      	subs	r2, #9
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b22:	3207      	adds	r2, #7
 8002b24:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2e:	421a      	tst	r2, r3
 8002b30:	d04e      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	f7ff ffd4 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	2300      	movs	r3, #0
 8002b38:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	6919      	ldr	r1, [r3, #16]
 8002b40:	4211      	tst	r1, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b44:	68d9      	ldr	r1, [r3, #12]
 8002b46:	4211      	tst	r1, r2
 8002b48:	d00b      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b4a:	3a11      	subs	r2, #17
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4e:	320d      	adds	r2, #13
 8002b50:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b52:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002b54:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b56:	079b      	lsls	r3, r3, #30
 8002b58:	d040      	beq.n	8002bdc <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	f7ff ffc0 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b62:	2210      	movs	r2, #16
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	6919      	ldr	r1, [r3, #16]
 8002b68:	4211      	tst	r1, r2
 8002b6a:	d010      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b6c:	68d9      	ldr	r1, [r3, #12]
 8002b6e:	4211      	tst	r1, r2
 8002b70:	d00d      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b72:	3a21      	subs	r2, #33	; 0x21
 8002b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b76:	3219      	adds	r2, #25
 8002b78:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	23c0      	movs	r3, #192	; 0xc0
 8002b7e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002b80:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b82:	421a      	tst	r2, r3
 8002b84:	d030      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	f7ff ffaa 	bl	8002ade <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	6919      	ldr	r1, [r3, #16]
 8002b94:	4211      	tst	r1, r2
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b98:	68d9      	ldr	r1, [r3, #12]
 8002b9a:	4211      	tst	r1, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b9e:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba0:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ba4:	f7fe f8c0 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	4211      	tst	r1, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb2:	68d9      	ldr	r1, [r3, #12]
 8002bb4:	4211      	tst	r1, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb8:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8002bba:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bbe:	f7ff ff90 	bl	8002ae2 <HAL_TIM_TriggerCallback>
}
 8002bc2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc4:	f7ff ff8a 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	0020      	movs	r0, r4
 8002bca:	f7ff ff89 	bl	8002ae0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bce:	e79c      	b.n	8002b0a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd0:	f7ff ff84 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f7ff ff83 	bl	8002ae0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bda:	e7ac      	b.n	8002b36 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bdc:	f7ff ff7e 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	0020      	movs	r0, r4
 8002be2:	f7ff ff7d 	bl	8002ae0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002be6:	e7ba      	b.n	8002b5e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be8:	f7ff ff78 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	0020      	movs	r0, r4
 8002bee:	f7ff ff77 	bl	8002ae0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bf2:	e7ca      	b.n	8002b8a <HAL_TIM_IRQHandler+0xa6>

08002bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	0004      	movs	r4, r0
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	3438      	adds	r4, #56	; 0x38
 8002bfc:	7825      	ldrb	r5, [r4, #0]
{
 8002bfe:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002c00:	0010      	movs	r0, r2
 8002c02:	2d01      	cmp	r5, #1
 8002c04:	d01d      	beq.n	8002c42 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c06:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c08:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0a:	3539      	adds	r5, #57	; 0x39
 8002c0c:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002c12:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c16:	680e      	ldr	r6, [r1, #0]
 8002c18:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c1a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1c:	2080      	movs	r0, #128	; 0x80
 8002c1e:	05c0      	lsls	r0, r0, #23
 8002c20:	4283      	cmp	r3, r0
 8002c22:	d005      	beq.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002c24:	4807      	ldr	r0, [pc, #28]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002c26:	4283      	cmp	r3, r0
 8002c28:	d002      	beq.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002c2a:	4807      	ldr	r0, [pc, #28]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002c2c:	4283      	cmp	r3, r0
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c30:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c32:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c34:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c36:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002c3c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c3e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002c40:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	40010800 	.word	0x40010800
 8002c48:	40011400 	.word	0x40011400

08002c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c4c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c52:	2201      	movs	r2, #1
 8002c54:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c58:	6801      	ldr	r1, [r0, #0]
 8002c5a:	4d12      	ldr	r5, [pc, #72]	; (8002ca4 <UART_EndRxTransfer+0x58>)
 8002c5c:	680b      	ldr	r3, [r1, #0]
 8002c5e:	402b      	ands	r3, r5
 8002c60:	600b      	str	r3, [r1, #0]
 8002c62:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c66:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	6801      	ldr	r1, [r0, #0]
 8002c70:	688b      	ldr	r3, [r1, #8]
 8002c72:	4393      	bics	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
 8002c76:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10a      	bne.n	8002c96 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c80:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c88:	2410      	movs	r4, #16
 8002c8a:	6802      	ldr	r2, [r0, #0]
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	43a3      	bics	r3, r4
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c96:	2220      	movs	r2, #32
 8002c98:	1d03      	adds	r3, r0, #4
 8002c9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ca0:	6683      	str	r3, [r0, #104]	; 0x68
}
 8002ca2:	bd30      	pop	{r4, r5, pc}
 8002ca4:	fffffedf 	.word	0xfffffedf

08002ca8 <UART_SetConfig>:
{
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cac:	6925      	ldr	r5, [r4, #16]
 8002cae:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cb0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb2:	4329      	orrs	r1, r5
 8002cb4:	6965      	ldr	r5, [r4, #20]
 8002cb6:	69c3      	ldr	r3, [r0, #28]
 8002cb8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cba:	6810      	ldr	r0, [r2, #0]
 8002cbc:	4d6a      	ldr	r5, [pc, #424]	; (8002e68 <UART_SetConfig+0x1c0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cbe:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cc0:	4028      	ands	r0, r5
 8002cc2:	4301      	orrs	r1, r0
 8002cc4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc6:	6851      	ldr	r1, [r2, #4]
 8002cc8:	4868      	ldr	r0, [pc, #416]	; (8002e6c <UART_SetConfig+0x1c4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cca:	4d69      	ldr	r5, [pc, #420]	; (8002e70 <UART_SetConfig+0x1c8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ccc:	4001      	ands	r1, r0
 8002cce:	68e0      	ldr	r0, [r4, #12]
 8002cd0:	4301      	orrs	r1, r0
 8002cd2:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cd6:	42aa      	cmp	r2, r5
 8002cd8:	d001      	beq.n	8002cde <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8002cda:	6a21      	ldr	r1, [r4, #32]
 8002cdc:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cde:	6891      	ldr	r1, [r2, #8]
 8002ce0:	4e64      	ldr	r6, [pc, #400]	; (8002e74 <UART_SetConfig+0x1cc>)
 8002ce2:	4031      	ands	r1, r6
 8002ce4:	4301      	orrs	r1, r0
 8002ce6:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce8:	4963      	ldr	r1, [pc, #396]	; (8002e78 <UART_SetConfig+0x1d0>)
 8002cea:	428a      	cmp	r2, r1
 8002cec:	d113      	bne.n	8002d16 <UART_SetConfig+0x6e>
 8002cee:	200c      	movs	r0, #12
 8002cf0:	4a62      	ldr	r2, [pc, #392]	; (8002e7c <UART_SetConfig+0x1d4>)
 8002cf2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002cf4:	4001      	ands	r1, r0
 8002cf6:	4862      	ldr	r0, [pc, #392]	; (8002e80 <UART_SetConfig+0x1d8>)
 8002cf8:	5c40      	ldrb	r0, [r0, r1]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0209      	lsls	r1, r1, #8
 8002cfe:	428b      	cmp	r3, r1
 8002d00:	d000      	beq.n	8002d04 <UART_SetConfig+0x5c>
 8002d02:	e07f      	b.n	8002e04 <UART_SetConfig+0x15c>
    switch (clocksource)
 8002d04:	2808      	cmp	r0, #8
 8002d06:	d819      	bhi.n	8002d3c <UART_SetConfig+0x94>
 8002d08:	f7fd fa10 	bl	800012c <__gnu_thumb1_case_uqi>
 8002d0c:	18595651 	.word	0x18595651
 8002d10:	18181879 	.word	0x18181879
 8002d14:	63          	.byte	0x63
 8002d15:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d16:	42aa      	cmp	r2, r5
 8002d18:	d000      	beq.n	8002d1c <UART_SetConfig+0x74>
 8002d1a:	e09e      	b.n	8002e5a <UART_SetConfig+0x1b2>
 8002d1c:	21c0      	movs	r1, #192	; 0xc0
 8002d1e:	2080      	movs	r0, #128	; 0x80
 8002d20:	4a56      	ldr	r2, [pc, #344]	; (8002e7c <UART_SetConfig+0x1d4>)
 8002d22:	0109      	lsls	r1, r1, #4
 8002d24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002d26:	0100      	lsls	r0, r0, #4
 8002d28:	400b      	ands	r3, r1
 8002d2a:	4283      	cmp	r3, r0
 8002d2c:	d016      	beq.n	8002d5c <UART_SetConfig+0xb4>
 8002d2e:	d807      	bhi.n	8002d40 <UART_SetConfig+0x98>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <UART_SetConfig+0xa2>
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	00d2      	lsls	r2, r2, #3
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d035      	beq.n	8002da8 <UART_SetConfig+0x100>
    switch (clocksource)
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	e009      	b.n	8002d54 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d40:	428b      	cmp	r3, r1
 8002d42:	d1fb      	bne.n	8002d3c <UART_SetConfig+0x94>
 8002d44:	2080      	movs	r0, #128	; 0x80
 8002d46:	0200      	lsls	r0, r0, #8
 8002d48:	e012      	b.n	8002d70 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d4a:	f7ff fd53 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d10e      	bne.n	8002d70 <UART_SetConfig+0xc8>
 8002d52:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002d58:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	6810      	ldr	r0, [r2, #0]
 8002d60:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d62:	4243      	negs	r3, r0
 8002d64:	4158      	adcs	r0, r3
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <UART_SetConfig+0x1dc>)
 8002d68:	4240      	negs	r0, r0
 8002d6a:	4018      	ands	r0, r3
 8002d6c:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <UART_SetConfig+0x1e0>)
 8002d6e:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d70:	2203      	movs	r2, #3
 8002d72:	6863      	ldr	r3, [r4, #4]
 8002d74:	435a      	muls	r2, r3
 8002d76:	4282      	cmp	r2, r0
 8002d78:	d8e0      	bhi.n	8002d3c <UART_SetConfig+0x94>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d7a:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d7c:	4282      	cmp	r2, r0
 8002d7e:	d3dd      	bcc.n	8002d3c <UART_SetConfig+0x94>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d80:	2700      	movs	r7, #0
 8002d82:	0e02      	lsrs	r2, r0, #24
 8002d84:	0201      	lsls	r1, r0, #8
 8002d86:	085e      	lsrs	r6, r3, #1
 8002d88:	1989      	adds	r1, r1, r6
 8002d8a:	417a      	adcs	r2, r7
 8002d8c:	0008      	movs	r0, r1
 8002d8e:	0011      	movs	r1, r2
 8002d90:	001a      	movs	r2, r3
 8002d92:	003b      	movs	r3, r7
 8002d94:	f7fd fb78 	bl	8000488 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d98:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <UART_SetConfig+0x1e4>)
 8002d9a:	18c2      	adds	r2, r0, r3
 8002d9c:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <UART_SetConfig+0x1e8>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d8cc      	bhi.n	8002d3c <UART_SetConfig+0x94>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	60d8      	str	r0, [r3, #12]
 8002da6:	e7d4      	b.n	8002d52 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8002da8:	f7ff fcdc 	bl	8002764 <HAL_RCC_GetSysClockFreq>
        break;
 8002dac:	e7cf      	b.n	8002d4e <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dae:	f7ff fd21 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002db2:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002db4:	d0cd      	beq.n	8002d52 <UART_SetConfig+0xaa>
 8002db6:	e00c      	b.n	8002dd2 <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db8:	f7ff fd2c 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8002dbc:	e7f9      	b.n	8002db2 <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dc2:	4a31      	ldr	r2, [pc, #196]	; (8002e88 <UART_SetConfig+0x1e0>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc4:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dc6:	4243      	negs	r3, r0
 8002dc8:	4158      	adcs	r0, r3
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <UART_SetConfig+0x1dc>)
 8002dcc:	4240      	negs	r0, r0
 8002dce:	4003      	ands	r3, r0
 8002dd0:	189b      	adds	r3, r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dd2:	0058      	lsls	r0, r3, #1
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	6861      	ldr	r1, [r4, #4]
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	18c0      	adds	r0, r0, r3
 8002ddc:	f7fd f9ba 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de0:	0002      	movs	r2, r0
 8002de2:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <UART_SetConfig+0x1ec>)
 8002de4:	3a10      	subs	r2, #16
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d8a8      	bhi.n	8002d3c <UART_SetConfig+0x94>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dea:	230f      	movs	r3, #15
 8002dec:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dee:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002df0:	439a      	bics	r2, r3
 8002df2:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	4318      	orrs	r0, r3
 8002dfa:	60d0      	str	r0, [r2, #12]
 8002dfc:	e7a9      	b.n	8002d52 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfe:	f7ff fcb1 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002e02:	e7d6      	b.n	8002db2 <UART_SetConfig+0x10a>
    switch (clocksource)
 8002e04:	2808      	cmp	r0, #8
 8002e06:	d899      	bhi.n	8002d3c <UART_SetConfig+0x94>
 8002e08:	f7fd f986 	bl	8000118 <__gnu_thumb1_case_sqi>
 8002e0c:	980d0a05 	.word	0x980d0a05
 8002e10:	98989821 	.word	0x98989821
 8002e14:	24          	.byte	0x24
 8002e15:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e16:	f7ff fced 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d099      	beq.n	8002d52 <UART_SetConfig+0xaa>
 8002e1e:	e00c      	b.n	8002e3a <UART_SetConfig+0x192>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e20:	f7ff fcf8 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
        break;
 8002e24:	e7f9      	b.n	8002e1a <UART_SetConfig+0x172>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e26:	2310      	movs	r3, #16
 8002e28:	6810      	ldr	r0, [r2, #0]
 8002e2a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e2c:	4243      	negs	r3, r0
 8002e2e:	4158      	adcs	r0, r3
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <UART_SetConfig+0x1dc>)
 8002e32:	4240      	negs	r0, r0
 8002e34:	4018      	ands	r0, r3
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <UART_SetConfig+0x1e0>)
 8002e38:	18c0      	adds	r0, r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e3a:	6863      	ldr	r3, [r4, #4]
 8002e3c:	6861      	ldr	r1, [r4, #4]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	1818      	adds	r0, r3, r0
 8002e42:	f7fd f987 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e46:	0002      	movs	r2, r0
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <UART_SetConfig+0x1ec>)
 8002e4a:	3a10      	subs	r2, #16
 8002e4c:	e7a7      	b.n	8002d9e <UART_SetConfig+0xf6>
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7ff fc89 	bl	8002764 <HAL_RCC_GetSysClockFreq>
        break;
 8002e52:	e7e2      	b.n	8002e1a <UART_SetConfig+0x172>
    switch (clocksource)
 8002e54:	2080      	movs	r0, #128	; 0x80
 8002e56:	0200      	lsls	r0, r0, #8
 8002e58:	e7ef      	b.n	8002e3a <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	0212      	lsls	r2, r2, #8
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d100      	bne.n	8002e66 <UART_SetConfig+0x1be>
 8002e64:	e776      	b.n	8002d54 <UART_SetConfig+0xac>
 8002e66:	e769      	b.n	8002d3c <UART_SetConfig+0x94>
 8002e68:	efff69f3 	.word	0xefff69f3
 8002e6c:	ffffcfff 	.word	0xffffcfff
 8002e70:	40004800 	.word	0x40004800
 8002e74:	fffff4ff 	.word	0xfffff4ff
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08003e6b 	.word	0x08003e6b
 8002e84:	00b71b00 	.word	0x00b71b00
 8002e88:	003d0900 	.word	0x003d0900
 8002e8c:	fffffd00 	.word	0xfffffd00
 8002e90:	000ffcff 	.word	0x000ffcff
 8002e94:	0000ffef 	.word	0x0000ffef

08002e98 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e98:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002e9a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e9c:	07da      	lsls	r2, r3, #31
 8002e9e:	d506      	bpl.n	8002eae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ea0:	6801      	ldr	r1, [r0, #0]
 8002ea2:	4c28      	ldr	r4, [pc, #160]	; (8002f44 <UART_AdvFeatureConfig+0xac>)
 8002ea4:	684a      	ldr	r2, [r1, #4]
 8002ea6:	4022      	ands	r2, r4
 8002ea8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002eaa:	4322      	orrs	r2, r4
 8002eac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eae:	079a      	lsls	r2, r3, #30
 8002eb0:	d506      	bpl.n	8002ec0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	4c24      	ldr	r4, [pc, #144]	; (8002f48 <UART_AdvFeatureConfig+0xb0>)
 8002eb6:	684a      	ldr	r2, [r1, #4]
 8002eb8:	4022      	ands	r2, r4
 8002eba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002ebc:	4322      	orrs	r2, r4
 8002ebe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec0:	075a      	lsls	r2, r3, #29
 8002ec2:	d506      	bpl.n	8002ed2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec4:	6801      	ldr	r1, [r0, #0]
 8002ec6:	4c21      	ldr	r4, [pc, #132]	; (8002f4c <UART_AdvFeatureConfig+0xb4>)
 8002ec8:	684a      	ldr	r2, [r1, #4]
 8002eca:	4022      	ands	r2, r4
 8002ecc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ece:	4322      	orrs	r2, r4
 8002ed0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ed2:	071a      	lsls	r2, r3, #28
 8002ed4:	d506      	bpl.n	8002ee4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed6:	6801      	ldr	r1, [r0, #0]
 8002ed8:	4c1d      	ldr	r4, [pc, #116]	; (8002f50 <UART_AdvFeatureConfig+0xb8>)
 8002eda:	684a      	ldr	r2, [r1, #4]
 8002edc:	4022      	ands	r2, r4
 8002ede:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ee0:	4322      	orrs	r2, r4
 8002ee2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee4:	06da      	lsls	r2, r3, #27
 8002ee6:	d506      	bpl.n	8002ef6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee8:	6801      	ldr	r1, [r0, #0]
 8002eea:	4c1a      	ldr	r4, [pc, #104]	; (8002f54 <UART_AdvFeatureConfig+0xbc>)
 8002eec:	688a      	ldr	r2, [r1, #8]
 8002eee:	4022      	ands	r2, r4
 8002ef0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002ef2:	4322      	orrs	r2, r4
 8002ef4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ef6:	069a      	lsls	r2, r3, #26
 8002ef8:	d506      	bpl.n	8002f08 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002efa:	6801      	ldr	r1, [r0, #0]
 8002efc:	4c16      	ldr	r4, [pc, #88]	; (8002f58 <UART_AdvFeatureConfig+0xc0>)
 8002efe:	688a      	ldr	r2, [r1, #8]
 8002f00:	4022      	ands	r2, r4
 8002f02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002f04:	4322      	orrs	r2, r4
 8002f06:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f08:	065a      	lsls	r2, r3, #25
 8002f0a:	d510      	bpl.n	8002f2e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f0c:	6801      	ldr	r1, [r0, #0]
 8002f0e:	4d13      	ldr	r5, [pc, #76]	; (8002f5c <UART_AdvFeatureConfig+0xc4>)
 8002f10:	684a      	ldr	r2, [r1, #4]
 8002f12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002f14:	402a      	ands	r2, r5
 8002f16:	4322      	orrs	r2, r4
 8002f18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f1a:	2280      	movs	r2, #128	; 0x80
 8002f1c:	0352      	lsls	r2, r2, #13
 8002f1e:	4294      	cmp	r4, r2
 8002f20:	d105      	bne.n	8002f2e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f22:	684a      	ldr	r2, [r1, #4]
 8002f24:	4c0e      	ldr	r4, [pc, #56]	; (8002f60 <UART_AdvFeatureConfig+0xc8>)
 8002f26:	4022      	ands	r2, r4
 8002f28:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002f2a:	4322      	orrs	r2, r4
 8002f2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	d506      	bpl.n	8002f40 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f32:	6802      	ldr	r2, [r0, #0]
 8002f34:	490b      	ldr	r1, [pc, #44]	; (8002f64 <UART_AdvFeatureConfig+0xcc>)
 8002f36:	6853      	ldr	r3, [r2, #4]
 8002f38:	400b      	ands	r3, r1
 8002f3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6053      	str	r3, [r2, #4]
}
 8002f40:	bd30      	pop	{r4, r5, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	fffdffff 	.word	0xfffdffff
 8002f48:	fffeffff 	.word	0xfffeffff
 8002f4c:	fffbffff 	.word	0xfffbffff
 8002f50:	ffff7fff 	.word	0xffff7fff
 8002f54:	ffffefff 	.word	0xffffefff
 8002f58:	ffffdfff 	.word	0xffffdfff
 8002f5c:	ffefffff 	.word	0xffefffff
 8002f60:	ff9fffff 	.word	0xff9fffff
 8002f64:	fff7ffff 	.word	0xfff7ffff

08002f68 <UART_WaitOnFlagUntilTimeout>:
{
 8002f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f6a:	0004      	movs	r4, r0
 8002f6c:	000d      	movs	r5, r1
 8002f6e:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f70:	2608      	movs	r6, #8
{
 8002f72:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	69d3      	ldr	r3, [r2, #28]
 8002f78:	402b      	ands	r3, r5
 8002f7a:	1b5b      	subs	r3, r3, r5
 8002f7c:	4259      	negs	r1, r3
 8002f7e:	414b      	adcs	r3, r1
 8002f80:	42bb      	cmp	r3, r7
 8002f82:	d001      	beq.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8002f84:	2000      	movs	r0, #0
 8002f86:	e021      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	9b08      	ldr	r3, [sp, #32]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	d0f3      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe ff2b 	bl	8001de8 <HAL_GetTick>
 8002f92:	9b00      	ldr	r3, [sp, #0]
 8002f94:	1ac0      	subs	r0, r0, r3
 8002f96:	9b08      	ldr	r3, [sp, #32]
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	d828      	bhi.n	8002fee <UART_WaitOnFlagUntilTimeout+0x86>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d026      	beq.n	8002fee <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	420a      	tst	r2, r1
 8002fa8:	d0e4      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	0011      	movs	r1, r2
 8002fae:	4031      	ands	r1, r6
 8002fb0:	9101      	str	r1, [sp, #4]
 8002fb2:	4232      	tst	r2, r6
 8002fb4:	d00b      	beq.n	8002fce <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002fb6:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fb8:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8002fba:	f7ff fe47 	bl	8002c4c <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fbe:	0023      	movs	r3, r4
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002fc4:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002fc8:	3478      	adds	r4, #120	; 0x78
 8002fca:	7023      	strb	r3, [r4, #0]
}
 8002fcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	69d9      	ldr	r1, [r3, #28]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	4211      	tst	r1, r2
 8002fd6:	d0cd      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002fda:	0020      	movs	r0, r4
 8002fdc:	f7ff fe36 	bl	8002c4c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe0:	0023      	movs	r3, r4
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002fe8:	9b01      	ldr	r3, [sp, #4]
 8002fea:	3478      	adds	r4, #120	; 0x78
 8002fec:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002fee:	2003      	movs	r0, #3
 8002ff0:	e7ec      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x64>

08002ff2 <HAL_UART_Transmit>:
{
 8002ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002ffa:	0004      	movs	r4, r0
 8002ffc:	000d      	movs	r5, r1
 8002ffe:	0016      	movs	r6, r2
    return HAL_BUSY;
 8003000:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003002:	2b20      	cmp	r3, #32
 8003004:	d139      	bne.n	800307a <HAL_UART_Transmit+0x88>
      return  HAL_ERROR;
 8003006:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003008:	2900      	cmp	r1, #0
 800300a:	d036      	beq.n	800307a <HAL_UART_Transmit+0x88>
 800300c:	2a00      	cmp	r2, #0
 800300e:	d034      	beq.n	800307a <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	68a2      	ldr	r2, [r4, #8]
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	429a      	cmp	r2, r3
 8003018:	d104      	bne.n	8003024 <HAL_UART_Transmit+0x32>
 800301a:	6923      	ldr	r3, [r4, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003020:	4201      	tst	r1, r0
 8003022:	d12a      	bne.n	800307a <HAL_UART_Transmit+0x88>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	0023      	movs	r3, r4
 8003026:	2200      	movs	r2, #0
 8003028:	3308      	adds	r3, #8
 800302a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302c:	2321      	movs	r3, #33	; 0x21
 800302e:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8003030:	f7fe feda 	bl	8001de8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8003034:	0023      	movs	r3, r4
 8003036:	3350      	adds	r3, #80	; 0x50
 8003038:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800303a:	3302      	adds	r3, #2
 800303c:	801e      	strh	r6, [r3, #0]
 800303e:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8003044:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8003046:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	429a      	cmp	r2, r3
 800304c:	d104      	bne.n	8003058 <HAL_UART_Transmit+0x66>
 800304e:	6923      	ldr	r3, [r4, #16]
 8003050:	42b3      	cmp	r3, r6
 8003052:	d101      	bne.n	8003058 <HAL_UART_Transmit+0x66>
 8003054:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8003056:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8003058:	0023      	movs	r3, r4
 800305a:	3352      	adds	r3, #82	; 0x52
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29a      	uxth	r2, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10c      	bne.n	800307e <HAL_UART_Transmit+0x8c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	2140      	movs	r1, #64	; 0x40
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	0020      	movs	r0, r4
 800306c:	003b      	movs	r3, r7
 800306e:	f7ff ff7b 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 8003072:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8003074:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	2800      	cmp	r0, #0
 8003078:	d10d      	bne.n	8003096 <HAL_UART_Transmit+0xa4>
}
 800307a:	b005      	add	sp, #20
 800307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	9b03      	ldr	r3, [sp, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2180      	movs	r1, #128	; 0x80
 8003086:	003b      	movs	r3, r7
 8003088:	0020      	movs	r0, r4
 800308a:	f7ff ff6d 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 800308e:	2800      	cmp	r0, #0
 8003090:	d003      	beq.n	800309a <HAL_UART_Transmit+0xa8>
        huart->gState = HAL_UART_STATE_READY;
 8003092:	2320      	movs	r3, #32
 8003094:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003096:	2003      	movs	r0, #3
 8003098:	e7ef      	b.n	800307a <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800309a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800309c:	2d00      	cmp	r5, #0
 800309e:	d10b      	bne.n	80030b8 <HAL_UART_Transmit+0xc6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a0:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80030a2:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	0ddb      	lsrs	r3, r3, #23
 80030a8:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80030aa:	9b02      	ldr	r3, [sp, #8]
 80030ac:	9a02      	ldr	r2, [sp, #8]
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8013      	strh	r3, [r2, #0]
 80030b6:	e7cf      	b.n	8003058 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b8:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80030ba:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030bc:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80030be:	e7f4      	b.n	80030aa <HAL_UART_Transmit+0xb8>

080030c0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	0003      	movs	r3, r0
{
 80030c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	2500      	movs	r5, #0
{
 80030c6:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	3308      	adds	r3, #8
 80030ca:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80030cc:	f7fe fe8c 	bl	8001de8 <HAL_GetTick>
 80030d0:	0026      	movs	r6, r4
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80030d4:	0007      	movs	r7, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3678      	adds	r6, #120	; 0x78
 80030da:	071b      	lsls	r3, r3, #28
 80030dc:	d51b      	bpl.n	8003116 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	4b26      	ldr	r3, [pc, #152]	; (800317c <UART_CheckIdleState+0xbc>)
 80030e2:	002a      	movs	r2, r5
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	0389      	lsls	r1, r1, #14
 80030e8:	0003      	movs	r3, r0
 80030ea:	0020      	movs	r0, r4
 80030ec:	f7ff ff3c 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 80030f0:	42a8      	cmp	r0, r5
 80030f2:	d010      	beq.n	8003116 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	2301      	movs	r3, #1
 80030fa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030fe:	2080      	movs	r0, #128	; 0x80
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	4383      	bics	r3, r0
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800310c:	2320      	movs	r3, #32
 800310e:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003110:	7035      	strb	r5, [r6, #0]
      return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
}
 8003114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003116:	0025      	movs	r5, r4
 8003118:	cd08      	ldmia	r5!, {r3}
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	075b      	lsls	r3, r3, #29
 800311e:	d525      	bpl.n	800316c <UART_CheckIdleState+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <UART_CheckIdleState+0xbc>)
 8003124:	2200      	movs	r2, #0
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	0020      	movs	r0, r4
 800312a:	003b      	movs	r3, r7
 800312c:	03c9      	lsls	r1, r1, #15
 800312e:	f7ff ff1b 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 8003132:	2800      	cmp	r0, #0
 8003134:	d01a      	beq.n	800316c <UART_CheckIdleState+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003136:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	2201      	movs	r2, #1
 800313c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003140:	6821      	ldr	r1, [r4, #0]
 8003142:	4f0f      	ldr	r7, [pc, #60]	; (8003180 <UART_CheckIdleState+0xc0>)
 8003144:	680b      	ldr	r3, [r1, #0]
 8003146:	403b      	ands	r3, r7
 8003148:	600b      	str	r3, [r1, #0]
 800314a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	6821      	ldr	r1, [r4, #0]
 8003158:	688b      	ldr	r3, [r1, #8]
 800315a:	4393      	bics	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
 800315e:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003162:	2320      	movs	r3, #32
 8003164:	67eb      	str	r3, [r5, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003166:	2300      	movs	r3, #0
 8003168:	7033      	strb	r3, [r6, #0]
 800316a:	e7d2      	b.n	8003112 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800316e:	2320      	movs	r3, #32
 8003170:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003172:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003174:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003176:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003178:	7030      	strb	r0, [r6, #0]
  return HAL_OK;
 800317a:	e7cb      	b.n	8003114 <UART_CheckIdleState+0x54>
 800317c:	01ffffff 	.word	0x01ffffff
 8003180:	fffffedf 	.word	0xfffffedf

08003184 <HAL_UART_Init>:
{
 8003184:	b510      	push	{r4, lr}
 8003186:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800318a:	2001      	movs	r0, #1
}
 800318c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800318e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003194:	0002      	movs	r2, r0
 8003196:	3278      	adds	r2, #120	; 0x78
 8003198:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800319a:	f7fd fdfd 	bl	8000d98 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800319e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80031a0:	2101      	movs	r1, #1
 80031a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80031a6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80031aa:	438b      	bics	r3, r1
 80031ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ae:	f7ff fd7b 	bl	8002ca8 <UART_SetConfig>
 80031b2:	2801      	cmp	r0, #1
 80031b4:	d0e9      	beq.n	800318a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80031bc:	0020      	movs	r0, r4
 80031be:	f7ff fe6b 	bl	8002e98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	4907      	ldr	r1, [pc, #28]	; (80031e4 <HAL_UART_Init+0x60>)
 80031c6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80031c8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031cc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	438a      	bics	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031d6:	2201      	movs	r2, #1
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80031de:	f7ff ff6f 	bl	80030c0 <UART_CheckIdleState>
 80031e2:	e7d3      	b.n	800318c <HAL_UART_Init+0x8>
 80031e4:	ffffb7ff 	.word	0xffffb7ff

080031e8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <LL_SetSystemCoreClock+0x8>)
 80031ea:	6018      	str	r0, [r3, #0]
}
 80031ec:	4770      	bx	lr
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000000 	.word	0x20000000

080031f4 <bme68x_delay_us>:
void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
	(void)intf_ptr;

	// Check if time is over 16 bit, timer has only 16 bit
	if (period > 60000)
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <bme68x_delay_us+0x34>)
{
 80031f6:	b510      	push	{r4, lr}
 80031f8:	0004      	movs	r4, r0
	if (period > 60000)
 80031fa:	4298      	cmp	r0, r3
 80031fc:	d90b      	bls.n	8003216 <bme68x_delay_us+0x22>
	{
		// Transfer us -> ms and use HAL function to wait
		uint32_t period_ms = (period / 1000);
 80031fe:	21fa      	movs	r1, #250	; 0xfa
 8003200:	0089      	lsls	r1, r1, #2
 8003202:	f7fc ffa7 	bl	8000154 <__udivsi3>
		HAL_Delay(period_ms);
 8003206:	f7fe fdf5 	bl	8001df4 <HAL_Delay>

		// Calculate remaining us
		period -= period_ms * 1000;
 800320a:	21fa      	movs	r1, #250	; 0xfa
 800320c:	0020      	movs	r0, r4
 800320e:	0089      	lsls	r1, r1, #2
 8003210:	f7fd f826 	bl	8000260 <__aeabi_uidivmod>
 8003214:	000c      	movs	r4, r1
	}


	// set the counter value to 0
	__HAL_TIM_SET_COUNTER(&htim22,0);
 8003216:	2200      	movs	r2, #0
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <bme68x_delay_us+0x38>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
	// wait for the counter to reach the us input in the parameter
	while (__HAL_TIM_GET_COUNTER(&htim22) < period);
 800321e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003220:	42a2      	cmp	r2, r4
 8003222:	d3fc      	bcc.n	800321e <bme68x_delay_us+0x2a>

}
 8003224:	bd10      	pop	{r4, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	0000ea60 	.word	0x0000ea60
 800322c:	20000124 	.word	0x20000124

08003230 <bme68x_i2c_read>:
{
 8003230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003232:	000c      	movs	r4, r1
    ret = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(device_addr<<1), (uint16_t)reg_addr,
 8003234:	7819      	ldrb	r1, [r3, #0]
 8003236:	2364      	movs	r3, #100	; 0x64
 8003238:	b292      	uxth	r2, r2
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	0049      	lsls	r1, r1, #1
 8003240:	0002      	movs	r2, r0
 8003242:	9400      	str	r4, [sp, #0]
 8003244:	3b63      	subs	r3, #99	; 0x63
 8003246:	4803      	ldr	r0, [pc, #12]	; (8003254 <bme68x_i2c_read+0x24>)
 8003248:	f7ff f960 	bl	800250c <HAL_I2C_Mem_Read>
    return ret;
 800324c:	b240      	sxtb	r0, r0
}
 800324e:	b004      	add	sp, #16
 8003250:	bd10      	pop	{r4, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	2000008c 	.word	0x2000008c

08003258 <bme68x_i2c_write>:
{
 8003258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800325a:	000c      	movs	r4, r1
    ret = HAL_I2C_Mem_Write(&hi2c1, (uint16_t)(device_addr<<1), (uint16_t)reg_addr,
 800325c:	7819      	ldrb	r1, [r3, #0]
 800325e:	2364      	movs	r3, #100	; 0x64
 8003260:	b292      	uxth	r2, r2
 8003262:	9302      	str	r3, [sp, #8]
 8003264:	9201      	str	r2, [sp, #4]
 8003266:	0049      	lsls	r1, r1, #1
 8003268:	0002      	movs	r2, r0
 800326a:	9400      	str	r4, [sp, #0]
 800326c:	3b63      	subs	r3, #99	; 0x63
 800326e:	4803      	ldr	r0, [pc, #12]	; (800327c <bme68x_i2c_write+0x24>)
 8003270:	f7ff f86e 	bl	8002350 <HAL_I2C_Mem_Write>
    return ret;
 8003274:	b240      	sxtb	r0, r0
}
 8003276:	b004      	add	sp, #16
 8003278:	bd10      	pop	{r4, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	2000008c 	.word	0x2000008c

08003280 <user_init_bme>:
	dev_addr = BME68X_I2C_ADDR_HIGH;
 8003280:	2277      	movs	r2, #119	; 0x77
{
 8003282:	b5f0      	push	{r4, r5, r6, r7, lr}
	dev_addr = BME68X_I2C_ADDR_HIGH;
 8003284:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <user_init_bme+0xf8>)
	bme.read = bme68x_i2c_read;
 8003286:	4c3d      	ldr	r4, [pc, #244]	; (800337c <user_init_bme+0xfc>)
	bme.intf = BME68X_I2C_INTF;
 8003288:	2501      	movs	r5, #1
	dev_addr = BME68X_I2C_ADDR_HIGH;
 800328a:	701a      	strb	r2, [r3, #0]
	bme.intf_ptr = &dev_addr;
 800328c:	6063      	str	r3, [r4, #4]
	bme.amb_temp = 20; /* The ambient temperature in deg C is used for defining the heater temperature */
 800328e:	2314      	movs	r3, #20
	bme.read = bme68x_i2c_read;
 8003290:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <user_init_bme+0x100>)
{
 8003292:	b095      	sub	sp, #84	; 0x54
	bme.read = bme68x_i2c_read;
 8003294:	6422      	str	r2, [r4, #64]	; 0x40
	bme.write = bme68x_i2c_write;
 8003296:	4a3b      	ldr	r2, [pc, #236]	; (8003384 <user_init_bme+0x104>)
    rslt = bme68x_init(&bme);
 8003298:	0020      	movs	r0, r4
	bme.write = bme68x_i2c_write;
 800329a:	6462      	str	r2, [r4, #68]	; 0x44
	bme.delay_us = bme68x_delay_us;
 800329c:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <user_init_bme+0x108>)
	bme.amb_temp = 20; /* The ambient temperature in deg C is used for defining the heater temperature */
 800329e:	73a3      	strb	r3, [r4, #14]
	bme.delay_us = bme68x_delay_us;
 80032a0:	64a2      	str	r2, [r4, #72]	; 0x48
	bme.intf = BME68X_I2C_INTF;
 80032a2:	7325      	strb	r5, [r4, #12]
    rslt = bme68x_init(&bme);
 80032a4:	f7fe f85e 	bl	8001364 <bme68x_init>
 80032a8:	0001      	movs	r1, r0
    debug_print("API Init: %d\r\n",rslt);
 80032aa:	4838      	ldr	r0, [pc, #224]	; (800338c <user_init_bme+0x10c>)
 80032ac:	f000 f872 	bl	8003394 <debug_print>
    conf.filter = BME68X_FILTER_OFF;
 80032b0:	2300      	movs	r3, #0
 80032b2:	a808      	add	r0, sp, #32
 80032b4:	70c3      	strb	r3, [r0, #3]
    conf.odr = BME68X_ODR_NONE;
 80032b6:	3308      	adds	r3, #8
 80032b8:	7103      	strb	r3, [r0, #4]
    conf.os_hum = BME68X_OS_16X;
 80032ba:	3b03      	subs	r3, #3
    rslt = bme68x_set_conf(&conf, &bme);
 80032bc:	0021      	movs	r1, r4
    conf.os_hum = BME68X_OS_16X;
 80032be:	7003      	strb	r3, [r0, #0]
    conf.os_temp = BME68X_OS_2X;
 80032c0:	3b03      	subs	r3, #3
 80032c2:	7043      	strb	r3, [r0, #1]
    conf.os_pres = BME68X_OS_1X;
 80032c4:	7085      	strb	r5, [r0, #2]
    rslt = bme68x_set_conf(&conf, &bme);
 80032c6:	f7fe f939 	bl	800153c <bme68x_set_conf>
    heatr_conf.heatr_temp = 300;
 80032ca:	2396      	movs	r3, #150	; 0x96
    heatr_conf.enable = BME68X_ENABLE;
 80032cc:	a90a      	add	r1, sp, #40	; 0x28
    heatr_conf.heatr_temp = 300;
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	804b      	strh	r3, [r1, #2]
    rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80032d2:	0022      	movs	r2, r4
    heatr_conf.heatr_dur = 100;
 80032d4:	3bc8      	subs	r3, #200	; 0xc8
    rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80032d6:	0028      	movs	r0, r5
    heatr_conf.enable = BME68X_ENABLE;
 80032d8:	700d      	strb	r5, [r1, #0]
    heatr_conf.heatr_dur = 100;
 80032da:	808b      	strh	r3, [r1, #4]
            rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80032dc:	002e      	movs	r6, r5
    rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80032de:	f7fe fbff 	bl	8001ae0 <bme68x_set_heatr_conf>
            rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 80032e2:	0021      	movs	r1, r4
 80032e4:	0030      	movs	r0, r6
 80032e6:	f7fe f8d7 	bl	8001498 <bme68x_set_op_mode>
            del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme) + (heatr_conf.heatr_dur * 1000);
 80032ea:	0022      	movs	r2, r4
 80032ec:	a908      	add	r1, sp, #32
 80032ee:	0030      	movs	r0, r6
 80032f0:	f7fe f9bc 	bl	800166c <bme68x_get_meas_dur>
 80032f4:	22fa      	movs	r2, #250	; 0xfa
 80032f6:	ab0a      	add	r3, sp, #40	; 0x28
 80032f8:	889b      	ldrh	r3, [r3, #4]
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4353      	muls	r3, r2
            bme.delay_us(del_period, bme.intf_ptr);
 80032fe:	6861      	ldr	r1, [r4, #4]
            del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme) + (heatr_conf.heatr_dur * 1000);
 8003300:	1818      	adds	r0, r3, r0
            rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 8003302:	2717      	movs	r7, #23
            bme.delay_us(del_period, bme.intf_ptr);
 8003304:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003306:	4798      	blx	r3
            time_ms = HAL_GetTick();
 8003308:	f7fe fd6e 	bl	8001de8 <HAL_GetTick>
            rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 800330c:	ab02      	add	r3, sp, #8
 800330e:	18ff      	adds	r7, r7, r3
            time_ms = HAL_GetTick();
 8003310:	9004      	str	r0, [sp, #16]
            rslt = bme68x_get_data(BME68X_FORCED_MODE, &data, &n_fields, &bme);
 8003312:	0023      	movs	r3, r4
 8003314:	003a      	movs	r2, r7
 8003316:	0030      	movs	r0, r6
 8003318:	a90f      	add	r1, sp, #60	; 0x3c
 800331a:	f7fe f9e5 	bl	80016e8 <bme68x_get_data>
            if(n_fields)
 800331e:	783b      	ldrb	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01f      	beq.n	8003364 <user_init_bme+0xe4>
            	debug_print("Sample: %u, Time: %lu, Temp: %d, Pres: %lu, Hum: %lu, Gas: %lu, Stat: 0x%x\r\n",
 8003324:	ab02      	add	r3, sp, #8
 8003326:	203a      	movs	r0, #58	; 0x3a
 8003328:	5e18      	ldrsh	r0, [r3, r0]
 800332a:	2164      	movs	r1, #100	; 0x64
 800332c:	f7fc ff9c 	bl	8000268 <__divsi3>
 8003330:	2234      	movs	r2, #52	; 0x34
 8003332:	21fa      	movs	r1, #250	; 0xfa
 8003334:	ab02      	add	r3, sp, #8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b207      	sxth	r7, r0
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003340:	0089      	lsls	r1, r1, #2
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003346:	0018      	movs	r0, r3
 8003348:	9305      	str	r3, [sp, #20]
 800334a:	f7fc ff03 	bl	8000154 <__udivsi3>
 800334e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003350:	0029      	movs	r1, r5
 8003352:	9001      	str	r0, [sp, #4]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	9a04      	ldr	r2, [sp, #16]
 8003358:	003b      	movs	r3, r7
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <user_init_bme+0x110>)
 800335c:	f000 f81a 	bl	8003394 <debug_print>
                sample_count++;
 8003360:	3501      	adds	r5, #1
 8003362:	b2ad      	uxth	r5, r5
            HAL_Delay(100);
 8003364:	2064      	movs	r0, #100	; 0x64
 8003366:	f7fe fd45 	bl	8001df4 <HAL_Delay>
    while (sample_count <= 300)
 800336a:	232e      	movs	r3, #46	; 0x2e
 800336c:	33ff      	adds	r3, #255	; 0xff
 800336e:	429d      	cmp	r5, r3
 8003370:	d1b7      	bne.n	80032e2 <user_init_bme+0x62>
}
 8003372:	2000      	movs	r0, #0
 8003374:	b015      	add	sp, #84	; 0x54
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003378:	20000240 	.word	0x20000240
 800337c:	200001f0 	.word	0x200001f0
 8003380:	08003231 	.word	0x08003231
 8003384:	08003259 	.word	0x08003259
 8003388:	080031f5 	.word	0x080031f5
 800338c:	08003e78 	.word	0x08003e78
 8003390:	08003e87 	.word	0x08003e87

08003394 <debug_print>:
#include <string.h>
#include <stdarg.h>
#include <stdio.h>

void debug_print(const char *format, ...)
{
 8003394:	b40f      	push	{r0, r1, r2, r3}
    char buffer[256]; // Adjust the buffer size as needed
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
 8003396:	2180      	movs	r1, #128	; 0x80
{
 8003398:	b500      	push	{lr}
 800339a:	b0c3      	sub	sp, #268	; 0x10c
 800339c:	ab44      	add	r3, sp, #272	; 0x110
 800339e:	cb04      	ldmia	r3!, {r2}
    vsnprintf(buffer, sizeof(buffer), format, args);
 80033a0:	0049      	lsls	r1, r1, #1
 80033a2:	a802      	add	r0, sp, #8
    va_start(args, format);
 80033a4:	9301      	str	r3, [sp, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80033a6:	f000 f89b 	bl	80034e0 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80033aa:	a802      	add	r0, sp, #8
 80033ac:	f7fc feac 	bl	8000108 <strlen>
 80033b0:	2301      	movs	r3, #1
 80033b2:	b282      	uxth	r2, r0
 80033b4:	425b      	negs	r3, r3
 80033b6:	a902      	add	r1, sp, #8
 80033b8:	4803      	ldr	r0, [pc, #12]	; (80033c8 <debug_print+0x34>)
 80033ba:	f7ff fe1a 	bl	8002ff2 <HAL_UART_Transmit>
}
 80033be:	b043      	add	sp, #268	; 0x10c
 80033c0:	bc08      	pop	{r3}
 80033c2:	b004      	add	sp, #16
 80033c4:	4718      	bx	r3
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	20000164 	.word	0x20000164

080033cc <fw_main>:
#include "debug.h"
#include "main.h"
#include "tim.h"

void fw_main()
{
 80033cc:	b510      	push	{r4, lr}
	uint8_t rslt = 0;

	// Start Timer for cyclic actions
	HAL_TIM_Base_Start_IT(&htim21);
 80033ce:	480c      	ldr	r0, [pc, #48]	; (8003400 <fw_main+0x34>)
 80033d0:	f7ff faaa 	bl	8002928 <HAL_TIM_Base_Start_IT>

	// Start Timer for us delay function
	HAL_TIM_Base_Start(&htim22);
 80033d4:	480b      	ldr	r0, [pc, #44]	; (8003404 <fw_main+0x38>)
 80033d6:	f7ff fa7f 	bl	80028d8 <HAL_TIM_Base_Start>

	debug_print("Starting BME Init...\r\n");
 80033da:	480b      	ldr	r0, [pc, #44]	; (8003408 <fw_main+0x3c>)
 80033dc:	f7ff ffda 	bl	8003394 <debug_print>

	// Init BME
	rslt = user_init_bme();
 80033e0:	f7ff ff4e 	bl	8003280 <user_init_bme>

	while(1)
	{
		// Blinky
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		HAL_Delay(1000);
 80033e4:	24fa      	movs	r4, #250	; 0xfa
	rslt = user_init_bme();
 80033e6:	0001      	movs	r1, r0
	debug_print("BME Initialized with return %d\r\n", rslt);
 80033e8:	4808      	ldr	r0, [pc, #32]	; (800340c <fw_main+0x40>)
 80033ea:	f7ff ffd3 	bl	8003394 <debug_print>
		HAL_Delay(1000);
 80033ee:	00a4      	lsls	r4, r4, #2
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80033f0:	2108      	movs	r1, #8
 80033f2:	4807      	ldr	r0, [pc, #28]	; (8003410 <fw_main+0x44>)
 80033f4:	f7fe fe1e 	bl	8002034 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80033f8:	0020      	movs	r0, r4
 80033fa:	f7fe fcfb 	bl	8001df4 <HAL_Delay>
	while(1)
 80033fe:	e7f7      	b.n	80033f0 <fw_main+0x24>
 8003400:	200000e4 	.word	0x200000e4
 8003404:	20000124 	.word	0x20000124
 8003408:	08003ed4 	.word	0x08003ed4
 800340c:	08003eeb 	.word	0x08003eeb
 8003410:	50000400 	.word	0x50000400

08003414 <__errno>:
 8003414:	4b01      	ldr	r3, [pc, #4]	; (800341c <__errno+0x8>)
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	4770      	bx	lr
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	2000000c 	.word	0x2000000c

08003420 <__libc_init_array>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	2600      	movs	r6, #0
 8003424:	4d0c      	ldr	r5, [pc, #48]	; (8003458 <__libc_init_array+0x38>)
 8003426:	4c0d      	ldr	r4, [pc, #52]	; (800345c <__libc_init_array+0x3c>)
 8003428:	1b64      	subs	r4, r4, r5
 800342a:	10a4      	asrs	r4, r4, #2
 800342c:	42a6      	cmp	r6, r4
 800342e:	d109      	bne.n	8003444 <__libc_init_array+0x24>
 8003430:	2600      	movs	r6, #0
 8003432:	f000 fca1 	bl	8003d78 <_init>
 8003436:	4d0a      	ldr	r5, [pc, #40]	; (8003460 <__libc_init_array+0x40>)
 8003438:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <__libc_init_array+0x44>)
 800343a:	1b64      	subs	r4, r4, r5
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	42a6      	cmp	r6, r4
 8003440:	d105      	bne.n	800344e <__libc_init_array+0x2e>
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	00b3      	lsls	r3, r6, #2
 8003446:	58eb      	ldr	r3, [r5, r3]
 8003448:	4798      	blx	r3
 800344a:	3601      	adds	r6, #1
 800344c:	e7ee      	b.n	800342c <__libc_init_array+0xc>
 800344e:	00b3      	lsls	r3, r6, #2
 8003450:	58eb      	ldr	r3, [r5, r3]
 8003452:	4798      	blx	r3
 8003454:	3601      	adds	r6, #1
 8003456:	e7f2      	b.n	800343e <__libc_init_array+0x1e>
 8003458:	08003f48 	.word	0x08003f48
 800345c:	08003f48 	.word	0x08003f48
 8003460:	08003f48 	.word	0x08003f48
 8003464:	08003f4c 	.word	0x08003f4c

08003468 <memcpy>:
 8003468:	2300      	movs	r3, #0
 800346a:	b510      	push	{r4, lr}
 800346c:	429a      	cmp	r2, r3
 800346e:	d100      	bne.n	8003472 <memcpy+0xa>
 8003470:	bd10      	pop	{r4, pc}
 8003472:	5ccc      	ldrb	r4, [r1, r3]
 8003474:	54c4      	strb	r4, [r0, r3]
 8003476:	3301      	adds	r3, #1
 8003478:	e7f8      	b.n	800346c <memcpy+0x4>

0800347a <memset>:
 800347a:	0003      	movs	r3, r0
 800347c:	1882      	adds	r2, r0, r2
 800347e:	4293      	cmp	r3, r2
 8003480:	d100      	bne.n	8003484 <memset+0xa>
 8003482:	4770      	bx	lr
 8003484:	7019      	strb	r1, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	e7f9      	b.n	800347e <memset+0x4>

0800348a <_vsniprintf_r>:
 800348a:	b530      	push	{r4, r5, lr}
 800348c:	0014      	movs	r4, r2
 800348e:	0005      	movs	r5, r0
 8003490:	001a      	movs	r2, r3
 8003492:	b09b      	sub	sp, #108	; 0x6c
 8003494:	2c00      	cmp	r4, #0
 8003496:	da05      	bge.n	80034a4 <_vsniprintf_r+0x1a>
 8003498:	238b      	movs	r3, #139	; 0x8b
 800349a:	6003      	str	r3, [r0, #0]
 800349c:	2001      	movs	r0, #1
 800349e:	4240      	negs	r0, r0
 80034a0:	b01b      	add	sp, #108	; 0x6c
 80034a2:	bd30      	pop	{r4, r5, pc}
 80034a4:	2382      	movs	r3, #130	; 0x82
 80034a6:	4668      	mov	r0, sp
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	8183      	strh	r3, [r0, #12]
 80034ac:	2300      	movs	r3, #0
 80034ae:	9100      	str	r1, [sp, #0]
 80034b0:	9104      	str	r1, [sp, #16]
 80034b2:	429c      	cmp	r4, r3
 80034b4:	d000      	beq.n	80034b8 <_vsniprintf_r+0x2e>
 80034b6:	1e63      	subs	r3, r4, #1
 80034b8:	9302      	str	r3, [sp, #8]
 80034ba:	9305      	str	r3, [sp, #20]
 80034bc:	2301      	movs	r3, #1
 80034be:	4669      	mov	r1, sp
 80034c0:	425b      	negs	r3, r3
 80034c2:	81cb      	strh	r3, [r1, #14]
 80034c4:	0028      	movs	r0, r5
 80034c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034c8:	f000 f878 	bl	80035bc <_svfiprintf_r>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	da01      	bge.n	80034d4 <_vsniprintf_r+0x4a>
 80034d0:	238b      	movs	r3, #139	; 0x8b
 80034d2:	602b      	str	r3, [r5, #0]
 80034d4:	2c00      	cmp	r4, #0
 80034d6:	d0e3      	beq.n	80034a0 <_vsniprintf_r+0x16>
 80034d8:	2300      	movs	r3, #0
 80034da:	9a00      	ldr	r2, [sp, #0]
 80034dc:	7013      	strb	r3, [r2, #0]
 80034de:	e7df      	b.n	80034a0 <_vsniprintf_r+0x16>

080034e0 <vsniprintf>:
 80034e0:	b507      	push	{r0, r1, r2, lr}
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	0013      	movs	r3, r2
 80034e6:	000a      	movs	r2, r1
 80034e8:	0001      	movs	r1, r0
 80034ea:	4802      	ldr	r0, [pc, #8]	; (80034f4 <vsniprintf+0x14>)
 80034ec:	6800      	ldr	r0, [r0, #0]
 80034ee:	f7ff ffcc 	bl	800348a <_vsniprintf_r>
 80034f2:	bd0e      	pop	{r1, r2, r3, pc}
 80034f4:	2000000c 	.word	0x2000000c

080034f8 <__ssputs_r>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	688e      	ldr	r6, [r1, #8]
 80034fc:	b085      	sub	sp, #20
 80034fe:	0007      	movs	r7, r0
 8003500:	000c      	movs	r4, r1
 8003502:	9203      	str	r2, [sp, #12]
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	429e      	cmp	r6, r3
 8003508:	d83c      	bhi.n	8003584 <__ssputs_r+0x8c>
 800350a:	2390      	movs	r3, #144	; 0x90
 800350c:	898a      	ldrh	r2, [r1, #12]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	421a      	tst	r2, r3
 8003512:	d034      	beq.n	800357e <__ssputs_r+0x86>
 8003514:	6909      	ldr	r1, [r1, #16]
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	6960      	ldr	r0, [r4, #20]
 800351a:	1a5b      	subs	r3, r3, r1
 800351c:	9302      	str	r3, [sp, #8]
 800351e:	2303      	movs	r3, #3
 8003520:	4343      	muls	r3, r0
 8003522:	0fdd      	lsrs	r5, r3, #31
 8003524:	18ed      	adds	r5, r5, r3
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	9802      	ldr	r0, [sp, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	181b      	adds	r3, r3, r0
 800352e:	106d      	asrs	r5, r5, #1
 8003530:	42ab      	cmp	r3, r5
 8003532:	d900      	bls.n	8003536 <__ssputs_r+0x3e>
 8003534:	001d      	movs	r5, r3
 8003536:	0553      	lsls	r3, r2, #21
 8003538:	d532      	bpl.n	80035a0 <__ssputs_r+0xa8>
 800353a:	0029      	movs	r1, r5
 800353c:	0038      	movs	r0, r7
 800353e:	f000 fb49 	bl	8003bd4 <_malloc_r>
 8003542:	1e06      	subs	r6, r0, #0
 8003544:	d109      	bne.n	800355a <__ssputs_r+0x62>
 8003546:	230c      	movs	r3, #12
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	2340      	movs	r3, #64	; 0x40
 800354c:	2001      	movs	r0, #1
 800354e:	89a2      	ldrh	r2, [r4, #12]
 8003550:	4240      	negs	r0, r0
 8003552:	4313      	orrs	r3, r2
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	b005      	add	sp, #20
 8003558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355a:	9a02      	ldr	r2, [sp, #8]
 800355c:	6921      	ldr	r1, [r4, #16]
 800355e:	f7ff ff83 	bl	8003468 <memcpy>
 8003562:	89a3      	ldrh	r3, [r4, #12]
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <__ssputs_r+0xc0>)
 8003566:	401a      	ands	r2, r3
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	4313      	orrs	r3, r2
 800356c:	81a3      	strh	r3, [r4, #12]
 800356e:	9b02      	ldr	r3, [sp, #8]
 8003570:	6126      	str	r6, [r4, #16]
 8003572:	18f6      	adds	r6, r6, r3
 8003574:	6026      	str	r6, [r4, #0]
 8003576:	6165      	str	r5, [r4, #20]
 8003578:	9e01      	ldr	r6, [sp, #4]
 800357a:	1aed      	subs	r5, r5, r3
 800357c:	60a5      	str	r5, [r4, #8]
 800357e:	9b01      	ldr	r3, [sp, #4]
 8003580:	429e      	cmp	r6, r3
 8003582:	d900      	bls.n	8003586 <__ssputs_r+0x8e>
 8003584:	9e01      	ldr	r6, [sp, #4]
 8003586:	0032      	movs	r2, r6
 8003588:	9903      	ldr	r1, [sp, #12]
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	f000 faa3 	bl	8003ad6 <memmove>
 8003590:	68a3      	ldr	r3, [r4, #8]
 8003592:	2000      	movs	r0, #0
 8003594:	1b9b      	subs	r3, r3, r6
 8003596:	60a3      	str	r3, [r4, #8]
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	199e      	adds	r6, r3, r6
 800359c:	6026      	str	r6, [r4, #0]
 800359e:	e7da      	b.n	8003556 <__ssputs_r+0x5e>
 80035a0:	002a      	movs	r2, r5
 80035a2:	0038      	movs	r0, r7
 80035a4:	f000 fb8c 	bl	8003cc0 <_realloc_r>
 80035a8:	1e06      	subs	r6, r0, #0
 80035aa:	d1e0      	bne.n	800356e <__ssputs_r+0x76>
 80035ac:	0038      	movs	r0, r7
 80035ae:	6921      	ldr	r1, [r4, #16]
 80035b0:	f000 faa4 	bl	8003afc <_free_r>
 80035b4:	e7c7      	b.n	8003546 <__ssputs_r+0x4e>
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	fffffb7f 	.word	0xfffffb7f

080035bc <_svfiprintf_r>:
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	b0a1      	sub	sp, #132	; 0x84
 80035c0:	9003      	str	r0, [sp, #12]
 80035c2:	001d      	movs	r5, r3
 80035c4:	898b      	ldrh	r3, [r1, #12]
 80035c6:	000f      	movs	r7, r1
 80035c8:	0016      	movs	r6, r2
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	d511      	bpl.n	80035f2 <_svfiprintf_r+0x36>
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10e      	bne.n	80035f2 <_svfiprintf_r+0x36>
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	f000 fafd 	bl	8003bd4 <_malloc_r>
 80035da:	6038      	str	r0, [r7, #0]
 80035dc:	6138      	str	r0, [r7, #16]
 80035de:	2800      	cmp	r0, #0
 80035e0:	d105      	bne.n	80035ee <_svfiprintf_r+0x32>
 80035e2:	230c      	movs	r3, #12
 80035e4:	9a03      	ldr	r2, [sp, #12]
 80035e6:	3801      	subs	r0, #1
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	b021      	add	sp, #132	; 0x84
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ee:	2340      	movs	r3, #64	; 0x40
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	2300      	movs	r3, #0
 80035f4:	ac08      	add	r4, sp, #32
 80035f6:	6163      	str	r3, [r4, #20]
 80035f8:	3320      	adds	r3, #32
 80035fa:	7663      	strb	r3, [r4, #25]
 80035fc:	3310      	adds	r3, #16
 80035fe:	76a3      	strb	r3, [r4, #26]
 8003600:	9507      	str	r5, [sp, #28]
 8003602:	0035      	movs	r5, r6
 8003604:	782b      	ldrb	r3, [r5, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <_svfiprintf_r+0x52>
 800360a:	2b25      	cmp	r3, #37	; 0x25
 800360c:	d147      	bne.n	800369e <_svfiprintf_r+0xe2>
 800360e:	1bab      	subs	r3, r5, r6
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	42b5      	cmp	r5, r6
 8003614:	d00c      	beq.n	8003630 <_svfiprintf_r+0x74>
 8003616:	0032      	movs	r2, r6
 8003618:	0039      	movs	r1, r7
 800361a:	9803      	ldr	r0, [sp, #12]
 800361c:	f7ff ff6c 	bl	80034f8 <__ssputs_r>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d100      	bne.n	8003626 <_svfiprintf_r+0x6a>
 8003624:	e0ae      	b.n	8003784 <_svfiprintf_r+0x1c8>
 8003626:	6962      	ldr	r2, [r4, #20]
 8003628:	9b05      	ldr	r3, [sp, #20]
 800362a:	4694      	mov	ip, r2
 800362c:	4463      	add	r3, ip
 800362e:	6163      	str	r3, [r4, #20]
 8003630:	782b      	ldrb	r3, [r5, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d100      	bne.n	8003638 <_svfiprintf_r+0x7c>
 8003636:	e0a5      	b.n	8003784 <_svfiprintf_r+0x1c8>
 8003638:	2201      	movs	r2, #1
 800363a:	2300      	movs	r3, #0
 800363c:	4252      	negs	r2, r2
 800363e:	6062      	str	r2, [r4, #4]
 8003640:	a904      	add	r1, sp, #16
 8003642:	3254      	adds	r2, #84	; 0x54
 8003644:	1852      	adds	r2, r2, r1
 8003646:	1c6e      	adds	r6, r5, #1
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	60e3      	str	r3, [r4, #12]
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	7013      	strb	r3, [r2, #0]
 8003650:	65a3      	str	r3, [r4, #88]	; 0x58
 8003652:	2205      	movs	r2, #5
 8003654:	7831      	ldrb	r1, [r6, #0]
 8003656:	4854      	ldr	r0, [pc, #336]	; (80037a8 <_svfiprintf_r+0x1ec>)
 8003658:	f000 fa32 	bl	8003ac0 <memchr>
 800365c:	1c75      	adds	r5, r6, #1
 800365e:	2800      	cmp	r0, #0
 8003660:	d11f      	bne.n	80036a2 <_svfiprintf_r+0xe6>
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	06d3      	lsls	r3, r2, #27
 8003666:	d504      	bpl.n	8003672 <_svfiprintf_r+0xb6>
 8003668:	2353      	movs	r3, #83	; 0x53
 800366a:	a904      	add	r1, sp, #16
 800366c:	185b      	adds	r3, r3, r1
 800366e:	2120      	movs	r1, #32
 8003670:	7019      	strb	r1, [r3, #0]
 8003672:	0713      	lsls	r3, r2, #28
 8003674:	d504      	bpl.n	8003680 <_svfiprintf_r+0xc4>
 8003676:	2353      	movs	r3, #83	; 0x53
 8003678:	a904      	add	r1, sp, #16
 800367a:	185b      	adds	r3, r3, r1
 800367c:	212b      	movs	r1, #43	; 0x2b
 800367e:	7019      	strb	r1, [r3, #0]
 8003680:	7833      	ldrb	r3, [r6, #0]
 8003682:	2b2a      	cmp	r3, #42	; 0x2a
 8003684:	d016      	beq.n	80036b4 <_svfiprintf_r+0xf8>
 8003686:	0035      	movs	r5, r6
 8003688:	2100      	movs	r1, #0
 800368a:	200a      	movs	r0, #10
 800368c:	68e3      	ldr	r3, [r4, #12]
 800368e:	782a      	ldrb	r2, [r5, #0]
 8003690:	1c6e      	adds	r6, r5, #1
 8003692:	3a30      	subs	r2, #48	; 0x30
 8003694:	2a09      	cmp	r2, #9
 8003696:	d94e      	bls.n	8003736 <_svfiprintf_r+0x17a>
 8003698:	2900      	cmp	r1, #0
 800369a:	d111      	bne.n	80036c0 <_svfiprintf_r+0x104>
 800369c:	e017      	b.n	80036ce <_svfiprintf_r+0x112>
 800369e:	3501      	adds	r5, #1
 80036a0:	e7b0      	b.n	8003604 <_svfiprintf_r+0x48>
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <_svfiprintf_r+0x1ec>)
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	1ac0      	subs	r0, r0, r3
 80036a8:	2301      	movs	r3, #1
 80036aa:	4083      	lsls	r3, r0
 80036ac:	4313      	orrs	r3, r2
 80036ae:	002e      	movs	r6, r5
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	e7ce      	b.n	8003652 <_svfiprintf_r+0x96>
 80036b4:	9b07      	ldr	r3, [sp, #28]
 80036b6:	1d19      	adds	r1, r3, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	9107      	str	r1, [sp, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db01      	blt.n	80036c4 <_svfiprintf_r+0x108>
 80036c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036c2:	e004      	b.n	80036ce <_svfiprintf_r+0x112>
 80036c4:	425b      	negs	r3, r3
 80036c6:	60e3      	str	r3, [r4, #12]
 80036c8:	2302      	movs	r3, #2
 80036ca:	4313      	orrs	r3, r2
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	782b      	ldrb	r3, [r5, #0]
 80036d0:	2b2e      	cmp	r3, #46	; 0x2e
 80036d2:	d10a      	bne.n	80036ea <_svfiprintf_r+0x12e>
 80036d4:	786b      	ldrb	r3, [r5, #1]
 80036d6:	2b2a      	cmp	r3, #42	; 0x2a
 80036d8:	d135      	bne.n	8003746 <_svfiprintf_r+0x18a>
 80036da:	9b07      	ldr	r3, [sp, #28]
 80036dc:	3502      	adds	r5, #2
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	9207      	str	r2, [sp, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db2b      	blt.n	8003740 <_svfiprintf_r+0x184>
 80036e8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ea:	4e30      	ldr	r6, [pc, #192]	; (80037ac <_svfiprintf_r+0x1f0>)
 80036ec:	2203      	movs	r2, #3
 80036ee:	0030      	movs	r0, r6
 80036f0:	7829      	ldrb	r1, [r5, #0]
 80036f2:	f000 f9e5 	bl	8003ac0 <memchr>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d006      	beq.n	8003708 <_svfiprintf_r+0x14c>
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	1b80      	subs	r0, r0, r6
 80036fe:	4083      	lsls	r3, r0
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	3501      	adds	r5, #1
 8003704:	4313      	orrs	r3, r2
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	7829      	ldrb	r1, [r5, #0]
 800370a:	2206      	movs	r2, #6
 800370c:	4828      	ldr	r0, [pc, #160]	; (80037b0 <_svfiprintf_r+0x1f4>)
 800370e:	1c6e      	adds	r6, r5, #1
 8003710:	7621      	strb	r1, [r4, #24]
 8003712:	f000 f9d5 	bl	8003ac0 <memchr>
 8003716:	2800      	cmp	r0, #0
 8003718:	d03c      	beq.n	8003794 <_svfiprintf_r+0x1d8>
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <_svfiprintf_r+0x1f8>)
 800371c:	2b00      	cmp	r3, #0
 800371e:	d125      	bne.n	800376c <_svfiprintf_r+0x1b0>
 8003720:	2207      	movs	r2, #7
 8003722:	9b07      	ldr	r3, [sp, #28]
 8003724:	3307      	adds	r3, #7
 8003726:	4393      	bics	r3, r2
 8003728:	3308      	adds	r3, #8
 800372a:	9307      	str	r3, [sp, #28]
 800372c:	6963      	ldr	r3, [r4, #20]
 800372e:	9a04      	ldr	r2, [sp, #16]
 8003730:	189b      	adds	r3, r3, r2
 8003732:	6163      	str	r3, [r4, #20]
 8003734:	e765      	b.n	8003602 <_svfiprintf_r+0x46>
 8003736:	4343      	muls	r3, r0
 8003738:	0035      	movs	r5, r6
 800373a:	2101      	movs	r1, #1
 800373c:	189b      	adds	r3, r3, r2
 800373e:	e7a6      	b.n	800368e <_svfiprintf_r+0xd2>
 8003740:	2301      	movs	r3, #1
 8003742:	425b      	negs	r3, r3
 8003744:	e7d0      	b.n	80036e8 <_svfiprintf_r+0x12c>
 8003746:	2300      	movs	r3, #0
 8003748:	200a      	movs	r0, #10
 800374a:	001a      	movs	r2, r3
 800374c:	3501      	adds	r5, #1
 800374e:	6063      	str	r3, [r4, #4]
 8003750:	7829      	ldrb	r1, [r5, #0]
 8003752:	1c6e      	adds	r6, r5, #1
 8003754:	3930      	subs	r1, #48	; 0x30
 8003756:	2909      	cmp	r1, #9
 8003758:	d903      	bls.n	8003762 <_svfiprintf_r+0x1a6>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0c5      	beq.n	80036ea <_svfiprintf_r+0x12e>
 800375e:	9209      	str	r2, [sp, #36]	; 0x24
 8003760:	e7c3      	b.n	80036ea <_svfiprintf_r+0x12e>
 8003762:	4342      	muls	r2, r0
 8003764:	0035      	movs	r5, r6
 8003766:	2301      	movs	r3, #1
 8003768:	1852      	adds	r2, r2, r1
 800376a:	e7f1      	b.n	8003750 <_svfiprintf_r+0x194>
 800376c:	ab07      	add	r3, sp, #28
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	003a      	movs	r2, r7
 8003772:	0021      	movs	r1, r4
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <_svfiprintf_r+0x1fc>)
 8003776:	9803      	ldr	r0, [sp, #12]
 8003778:	e000      	b.n	800377c <_svfiprintf_r+0x1c0>
 800377a:	bf00      	nop
 800377c:	9004      	str	r0, [sp, #16]
 800377e:	9b04      	ldr	r3, [sp, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	d1d3      	bne.n	800372c <_svfiprintf_r+0x170>
 8003784:	89bb      	ldrh	r3, [r7, #12]
 8003786:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003788:	065b      	lsls	r3, r3, #25
 800378a:	d400      	bmi.n	800378e <_svfiprintf_r+0x1d2>
 800378c:	e72d      	b.n	80035ea <_svfiprintf_r+0x2e>
 800378e:	2001      	movs	r0, #1
 8003790:	4240      	negs	r0, r0
 8003792:	e72a      	b.n	80035ea <_svfiprintf_r+0x2e>
 8003794:	ab07      	add	r3, sp, #28
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	003a      	movs	r2, r7
 800379a:	0021      	movs	r1, r4
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <_svfiprintf_r+0x1fc>)
 800379e:	9803      	ldr	r0, [sp, #12]
 80037a0:	f000 f87c 	bl	800389c <_printf_i>
 80037a4:	e7ea      	b.n	800377c <_svfiprintf_r+0x1c0>
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	08003f0c 	.word	0x08003f0c
 80037ac:	08003f12 	.word	0x08003f12
 80037b0:	08003f16 	.word	0x08003f16
 80037b4:	00000000 	.word	0x00000000
 80037b8:	080034f9 	.word	0x080034f9

080037bc <_printf_common>:
 80037bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037be:	0015      	movs	r5, r2
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	688a      	ldr	r2, [r1, #8]
 80037c4:	690b      	ldr	r3, [r1, #16]
 80037c6:	000c      	movs	r4, r1
 80037c8:	9000      	str	r0, [sp, #0]
 80037ca:	4293      	cmp	r3, r2
 80037cc:	da00      	bge.n	80037d0 <_printf_common+0x14>
 80037ce:	0013      	movs	r3, r2
 80037d0:	0022      	movs	r2, r4
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	3243      	adds	r2, #67	; 0x43
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	2a00      	cmp	r2, #0
 80037da:	d001      	beq.n	80037e0 <_printf_common+0x24>
 80037dc:	3301      	adds	r3, #1
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	069b      	lsls	r3, r3, #26
 80037e4:	d502      	bpl.n	80037ec <_printf_common+0x30>
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	3302      	adds	r3, #2
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	2306      	movs	r3, #6
 80037f0:	0017      	movs	r7, r2
 80037f2:	401f      	ands	r7, r3
 80037f4:	421a      	tst	r2, r3
 80037f6:	d027      	beq.n	8003848 <_printf_common+0x8c>
 80037f8:	0023      	movs	r3, r4
 80037fa:	3343      	adds	r3, #67	; 0x43
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	4193      	sbcs	r3, r2
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	0692      	lsls	r2, r2, #26
 8003806:	d430      	bmi.n	800386a <_printf_common+0xae>
 8003808:	0022      	movs	r2, r4
 800380a:	9901      	ldr	r1, [sp, #4]
 800380c:	9800      	ldr	r0, [sp, #0]
 800380e:	9e08      	ldr	r6, [sp, #32]
 8003810:	3243      	adds	r2, #67	; 0x43
 8003812:	47b0      	blx	r6
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d025      	beq.n	8003864 <_printf_common+0xa8>
 8003818:	2306      	movs	r3, #6
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	682a      	ldr	r2, [r5, #0]
 800381e:	68e1      	ldr	r1, [r4, #12]
 8003820:	2500      	movs	r5, #0
 8003822:	4003      	ands	r3, r0
 8003824:	2b04      	cmp	r3, #4
 8003826:	d103      	bne.n	8003830 <_printf_common+0x74>
 8003828:	1a8d      	subs	r5, r1, r2
 800382a:	43eb      	mvns	r3, r5
 800382c:	17db      	asrs	r3, r3, #31
 800382e:	401d      	ands	r5, r3
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	6922      	ldr	r2, [r4, #16]
 8003834:	4293      	cmp	r3, r2
 8003836:	dd01      	ble.n	800383c <_printf_common+0x80>
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	18ed      	adds	r5, r5, r3
 800383c:	2700      	movs	r7, #0
 800383e:	42bd      	cmp	r5, r7
 8003840:	d120      	bne.n	8003884 <_printf_common+0xc8>
 8003842:	2000      	movs	r0, #0
 8003844:	e010      	b.n	8003868 <_printf_common+0xac>
 8003846:	3701      	adds	r7, #1
 8003848:	68e3      	ldr	r3, [r4, #12]
 800384a:	682a      	ldr	r2, [r5, #0]
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	42bb      	cmp	r3, r7
 8003850:	ddd2      	ble.n	80037f8 <_printf_common+0x3c>
 8003852:	0022      	movs	r2, r4
 8003854:	2301      	movs	r3, #1
 8003856:	9901      	ldr	r1, [sp, #4]
 8003858:	9800      	ldr	r0, [sp, #0]
 800385a:	9e08      	ldr	r6, [sp, #32]
 800385c:	3219      	adds	r2, #25
 800385e:	47b0      	blx	r6
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d1f0      	bne.n	8003846 <_printf_common+0x8a>
 8003864:	2001      	movs	r0, #1
 8003866:	4240      	negs	r0, r0
 8003868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800386a:	2030      	movs	r0, #48	; 0x30
 800386c:	18e1      	adds	r1, r4, r3
 800386e:	3143      	adds	r1, #67	; 0x43
 8003870:	7008      	strb	r0, [r1, #0]
 8003872:	0021      	movs	r1, r4
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	3145      	adds	r1, #69	; 0x45
 8003878:	7809      	ldrb	r1, [r1, #0]
 800387a:	18a2      	adds	r2, r4, r2
 800387c:	3243      	adds	r2, #67	; 0x43
 800387e:	3302      	adds	r3, #2
 8003880:	7011      	strb	r1, [r2, #0]
 8003882:	e7c1      	b.n	8003808 <_printf_common+0x4c>
 8003884:	0022      	movs	r2, r4
 8003886:	2301      	movs	r3, #1
 8003888:	9901      	ldr	r1, [sp, #4]
 800388a:	9800      	ldr	r0, [sp, #0]
 800388c:	9e08      	ldr	r6, [sp, #32]
 800388e:	321a      	adds	r2, #26
 8003890:	47b0      	blx	r6
 8003892:	1c43      	adds	r3, r0, #1
 8003894:	d0e6      	beq.n	8003864 <_printf_common+0xa8>
 8003896:	3701      	adds	r7, #1
 8003898:	e7d1      	b.n	800383e <_printf_common+0x82>
	...

0800389c <_printf_i>:
 800389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389e:	b08b      	sub	sp, #44	; 0x2c
 80038a0:	9206      	str	r2, [sp, #24]
 80038a2:	000a      	movs	r2, r1
 80038a4:	3243      	adds	r2, #67	; 0x43
 80038a6:	9307      	str	r3, [sp, #28]
 80038a8:	9005      	str	r0, [sp, #20]
 80038aa:	9204      	str	r2, [sp, #16]
 80038ac:	7e0a      	ldrb	r2, [r1, #24]
 80038ae:	000c      	movs	r4, r1
 80038b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80038b2:	2a78      	cmp	r2, #120	; 0x78
 80038b4:	d807      	bhi.n	80038c6 <_printf_i+0x2a>
 80038b6:	2a62      	cmp	r2, #98	; 0x62
 80038b8:	d809      	bhi.n	80038ce <_printf_i+0x32>
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d100      	bne.n	80038c0 <_printf_i+0x24>
 80038be:	e0c1      	b.n	8003a44 <_printf_i+0x1a8>
 80038c0:	2a58      	cmp	r2, #88	; 0x58
 80038c2:	d100      	bne.n	80038c6 <_printf_i+0x2a>
 80038c4:	e08c      	b.n	80039e0 <_printf_i+0x144>
 80038c6:	0026      	movs	r6, r4
 80038c8:	3642      	adds	r6, #66	; 0x42
 80038ca:	7032      	strb	r2, [r6, #0]
 80038cc:	e022      	b.n	8003914 <_printf_i+0x78>
 80038ce:	0010      	movs	r0, r2
 80038d0:	3863      	subs	r0, #99	; 0x63
 80038d2:	2815      	cmp	r0, #21
 80038d4:	d8f7      	bhi.n	80038c6 <_printf_i+0x2a>
 80038d6:	f7fc fc33 	bl	8000140 <__gnu_thumb1_case_shi>
 80038da:	0016      	.short	0x0016
 80038dc:	fff6001f 	.word	0xfff6001f
 80038e0:	fff6fff6 	.word	0xfff6fff6
 80038e4:	001ffff6 	.word	0x001ffff6
 80038e8:	fff6fff6 	.word	0xfff6fff6
 80038ec:	fff6fff6 	.word	0xfff6fff6
 80038f0:	003600a8 	.word	0x003600a8
 80038f4:	fff6009a 	.word	0xfff6009a
 80038f8:	00b9fff6 	.word	0x00b9fff6
 80038fc:	0036fff6 	.word	0x0036fff6
 8003900:	fff6fff6 	.word	0xfff6fff6
 8003904:	009e      	.short	0x009e
 8003906:	0026      	movs	r6, r4
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	3642      	adds	r6, #66	; 0x42
 800390c:	1d11      	adds	r1, r2, #4
 800390e:	6019      	str	r1, [r3, #0]
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	7033      	strb	r3, [r6, #0]
 8003914:	2301      	movs	r3, #1
 8003916:	e0a7      	b.n	8003a68 <_printf_i+0x1cc>
 8003918:	6808      	ldr	r0, [r1, #0]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	1d0a      	adds	r2, r1, #4
 800391e:	0605      	lsls	r5, r0, #24
 8003920:	d50b      	bpl.n	800393a <_printf_i+0x9e>
 8003922:	680d      	ldr	r5, [r1, #0]
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	2d00      	cmp	r5, #0
 8003928:	da03      	bge.n	8003932 <_printf_i+0x96>
 800392a:	232d      	movs	r3, #45	; 0x2d
 800392c:	9a04      	ldr	r2, [sp, #16]
 800392e:	426d      	negs	r5, r5
 8003930:	7013      	strb	r3, [r2, #0]
 8003932:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <_printf_i+0x21c>)
 8003934:	270a      	movs	r7, #10
 8003936:	9303      	str	r3, [sp, #12]
 8003938:	e01b      	b.n	8003972 <_printf_i+0xd6>
 800393a:	680d      	ldr	r5, [r1, #0]
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	0641      	lsls	r1, r0, #25
 8003940:	d5f1      	bpl.n	8003926 <_printf_i+0x8a>
 8003942:	b22d      	sxth	r5, r5
 8003944:	e7ef      	b.n	8003926 <_printf_i+0x8a>
 8003946:	680d      	ldr	r5, [r1, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	1d08      	adds	r0, r1, #4
 800394c:	6018      	str	r0, [r3, #0]
 800394e:	062e      	lsls	r6, r5, #24
 8003950:	d501      	bpl.n	8003956 <_printf_i+0xba>
 8003952:	680d      	ldr	r5, [r1, #0]
 8003954:	e003      	b.n	800395e <_printf_i+0xc2>
 8003956:	066d      	lsls	r5, r5, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0xb6>
 800395a:	680d      	ldr	r5, [r1, #0]
 800395c:	b2ad      	uxth	r5, r5
 800395e:	4b56      	ldr	r3, [pc, #344]	; (8003ab8 <_printf_i+0x21c>)
 8003960:	2708      	movs	r7, #8
 8003962:	9303      	str	r3, [sp, #12]
 8003964:	2a6f      	cmp	r2, #111	; 0x6f
 8003966:	d000      	beq.n	800396a <_printf_i+0xce>
 8003968:	3702      	adds	r7, #2
 800396a:	0023      	movs	r3, r4
 800396c:	2200      	movs	r2, #0
 800396e:	3343      	adds	r3, #67	; 0x43
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	6863      	ldr	r3, [r4, #4]
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db03      	blt.n	8003982 <_printf_i+0xe6>
 800397a:	2204      	movs	r2, #4
 800397c:	6821      	ldr	r1, [r4, #0]
 800397e:	4391      	bics	r1, r2
 8003980:	6021      	str	r1, [r4, #0]
 8003982:	2d00      	cmp	r5, #0
 8003984:	d102      	bne.n	800398c <_printf_i+0xf0>
 8003986:	9e04      	ldr	r6, [sp, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <_printf_i+0x10a>
 800398c:	9e04      	ldr	r6, [sp, #16]
 800398e:	0028      	movs	r0, r5
 8003990:	0039      	movs	r1, r7
 8003992:	f7fc fc65 	bl	8000260 <__aeabi_uidivmod>
 8003996:	9b03      	ldr	r3, [sp, #12]
 8003998:	3e01      	subs	r6, #1
 800399a:	5c5b      	ldrb	r3, [r3, r1]
 800399c:	7033      	strb	r3, [r6, #0]
 800399e:	002b      	movs	r3, r5
 80039a0:	0005      	movs	r5, r0
 80039a2:	429f      	cmp	r7, r3
 80039a4:	d9f3      	bls.n	800398e <_printf_i+0xf2>
 80039a6:	2f08      	cmp	r7, #8
 80039a8:	d109      	bne.n	80039be <_printf_i+0x122>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	07db      	lsls	r3, r3, #31
 80039ae:	d506      	bpl.n	80039be <_printf_i+0x122>
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	6922      	ldr	r2, [r4, #16]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	dc02      	bgt.n	80039be <_printf_i+0x122>
 80039b8:	2330      	movs	r3, #48	; 0x30
 80039ba:	3e01      	subs	r6, #1
 80039bc:	7033      	strb	r3, [r6, #0]
 80039be:	9b04      	ldr	r3, [sp, #16]
 80039c0:	1b9b      	subs	r3, r3, r6
 80039c2:	6123      	str	r3, [r4, #16]
 80039c4:	9b07      	ldr	r3, [sp, #28]
 80039c6:	0021      	movs	r1, r4
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	9805      	ldr	r0, [sp, #20]
 80039cc:	9b06      	ldr	r3, [sp, #24]
 80039ce:	aa09      	add	r2, sp, #36	; 0x24
 80039d0:	f7ff fef4 	bl	80037bc <_printf_common>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d14c      	bne.n	8003a72 <_printf_i+0x1d6>
 80039d8:	2001      	movs	r0, #1
 80039da:	4240      	negs	r0, r0
 80039dc:	b00b      	add	sp, #44	; 0x2c
 80039de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e0:	3145      	adds	r1, #69	; 0x45
 80039e2:	700a      	strb	r2, [r1, #0]
 80039e4:	4a34      	ldr	r2, [pc, #208]	; (8003ab8 <_printf_i+0x21c>)
 80039e6:	9203      	str	r2, [sp, #12]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	ca20      	ldmia	r2!, {r5}
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	0608      	lsls	r0, r1, #24
 80039f2:	d516      	bpl.n	8003a22 <_printf_i+0x186>
 80039f4:	07cb      	lsls	r3, r1, #31
 80039f6:	d502      	bpl.n	80039fe <_printf_i+0x162>
 80039f8:	2320      	movs	r3, #32
 80039fa:	4319      	orrs	r1, r3
 80039fc:	6021      	str	r1, [r4, #0]
 80039fe:	2710      	movs	r7, #16
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	d1b2      	bne.n	800396a <_printf_i+0xce>
 8003a04:	2320      	movs	r3, #32
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	439a      	bics	r2, r3
 8003a0a:	6022      	str	r2, [r4, #0]
 8003a0c:	e7ad      	b.n	800396a <_printf_i+0xce>
 8003a0e:	2220      	movs	r2, #32
 8003a10:	6809      	ldr	r1, [r1, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	0022      	movs	r2, r4
 8003a18:	2178      	movs	r1, #120	; 0x78
 8003a1a:	3245      	adds	r2, #69	; 0x45
 8003a1c:	7011      	strb	r1, [r2, #0]
 8003a1e:	4a27      	ldr	r2, [pc, #156]	; (8003abc <_printf_i+0x220>)
 8003a20:	e7e1      	b.n	80039e6 <_printf_i+0x14a>
 8003a22:	0648      	lsls	r0, r1, #25
 8003a24:	d5e6      	bpl.n	80039f4 <_printf_i+0x158>
 8003a26:	b2ad      	uxth	r5, r5
 8003a28:	e7e4      	b.n	80039f4 <_printf_i+0x158>
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	680d      	ldr	r5, [r1, #0]
 8003a2e:	1d10      	adds	r0, r2, #4
 8003a30:	6949      	ldr	r1, [r1, #20]
 8003a32:	6018      	str	r0, [r3, #0]
 8003a34:	6813      	ldr	r3, [r2, #0]
 8003a36:	062e      	lsls	r6, r5, #24
 8003a38:	d501      	bpl.n	8003a3e <_printf_i+0x1a2>
 8003a3a:	6019      	str	r1, [r3, #0]
 8003a3c:	e002      	b.n	8003a44 <_printf_i+0x1a8>
 8003a3e:	066d      	lsls	r5, r5, #25
 8003a40:	d5fb      	bpl.n	8003a3a <_printf_i+0x19e>
 8003a42:	8019      	strh	r1, [r3, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	9e04      	ldr	r6, [sp, #16]
 8003a48:	6123      	str	r3, [r4, #16]
 8003a4a:	e7bb      	b.n	80039c4 <_printf_i+0x128>
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	1d11      	adds	r1, r2, #4
 8003a50:	6019      	str	r1, [r3, #0]
 8003a52:	6816      	ldr	r6, [r2, #0]
 8003a54:	2100      	movs	r1, #0
 8003a56:	0030      	movs	r0, r6
 8003a58:	6862      	ldr	r2, [r4, #4]
 8003a5a:	f000 f831 	bl	8003ac0 <memchr>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d001      	beq.n	8003a66 <_printf_i+0x1ca>
 8003a62:	1b80      	subs	r0, r0, r6
 8003a64:	6060      	str	r0, [r4, #4]
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9a04      	ldr	r2, [sp, #16]
 8003a6e:	7013      	strb	r3, [r2, #0]
 8003a70:	e7a8      	b.n	80039c4 <_printf_i+0x128>
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	0032      	movs	r2, r6
 8003a76:	9906      	ldr	r1, [sp, #24]
 8003a78:	9805      	ldr	r0, [sp, #20]
 8003a7a:	9d07      	ldr	r5, [sp, #28]
 8003a7c:	47a8      	blx	r5
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d0aa      	beq.n	80039d8 <_printf_i+0x13c>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	079b      	lsls	r3, r3, #30
 8003a86:	d415      	bmi.n	8003ab4 <_printf_i+0x218>
 8003a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8a:	68e0      	ldr	r0, [r4, #12]
 8003a8c:	4298      	cmp	r0, r3
 8003a8e:	daa5      	bge.n	80039dc <_printf_i+0x140>
 8003a90:	0018      	movs	r0, r3
 8003a92:	e7a3      	b.n	80039dc <_printf_i+0x140>
 8003a94:	0022      	movs	r2, r4
 8003a96:	2301      	movs	r3, #1
 8003a98:	9906      	ldr	r1, [sp, #24]
 8003a9a:	9805      	ldr	r0, [sp, #20]
 8003a9c:	9e07      	ldr	r6, [sp, #28]
 8003a9e:	3219      	adds	r2, #25
 8003aa0:	47b0      	blx	r6
 8003aa2:	1c43      	adds	r3, r0, #1
 8003aa4:	d098      	beq.n	80039d8 <_printf_i+0x13c>
 8003aa6:	3501      	adds	r5, #1
 8003aa8:	68e3      	ldr	r3, [r4, #12]
 8003aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	42ab      	cmp	r3, r5
 8003ab0:	dcf0      	bgt.n	8003a94 <_printf_i+0x1f8>
 8003ab2:	e7e9      	b.n	8003a88 <_printf_i+0x1ec>
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	e7f7      	b.n	8003aa8 <_printf_i+0x20c>
 8003ab8:	08003f1d 	.word	0x08003f1d
 8003abc:	08003f2e 	.word	0x08003f2e

08003ac0 <memchr>:
 8003ac0:	b2c9      	uxtb	r1, r1
 8003ac2:	1882      	adds	r2, r0, r2
 8003ac4:	4290      	cmp	r0, r2
 8003ac6:	d101      	bne.n	8003acc <memchr+0xc>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	4770      	bx	lr
 8003acc:	7803      	ldrb	r3, [r0, #0]
 8003ace:	428b      	cmp	r3, r1
 8003ad0:	d0fb      	beq.n	8003aca <memchr+0xa>
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	e7f6      	b.n	8003ac4 <memchr+0x4>

08003ad6 <memmove>:
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	4288      	cmp	r0, r1
 8003ada:	d902      	bls.n	8003ae2 <memmove+0xc>
 8003adc:	188b      	adds	r3, r1, r2
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	d303      	bcc.n	8003aea <memmove+0x14>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e007      	b.n	8003af6 <memmove+0x20>
 8003ae6:	5c8b      	ldrb	r3, [r1, r2]
 8003ae8:	5483      	strb	r3, [r0, r2]
 8003aea:	3a01      	subs	r2, #1
 8003aec:	d2fb      	bcs.n	8003ae6 <memmove+0x10>
 8003aee:	bd10      	pop	{r4, pc}
 8003af0:	5ccc      	ldrb	r4, [r1, r3]
 8003af2:	54c4      	strb	r4, [r0, r3]
 8003af4:	3301      	adds	r3, #1
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d1fa      	bne.n	8003af0 <memmove+0x1a>
 8003afa:	e7f8      	b.n	8003aee <memmove+0x18>

08003afc <_free_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	0005      	movs	r5, r0
 8003b00:	2900      	cmp	r1, #0
 8003b02:	d010      	beq.n	8003b26 <_free_r+0x2a>
 8003b04:	1f0c      	subs	r4, r1, #4
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da00      	bge.n	8003b0e <_free_r+0x12>
 8003b0c:	18e4      	adds	r4, r4, r3
 8003b0e:	0028      	movs	r0, r5
 8003b10:	f000 f918 	bl	8003d44 <__malloc_lock>
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <_free_r+0x90>)
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <_free_r+0x2c>
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	6014      	str	r4, [r2, #0]
 8003b20:	0028      	movs	r0, r5
 8003b22:	f000 f917 	bl	8003d54 <__malloc_unlock>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	d908      	bls.n	8003b3e <_free_r+0x42>
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	1860      	adds	r0, r4, r1
 8003b30:	4283      	cmp	r3, r0
 8003b32:	d1f3      	bne.n	8003b1c <_free_r+0x20>
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	1841      	adds	r1, r0, r1
 8003b3a:	6021      	str	r1, [r4, #0]
 8003b3c:	e7ee      	b.n	8003b1c <_free_r+0x20>
 8003b3e:	001a      	movs	r2, r3
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <_free_r+0x4e>
 8003b46:	42a3      	cmp	r3, r4
 8003b48:	d9f9      	bls.n	8003b3e <_free_r+0x42>
 8003b4a:	6811      	ldr	r1, [r2, #0]
 8003b4c:	1850      	adds	r0, r2, r1
 8003b4e:	42a0      	cmp	r0, r4
 8003b50:	d10b      	bne.n	8003b6a <_free_r+0x6e>
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	1809      	adds	r1, r1, r0
 8003b56:	1850      	adds	r0, r2, r1
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	4283      	cmp	r3, r0
 8003b5c:	d1e0      	bne.n	8003b20 <_free_r+0x24>
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	1841      	adds	r1, r0, r1
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	6053      	str	r3, [r2, #4]
 8003b68:	e7da      	b.n	8003b20 <_free_r+0x24>
 8003b6a:	42a0      	cmp	r0, r4
 8003b6c:	d902      	bls.n	8003b74 <_free_r+0x78>
 8003b6e:	230c      	movs	r3, #12
 8003b70:	602b      	str	r3, [r5, #0]
 8003b72:	e7d5      	b.n	8003b20 <_free_r+0x24>
 8003b74:	6821      	ldr	r1, [r4, #0]
 8003b76:	1860      	adds	r0, r4, r1
 8003b78:	4283      	cmp	r3, r0
 8003b7a:	d103      	bne.n	8003b84 <_free_r+0x88>
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	1841      	adds	r1, r0, r1
 8003b82:	6021      	str	r1, [r4, #0]
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	6054      	str	r4, [r2, #4]
 8003b88:	e7ca      	b.n	8003b20 <_free_r+0x24>
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	20000244 	.word	0x20000244

08003b90 <sbrk_aligned>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	4e0f      	ldr	r6, [pc, #60]	; (8003bd0 <sbrk_aligned+0x40>)
 8003b94:	000d      	movs	r5, r1
 8003b96:	6831      	ldr	r1, [r6, #0]
 8003b98:	0004      	movs	r4, r0
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d102      	bne.n	8003ba4 <sbrk_aligned+0x14>
 8003b9e:	f000 f8bf 	bl	8003d20 <_sbrk_r>
 8003ba2:	6030      	str	r0, [r6, #0]
 8003ba4:	0029      	movs	r1, r5
 8003ba6:	0020      	movs	r0, r4
 8003ba8:	f000 f8ba 	bl	8003d20 <_sbrk_r>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d00a      	beq.n	8003bc6 <sbrk_aligned+0x36>
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	1cc5      	adds	r5, r0, #3
 8003bb4:	439d      	bics	r5, r3
 8003bb6:	42a8      	cmp	r0, r5
 8003bb8:	d007      	beq.n	8003bca <sbrk_aligned+0x3a>
 8003bba:	1a29      	subs	r1, r5, r0
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	f000 f8af 	bl	8003d20 <_sbrk_r>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d101      	bne.n	8003bca <sbrk_aligned+0x3a>
 8003bc6:	2501      	movs	r5, #1
 8003bc8:	426d      	negs	r5, r5
 8003bca:	0028      	movs	r0, r5
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	20000248 	.word	0x20000248

08003bd4 <_malloc_r>:
 8003bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	1ccb      	adds	r3, r1, #3
 8003bda:	4393      	bics	r3, r2
 8003bdc:	3308      	adds	r3, #8
 8003bde:	0006      	movs	r6, r0
 8003be0:	001f      	movs	r7, r3
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d232      	bcs.n	8003c4c <_malloc_r+0x78>
 8003be6:	270c      	movs	r7, #12
 8003be8:	42b9      	cmp	r1, r7
 8003bea:	d831      	bhi.n	8003c50 <_malloc_r+0x7c>
 8003bec:	0030      	movs	r0, r6
 8003bee:	f000 f8a9 	bl	8003d44 <__malloc_lock>
 8003bf2:	4d32      	ldr	r5, [pc, #200]	; (8003cbc <_malloc_r+0xe8>)
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	001c      	movs	r4, r3
 8003bf8:	2c00      	cmp	r4, #0
 8003bfa:	d12e      	bne.n	8003c5a <_malloc_r+0x86>
 8003bfc:	0039      	movs	r1, r7
 8003bfe:	0030      	movs	r0, r6
 8003c00:	f7ff ffc6 	bl	8003b90 <sbrk_aligned>
 8003c04:	0004      	movs	r4, r0
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	d11e      	bne.n	8003c48 <_malloc_r+0x74>
 8003c0a:	682c      	ldr	r4, [r5, #0]
 8003c0c:	0025      	movs	r5, r4
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	d14a      	bne.n	8003ca8 <_malloc_r+0xd4>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	0029      	movs	r1, r5
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	0030      	movs	r0, r6
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	f000 f880 	bl	8003d20 <_sbrk_r>
 8003c20:	9b01      	ldr	r3, [sp, #4]
 8003c22:	4283      	cmp	r3, r0
 8003c24:	d143      	bne.n	8003cae <_malloc_r+0xda>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	3703      	adds	r7, #3
 8003c2a:	1aff      	subs	r7, r7, r3
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	439f      	bics	r7, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	2f0c      	cmp	r7, #12
 8003c34:	d200      	bcs.n	8003c38 <_malloc_r+0x64>
 8003c36:	270c      	movs	r7, #12
 8003c38:	0039      	movs	r1, r7
 8003c3a:	0030      	movs	r0, r6
 8003c3c:	f7ff ffa8 	bl	8003b90 <sbrk_aligned>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d034      	beq.n	8003cae <_malloc_r+0xda>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	19df      	adds	r7, r3, r7
 8003c48:	6027      	str	r7, [r4, #0]
 8003c4a:	e013      	b.n	8003c74 <_malloc_r+0xa0>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	dacb      	bge.n	8003be8 <_malloc_r+0x14>
 8003c50:	230c      	movs	r3, #12
 8003c52:	2500      	movs	r5, #0
 8003c54:	6033      	str	r3, [r6, #0]
 8003c56:	0028      	movs	r0, r5
 8003c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c5a:	6822      	ldr	r2, [r4, #0]
 8003c5c:	1bd1      	subs	r1, r2, r7
 8003c5e:	d420      	bmi.n	8003ca2 <_malloc_r+0xce>
 8003c60:	290b      	cmp	r1, #11
 8003c62:	d917      	bls.n	8003c94 <_malloc_r+0xc0>
 8003c64:	19e2      	adds	r2, r4, r7
 8003c66:	6027      	str	r7, [r4, #0]
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d111      	bne.n	8003c90 <_malloc_r+0xbc>
 8003c6c:	602a      	str	r2, [r5, #0]
 8003c6e:	6863      	ldr	r3, [r4, #4]
 8003c70:	6011      	str	r1, [r2, #0]
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	0030      	movs	r0, r6
 8003c76:	0025      	movs	r5, r4
 8003c78:	f000 f86c 	bl	8003d54 <__malloc_unlock>
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	350b      	adds	r5, #11
 8003c80:	1d23      	adds	r3, r4, #4
 8003c82:	4395      	bics	r5, r2
 8003c84:	1aea      	subs	r2, r5, r3
 8003c86:	429d      	cmp	r5, r3
 8003c88:	d0e5      	beq.n	8003c56 <_malloc_r+0x82>
 8003c8a:	1b5b      	subs	r3, r3, r5
 8003c8c:	50a3      	str	r3, [r4, r2]
 8003c8e:	e7e2      	b.n	8003c56 <_malloc_r+0x82>
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	e7ec      	b.n	8003c6e <_malloc_r+0x9a>
 8003c94:	6862      	ldr	r2, [r4, #4]
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	d101      	bne.n	8003c9e <_malloc_r+0xca>
 8003c9a:	602a      	str	r2, [r5, #0]
 8003c9c:	e7ea      	b.n	8003c74 <_malloc_r+0xa0>
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	e7e8      	b.n	8003c74 <_malloc_r+0xa0>
 8003ca2:	0023      	movs	r3, r4
 8003ca4:	6864      	ldr	r4, [r4, #4]
 8003ca6:	e7a7      	b.n	8003bf8 <_malloc_r+0x24>
 8003ca8:	002c      	movs	r4, r5
 8003caa:	686d      	ldr	r5, [r5, #4]
 8003cac:	e7af      	b.n	8003c0e <_malloc_r+0x3a>
 8003cae:	230c      	movs	r3, #12
 8003cb0:	0030      	movs	r0, r6
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	f000 f84e 	bl	8003d54 <__malloc_unlock>
 8003cb8:	e7cd      	b.n	8003c56 <_malloc_r+0x82>
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	20000244 	.word	0x20000244

08003cc0 <_realloc_r>:
 8003cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc2:	0007      	movs	r7, r0
 8003cc4:	000e      	movs	r6, r1
 8003cc6:	0014      	movs	r4, r2
 8003cc8:	2900      	cmp	r1, #0
 8003cca:	d105      	bne.n	8003cd8 <_realloc_r+0x18>
 8003ccc:	0011      	movs	r1, r2
 8003cce:	f7ff ff81 	bl	8003bd4 <_malloc_r>
 8003cd2:	0005      	movs	r5, r0
 8003cd4:	0028      	movs	r0, r5
 8003cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cd8:	2a00      	cmp	r2, #0
 8003cda:	d103      	bne.n	8003ce4 <_realloc_r+0x24>
 8003cdc:	f7ff ff0e 	bl	8003afc <_free_r>
 8003ce0:	0025      	movs	r5, r4
 8003ce2:	e7f7      	b.n	8003cd4 <_realloc_r+0x14>
 8003ce4:	f000 f83e 	bl	8003d64 <_malloc_usable_size_r>
 8003ce8:	9001      	str	r0, [sp, #4]
 8003cea:	4284      	cmp	r4, r0
 8003cec:	d803      	bhi.n	8003cf6 <_realloc_r+0x36>
 8003cee:	0035      	movs	r5, r6
 8003cf0:	0843      	lsrs	r3, r0, #1
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	d3ee      	bcc.n	8003cd4 <_realloc_r+0x14>
 8003cf6:	0021      	movs	r1, r4
 8003cf8:	0038      	movs	r0, r7
 8003cfa:	f7ff ff6b 	bl	8003bd4 <_malloc_r>
 8003cfe:	1e05      	subs	r5, r0, #0
 8003d00:	d0e8      	beq.n	8003cd4 <_realloc_r+0x14>
 8003d02:	9b01      	ldr	r3, [sp, #4]
 8003d04:	0022      	movs	r2, r4
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d900      	bls.n	8003d0c <_realloc_r+0x4c>
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	0031      	movs	r1, r6
 8003d0e:	0028      	movs	r0, r5
 8003d10:	f7ff fbaa 	bl	8003468 <memcpy>
 8003d14:	0031      	movs	r1, r6
 8003d16:	0038      	movs	r0, r7
 8003d18:	f7ff fef0 	bl	8003afc <_free_r>
 8003d1c:	e7da      	b.n	8003cd4 <_realloc_r+0x14>
	...

08003d20 <_sbrk_r>:
 8003d20:	2300      	movs	r3, #0
 8003d22:	b570      	push	{r4, r5, r6, lr}
 8003d24:	4d06      	ldr	r5, [pc, #24]	; (8003d40 <_sbrk_r+0x20>)
 8003d26:	0004      	movs	r4, r0
 8003d28:	0008      	movs	r0, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	f7fc ff3e 	bl	8000bac <_sbrk>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d103      	bne.n	8003d3c <_sbrk_r+0x1c>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d000      	beq.n	8003d3c <_sbrk_r+0x1c>
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	2000024c 	.word	0x2000024c

08003d44 <__malloc_lock>:
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4802      	ldr	r0, [pc, #8]	; (8003d50 <__malloc_lock+0xc>)
 8003d48:	f000 f814 	bl	8003d74 <__retarget_lock_acquire_recursive>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	20000250 	.word	0x20000250

08003d54 <__malloc_unlock>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4802      	ldr	r0, [pc, #8]	; (8003d60 <__malloc_unlock+0xc>)
 8003d58:	f000 f80d 	bl	8003d76 <__retarget_lock_release_recursive>
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	20000250 	.word	0x20000250

08003d64 <_malloc_usable_size_r>:
 8003d64:	1f0b      	subs	r3, r1, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	1f18      	subs	r0, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da01      	bge.n	8003d72 <_malloc_usable_size_r+0xe>
 8003d6e:	580b      	ldr	r3, [r1, r0]
 8003d70:	18c0      	adds	r0, r0, r3
 8003d72:	4770      	bx	lr

08003d74 <__retarget_lock_acquire_recursive>:
 8003d74:	4770      	bx	lr

08003d76 <__retarget_lock_release_recursive>:
 8003d76:	4770      	bx	lr

08003d78 <_init>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr

08003d84 <_fini>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr
