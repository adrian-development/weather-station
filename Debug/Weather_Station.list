
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063bc  080063bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c4  080063c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080063cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  080063d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080063d8  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001281a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cf  00000000  00000000  0003284e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00035120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000360c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cf8  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014442  00000000  00000000  00049c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070bf1  00000000  00000000  0005e082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cec73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  000cecc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061a8 	.word	0x080061a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080061a8 	.word	0x080061a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0008      	movs	r0, r1
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 fc87 	bl	8000b4c <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 fc13 	bl	8000a74 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 fc79 	bl	8000b4c <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fc6f 	bl	8000b4c <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fc1f 	bl	8000ac0 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 fc15 	bl	8000ac0 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_uldivmod>:
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d111      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	d10f      	bne.n	80002cc <__aeabi_uldivmod+0x28>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	d100      	bne.n	80002b2 <__aeabi_uldivmod+0xe>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d002      	beq.n	80002ba <__aeabi_uldivmod+0x16>
 80002b4:	2100      	movs	r1, #0
 80002b6:	43c9      	mvns	r1, r1
 80002b8:	0008      	movs	r0, r1
 80002ba:	b407      	push	{r0, r1, r2}
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <__aeabi_uldivmod+0x24>)
 80002be:	a102      	add	r1, pc, #8	; (adr r1, 80002c8 <__aeabi_uldivmod+0x24>)
 80002c0:	1840      	adds	r0, r0, r1
 80002c2:	9002      	str	r0, [sp, #8]
 80002c4:	bd03      	pop	{r0, r1, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	ffffff65 	.word	0xffffff65
 80002cc:	b403      	push	{r0, r1}
 80002ce:	4668      	mov	r0, sp
 80002d0:	b501      	push	{r0, lr}
 80002d2:	9802      	ldr	r0, [sp, #8]
 80002d4:	f000 f84c 	bl	8000370 <__udivmoddi4>
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	469e      	mov	lr, r3
 80002dc:	b002      	add	sp, #8
 80002de:	bc0c      	pop	{r2, r3}
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__aeabi_lmul>:
 80002e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e6:	46ce      	mov	lr, r9
 80002e8:	4647      	mov	r7, r8
 80002ea:	b580      	push	{r7, lr}
 80002ec:	0007      	movs	r7, r0
 80002ee:	4699      	mov	r9, r3
 80002f0:	0c3b      	lsrs	r3, r7, #16
 80002f2:	469c      	mov	ip, r3
 80002f4:	0413      	lsls	r3, r2, #16
 80002f6:	0c1b      	lsrs	r3, r3, #16
 80002f8:	001d      	movs	r5, r3
 80002fa:	000e      	movs	r6, r1
 80002fc:	4661      	mov	r1, ip
 80002fe:	0400      	lsls	r0, r0, #16
 8000300:	0c14      	lsrs	r4, r2, #16
 8000302:	0c00      	lsrs	r0, r0, #16
 8000304:	4345      	muls	r5, r0
 8000306:	434b      	muls	r3, r1
 8000308:	4360      	muls	r0, r4
 800030a:	4361      	muls	r1, r4
 800030c:	18c0      	adds	r0, r0, r3
 800030e:	0c2c      	lsrs	r4, r5, #16
 8000310:	1820      	adds	r0, r4, r0
 8000312:	468c      	mov	ip, r1
 8000314:	4283      	cmp	r3, r0
 8000316:	d903      	bls.n	8000320 <__aeabi_lmul+0x3c>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	025b      	lsls	r3, r3, #9
 800031c:	4698      	mov	r8, r3
 800031e:	44c4      	add	ip, r8
 8000320:	4649      	mov	r1, r9
 8000322:	4379      	muls	r1, r7
 8000324:	4372      	muls	r2, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	4463      	add	r3, ip
 800032a:	042d      	lsls	r5, r5, #16
 800032c:	0c2d      	lsrs	r5, r5, #16
 800032e:	18c9      	adds	r1, r1, r3
 8000330:	0400      	lsls	r0, r0, #16
 8000332:	1940      	adds	r0, r0, r5
 8000334:	1889      	adds	r1, r1, r2
 8000336:	bcc0      	pop	{r6, r7}
 8000338:	46b9      	mov	r9, r7
 800033a:	46b0      	mov	r8, r6
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)

08000340 <__aeabi_f2uiz>:
 8000340:	219e      	movs	r1, #158	; 0x9e
 8000342:	b510      	push	{r4, lr}
 8000344:	05c9      	lsls	r1, r1, #23
 8000346:	1c04      	adds	r4, r0, #0
 8000348:	f7ff ffa2 	bl	8000290 <__aeabi_fcmpge>
 800034c:	2800      	cmp	r0, #0
 800034e:	d103      	bne.n	8000358 <__aeabi_f2uiz+0x18>
 8000350:	1c20      	adds	r0, r4, #0
 8000352:	f000 ff13 	bl	800117c <__aeabi_f2iz>
 8000356:	bd10      	pop	{r4, pc}
 8000358:	219e      	movs	r1, #158	; 0x9e
 800035a:	1c20      	adds	r0, r4, #0
 800035c:	05c9      	lsls	r1, r1, #23
 800035e:	f000 fd5f 	bl	8000e20 <__aeabi_fsub>
 8000362:	f000 ff0b 	bl	800117c <__aeabi_f2iz>
 8000366:	2380      	movs	r3, #128	; 0x80
 8000368:	061b      	lsls	r3, r3, #24
 800036a:	469c      	mov	ip, r3
 800036c:	4460      	add	r0, ip
 800036e:	e7f2      	b.n	8000356 <__aeabi_f2uiz+0x16>

08000370 <__udivmoddi4>:
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	4657      	mov	r7, sl
 8000374:	464e      	mov	r6, r9
 8000376:	4645      	mov	r5, r8
 8000378:	46de      	mov	lr, fp
 800037a:	b5e0      	push	{r5, r6, r7, lr}
 800037c:	0004      	movs	r4, r0
 800037e:	000d      	movs	r5, r1
 8000380:	4692      	mov	sl, r2
 8000382:	4699      	mov	r9, r3
 8000384:	b083      	sub	sp, #12
 8000386:	428b      	cmp	r3, r1
 8000388:	d830      	bhi.n	80003ec <__udivmoddi4+0x7c>
 800038a:	d02d      	beq.n	80003e8 <__udivmoddi4+0x78>
 800038c:	4649      	mov	r1, r9
 800038e:	4650      	mov	r0, sl
 8000390:	f000 ffc2 	bl	8001318 <__clzdi2>
 8000394:	0029      	movs	r1, r5
 8000396:	0006      	movs	r6, r0
 8000398:	0020      	movs	r0, r4
 800039a:	f000 ffbd 	bl	8001318 <__clzdi2>
 800039e:	1a33      	subs	r3, r6, r0
 80003a0:	4698      	mov	r8, r3
 80003a2:	3b20      	subs	r3, #32
 80003a4:	469b      	mov	fp, r3
 80003a6:	d433      	bmi.n	8000410 <__udivmoddi4+0xa0>
 80003a8:	465a      	mov	r2, fp
 80003aa:	4653      	mov	r3, sl
 80003ac:	4093      	lsls	r3, r2
 80003ae:	4642      	mov	r2, r8
 80003b0:	001f      	movs	r7, r3
 80003b2:	4653      	mov	r3, sl
 80003b4:	4093      	lsls	r3, r2
 80003b6:	001e      	movs	r6, r3
 80003b8:	42af      	cmp	r7, r5
 80003ba:	d83a      	bhi.n	8000432 <__udivmoddi4+0xc2>
 80003bc:	42af      	cmp	r7, r5
 80003be:	d100      	bne.n	80003c2 <__udivmoddi4+0x52>
 80003c0:	e078      	b.n	80004b4 <__udivmoddi4+0x144>
 80003c2:	465b      	mov	r3, fp
 80003c4:	1ba4      	subs	r4, r4, r6
 80003c6:	41bd      	sbcs	r5, r7
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	da00      	bge.n	80003ce <__udivmoddi4+0x5e>
 80003cc:	e075      	b.n	80004ba <__udivmoddi4+0x14a>
 80003ce:	2200      	movs	r2, #0
 80003d0:	2300      	movs	r3, #0
 80003d2:	9200      	str	r2, [sp, #0]
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2301      	movs	r3, #1
 80003d8:	465a      	mov	r2, fp
 80003da:	4093      	lsls	r3, r2
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	2301      	movs	r3, #1
 80003e0:	4642      	mov	r2, r8
 80003e2:	4093      	lsls	r3, r2
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	e028      	b.n	800043a <__udivmoddi4+0xca>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	d9cf      	bls.n	800038c <__udivmoddi4+0x1c>
 80003ec:	2200      	movs	r2, #0
 80003ee:	2300      	movs	r3, #0
 80003f0:	9200      	str	r2, [sp, #0]
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <__udivmoddi4+0x8e>
 80003fa:	601c      	str	r4, [r3, #0]
 80003fc:	605d      	str	r5, [r3, #4]
 80003fe:	9800      	ldr	r0, [sp, #0]
 8000400:	9901      	ldr	r1, [sp, #4]
 8000402:	b003      	add	sp, #12
 8000404:	bcf0      	pop	{r4, r5, r6, r7}
 8000406:	46bb      	mov	fp, r7
 8000408:	46b2      	mov	sl, r6
 800040a:	46a9      	mov	r9, r5
 800040c:	46a0      	mov	r8, r4
 800040e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	4652      	mov	r2, sl
 8000418:	40da      	lsrs	r2, r3
 800041a:	4641      	mov	r1, r8
 800041c:	0013      	movs	r3, r2
 800041e:	464a      	mov	r2, r9
 8000420:	408a      	lsls	r2, r1
 8000422:	0017      	movs	r7, r2
 8000424:	4642      	mov	r2, r8
 8000426:	431f      	orrs	r7, r3
 8000428:	4653      	mov	r3, sl
 800042a:	4093      	lsls	r3, r2
 800042c:	001e      	movs	r6, r3
 800042e:	42af      	cmp	r7, r5
 8000430:	d9c4      	bls.n	80003bc <__udivmoddi4+0x4c>
 8000432:	2200      	movs	r2, #0
 8000434:	2300      	movs	r3, #0
 8000436:	9200      	str	r2, [sp, #0]
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	4643      	mov	r3, r8
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0d9      	beq.n	80003f4 <__udivmoddi4+0x84>
 8000440:	07fb      	lsls	r3, r7, #31
 8000442:	0872      	lsrs	r2, r6, #1
 8000444:	431a      	orrs	r2, r3
 8000446:	4646      	mov	r6, r8
 8000448:	087b      	lsrs	r3, r7, #1
 800044a:	e00e      	b.n	800046a <__udivmoddi4+0xfa>
 800044c:	42ab      	cmp	r3, r5
 800044e:	d101      	bne.n	8000454 <__udivmoddi4+0xe4>
 8000450:	42a2      	cmp	r2, r4
 8000452:	d80c      	bhi.n	800046e <__udivmoddi4+0xfe>
 8000454:	1aa4      	subs	r4, r4, r2
 8000456:	419d      	sbcs	r5, r3
 8000458:	2001      	movs	r0, #1
 800045a:	1924      	adds	r4, r4, r4
 800045c:	416d      	adcs	r5, r5
 800045e:	2100      	movs	r1, #0
 8000460:	3e01      	subs	r6, #1
 8000462:	1824      	adds	r4, r4, r0
 8000464:	414d      	adcs	r5, r1
 8000466:	2e00      	cmp	r6, #0
 8000468:	d006      	beq.n	8000478 <__udivmoddi4+0x108>
 800046a:	42ab      	cmp	r3, r5
 800046c:	d9ee      	bls.n	800044c <__udivmoddi4+0xdc>
 800046e:	3e01      	subs	r6, #1
 8000470:	1924      	adds	r4, r4, r4
 8000472:	416d      	adcs	r5, r5
 8000474:	2e00      	cmp	r6, #0
 8000476:	d1f8      	bne.n	800046a <__udivmoddi4+0xfa>
 8000478:	9800      	ldr	r0, [sp, #0]
 800047a:	9901      	ldr	r1, [sp, #4]
 800047c:	465b      	mov	r3, fp
 800047e:	1900      	adds	r0, r0, r4
 8000480:	4169      	adcs	r1, r5
 8000482:	2b00      	cmp	r3, #0
 8000484:	db24      	blt.n	80004d0 <__udivmoddi4+0x160>
 8000486:	002b      	movs	r3, r5
 8000488:	465a      	mov	r2, fp
 800048a:	4644      	mov	r4, r8
 800048c:	40d3      	lsrs	r3, r2
 800048e:	002a      	movs	r2, r5
 8000490:	40e2      	lsrs	r2, r4
 8000492:	001c      	movs	r4, r3
 8000494:	465b      	mov	r3, fp
 8000496:	0015      	movs	r5, r2
 8000498:	2b00      	cmp	r3, #0
 800049a:	db2a      	blt.n	80004f2 <__udivmoddi4+0x182>
 800049c:	0026      	movs	r6, r4
 800049e:	409e      	lsls	r6, r3
 80004a0:	0033      	movs	r3, r6
 80004a2:	0026      	movs	r6, r4
 80004a4:	4647      	mov	r7, r8
 80004a6:	40be      	lsls	r6, r7
 80004a8:	0032      	movs	r2, r6
 80004aa:	1a80      	subs	r0, r0, r2
 80004ac:	4199      	sbcs	r1, r3
 80004ae:	9000      	str	r0, [sp, #0]
 80004b0:	9101      	str	r1, [sp, #4]
 80004b2:	e79f      	b.n	80003f4 <__udivmoddi4+0x84>
 80004b4:	42a3      	cmp	r3, r4
 80004b6:	d8bc      	bhi.n	8000432 <__udivmoddi4+0xc2>
 80004b8:	e783      	b.n	80003c2 <__udivmoddi4+0x52>
 80004ba:	4642      	mov	r2, r8
 80004bc:	2320      	movs	r3, #32
 80004be:	2100      	movs	r1, #0
 80004c0:	1a9b      	subs	r3, r3, r2
 80004c2:	2200      	movs	r2, #0
 80004c4:	9100      	str	r1, [sp, #0]
 80004c6:	9201      	str	r2, [sp, #4]
 80004c8:	2201      	movs	r2, #1
 80004ca:	40da      	lsrs	r2, r3
 80004cc:	9201      	str	r2, [sp, #4]
 80004ce:	e786      	b.n	80003de <__udivmoddi4+0x6e>
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	002a      	movs	r2, r5
 80004d8:	4646      	mov	r6, r8
 80004da:	409a      	lsls	r2, r3
 80004dc:	0023      	movs	r3, r4
 80004de:	40f3      	lsrs	r3, r6
 80004e0:	4644      	mov	r4, r8
 80004e2:	4313      	orrs	r3, r2
 80004e4:	002a      	movs	r2, r5
 80004e6:	40e2      	lsrs	r2, r4
 80004e8:	001c      	movs	r4, r3
 80004ea:	465b      	mov	r3, fp
 80004ec:	0015      	movs	r5, r2
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	dad4      	bge.n	800049c <__udivmoddi4+0x12c>
 80004f2:	4642      	mov	r2, r8
 80004f4:	002f      	movs	r7, r5
 80004f6:	2320      	movs	r3, #32
 80004f8:	0026      	movs	r6, r4
 80004fa:	4097      	lsls	r7, r2
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	40de      	lsrs	r6, r3
 8000500:	003b      	movs	r3, r7
 8000502:	4333      	orrs	r3, r6
 8000504:	e7cd      	b.n	80004a2 <__udivmoddi4+0x132>
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fadd>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46c6      	mov	lr, r8
 800050c:	0243      	lsls	r3, r0, #9
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	024e      	lsls	r6, r1, #9
 8000512:	0045      	lsls	r5, r0, #1
 8000514:	004f      	lsls	r7, r1, #1
 8000516:	00da      	lsls	r2, r3, #3
 8000518:	0fc4      	lsrs	r4, r0, #31
 800051a:	469c      	mov	ip, r3
 800051c:	0a70      	lsrs	r0, r6, #9
 800051e:	4690      	mov	r8, r2
 8000520:	b500      	push	{lr}
 8000522:	0e2d      	lsrs	r5, r5, #24
 8000524:	0e3f      	lsrs	r7, r7, #24
 8000526:	0fc9      	lsrs	r1, r1, #31
 8000528:	09b6      	lsrs	r6, r6, #6
 800052a:	428c      	cmp	r4, r1
 800052c:	d04b      	beq.n	80005c6 <__aeabi_fadd+0xbe>
 800052e:	1bea      	subs	r2, r5, r7
 8000530:	2a00      	cmp	r2, #0
 8000532:	dd36      	ble.n	80005a2 <__aeabi_fadd+0x9a>
 8000534:	2f00      	cmp	r7, #0
 8000536:	d061      	beq.n	80005fc <__aeabi_fadd+0xf4>
 8000538:	2dff      	cmp	r5, #255	; 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x36>
 800053c:	e0ad      	b.n	800069a <__aeabi_fadd+0x192>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	04db      	lsls	r3, r3, #19
 8000542:	431e      	orrs	r6, r3
 8000544:	2a1b      	cmp	r2, #27
 8000546:	dc00      	bgt.n	800054a <__aeabi_fadd+0x42>
 8000548:	e0d3      	b.n	80006f2 <__aeabi_fadd+0x1ea>
 800054a:	2001      	movs	r0, #1
 800054c:	4643      	mov	r3, r8
 800054e:	1a18      	subs	r0, r3, r0
 8000550:	0143      	lsls	r3, r0, #5
 8000552:	d400      	bmi.n	8000556 <__aeabi_fadd+0x4e>
 8000554:	e08c      	b.n	8000670 <__aeabi_fadd+0x168>
 8000556:	0180      	lsls	r0, r0, #6
 8000558:	0987      	lsrs	r7, r0, #6
 800055a:	0038      	movs	r0, r7
 800055c:	f000 febe 	bl	80012dc <__clzsi2>
 8000560:	3805      	subs	r0, #5
 8000562:	4087      	lsls	r7, r0
 8000564:	4285      	cmp	r5, r0
 8000566:	dc00      	bgt.n	800056a <__aeabi_fadd+0x62>
 8000568:	e0b6      	b.n	80006d8 <__aeabi_fadd+0x1d0>
 800056a:	1a2d      	subs	r5, r5, r0
 800056c:	48b3      	ldr	r0, [pc, #716]	; (800083c <__aeabi_fadd+0x334>)
 800056e:	4038      	ands	r0, r7
 8000570:	0743      	lsls	r3, r0, #29
 8000572:	d004      	beq.n	800057e <__aeabi_fadd+0x76>
 8000574:	230f      	movs	r3, #15
 8000576:	4003      	ands	r3, r0
 8000578:	2b04      	cmp	r3, #4
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0x76>
 800057c:	3004      	adds	r0, #4
 800057e:	0143      	lsls	r3, r0, #5
 8000580:	d400      	bmi.n	8000584 <__aeabi_fadd+0x7c>
 8000582:	e078      	b.n	8000676 <__aeabi_fadd+0x16e>
 8000584:	1c6a      	adds	r2, r5, #1
 8000586:	2dfe      	cmp	r5, #254	; 0xfe
 8000588:	d065      	beq.n	8000656 <__aeabi_fadd+0x14e>
 800058a:	0180      	lsls	r0, r0, #6
 800058c:	0a43      	lsrs	r3, r0, #9
 800058e:	469c      	mov	ip, r3
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	4663      	mov	r3, ip
 8000594:	05d0      	lsls	r0, r2, #23
 8000596:	4318      	orrs	r0, r3
 8000598:	07e4      	lsls	r4, r4, #31
 800059a:	4320      	orrs	r0, r4
 800059c:	bc80      	pop	{r7}
 800059e:	46b8      	mov	r8, r7
 80005a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a2:	2a00      	cmp	r2, #0
 80005a4:	d035      	beq.n	8000612 <__aeabi_fadd+0x10a>
 80005a6:	1b7a      	subs	r2, r7, r5
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_fadd+0xa6>
 80005ac:	e0af      	b.n	800070e <__aeabi_fadd+0x206>
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_fadd+0xae>
 80005b4:	e0a7      	b.n	8000706 <__aeabi_fadd+0x1fe>
 80005b6:	1e53      	subs	r3, r2, #1
 80005b8:	2a01      	cmp	r2, #1
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0xb6>
 80005bc:	e12f      	b.n	800081e <__aeabi_fadd+0x316>
 80005be:	2aff      	cmp	r2, #255	; 0xff
 80005c0:	d069      	beq.n	8000696 <__aeabi_fadd+0x18e>
 80005c2:	001a      	movs	r2, r3
 80005c4:	e0aa      	b.n	800071c <__aeabi_fadd+0x214>
 80005c6:	1be9      	subs	r1, r5, r7
 80005c8:	2900      	cmp	r1, #0
 80005ca:	dd70      	ble.n	80006ae <__aeabi_fadd+0x1a6>
 80005cc:	2f00      	cmp	r7, #0
 80005ce:	d037      	beq.n	8000640 <__aeabi_fadd+0x138>
 80005d0:	2dff      	cmp	r5, #255	; 0xff
 80005d2:	d062      	beq.n	800069a <__aeabi_fadd+0x192>
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	04db      	lsls	r3, r3, #19
 80005d8:	431e      	orrs	r6, r3
 80005da:	291b      	cmp	r1, #27
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_fadd+0xd8>
 80005de:	e0b0      	b.n	8000742 <__aeabi_fadd+0x23a>
 80005e0:	2001      	movs	r0, #1
 80005e2:	4440      	add	r0, r8
 80005e4:	0143      	lsls	r3, r0, #5
 80005e6:	d543      	bpl.n	8000670 <__aeabi_fadd+0x168>
 80005e8:	3501      	adds	r5, #1
 80005ea:	2dff      	cmp	r5, #255	; 0xff
 80005ec:	d033      	beq.n	8000656 <__aeabi_fadd+0x14e>
 80005ee:	2301      	movs	r3, #1
 80005f0:	4a93      	ldr	r2, [pc, #588]	; (8000840 <__aeabi_fadd+0x338>)
 80005f2:	4003      	ands	r3, r0
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	4010      	ands	r0, r2
 80005f8:	4318      	orrs	r0, r3
 80005fa:	e7b9      	b.n	8000570 <__aeabi_fadd+0x68>
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0xfa>
 8000600:	e083      	b.n	800070a <__aeabi_fadd+0x202>
 8000602:	1e51      	subs	r1, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0x102>
 8000608:	e0d8      	b.n	80007bc <__aeabi_fadd+0x2b4>
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d045      	beq.n	800069a <__aeabi_fadd+0x192>
 800060e:	000a      	movs	r2, r1
 8000610:	e798      	b.n	8000544 <__aeabi_fadd+0x3c>
 8000612:	27fe      	movs	r7, #254	; 0xfe
 8000614:	1c6a      	adds	r2, r5, #1
 8000616:	4217      	tst	r7, r2
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0x114>
 800061a:	e086      	b.n	800072a <__aeabi_fadd+0x222>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0x11a>
 8000620:	e0b7      	b.n	8000792 <__aeabi_fadd+0x28a>
 8000622:	4643      	mov	r3, r8
 8000624:	2b00      	cmp	r3, #0
 8000626:	d100      	bne.n	800062a <__aeabi_fadd+0x122>
 8000628:	e0f3      	b.n	8000812 <__aeabi_fadd+0x30a>
 800062a:	2200      	movs	r2, #0
 800062c:	2e00      	cmp	r6, #0
 800062e:	d0b0      	beq.n	8000592 <__aeabi_fadd+0x8a>
 8000630:	1b98      	subs	r0, r3, r6
 8000632:	0143      	lsls	r3, r0, #5
 8000634:	d400      	bmi.n	8000638 <__aeabi_fadd+0x130>
 8000636:	e0fa      	b.n	800082e <__aeabi_fadd+0x326>
 8000638:	4643      	mov	r3, r8
 800063a:	000c      	movs	r4, r1
 800063c:	1af0      	subs	r0, r6, r3
 800063e:	e797      	b.n	8000570 <__aeabi_fadd+0x68>
 8000640:	2e00      	cmp	r6, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0x13e>
 8000644:	e0c8      	b.n	80007d8 <__aeabi_fadd+0x2d0>
 8000646:	1e4a      	subs	r2, r1, #1
 8000648:	2901      	cmp	r1, #1
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x146>
 800064c:	e0ae      	b.n	80007ac <__aeabi_fadd+0x2a4>
 800064e:	29ff      	cmp	r1, #255	; 0xff
 8000650:	d023      	beq.n	800069a <__aeabi_fadd+0x192>
 8000652:	0011      	movs	r1, r2
 8000654:	e7c1      	b.n	80005da <__aeabi_fadd+0xd2>
 8000656:	2300      	movs	r3, #0
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	469c      	mov	ip, r3
 800065c:	e799      	b.n	8000592 <__aeabi_fadd+0x8a>
 800065e:	21fe      	movs	r1, #254	; 0xfe
 8000660:	1c6a      	adds	r2, r5, #1
 8000662:	4211      	tst	r1, r2
 8000664:	d077      	beq.n	8000756 <__aeabi_fadd+0x24e>
 8000666:	2aff      	cmp	r2, #255	; 0xff
 8000668:	d0f5      	beq.n	8000656 <__aeabi_fadd+0x14e>
 800066a:	0015      	movs	r5, r2
 800066c:	4446      	add	r6, r8
 800066e:	0870      	lsrs	r0, r6, #1
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d000      	beq.n	8000676 <__aeabi_fadd+0x16e>
 8000674:	e77e      	b.n	8000574 <__aeabi_fadd+0x6c>
 8000676:	08c3      	lsrs	r3, r0, #3
 8000678:	2dff      	cmp	r5, #255	; 0xff
 800067a:	d00e      	beq.n	800069a <__aeabi_fadd+0x192>
 800067c:	025b      	lsls	r3, r3, #9
 800067e:	0a5b      	lsrs	r3, r3, #9
 8000680:	469c      	mov	ip, r3
 8000682:	b2ea      	uxtb	r2, r5
 8000684:	e785      	b.n	8000592 <__aeabi_fadd+0x8a>
 8000686:	2e00      	cmp	r6, #0
 8000688:	d007      	beq.n	800069a <__aeabi_fadd+0x192>
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	03d2      	lsls	r2, r2, #15
 800068e:	4213      	tst	r3, r2
 8000690:	d003      	beq.n	800069a <__aeabi_fadd+0x192>
 8000692:	4210      	tst	r0, r2
 8000694:	d101      	bne.n	800069a <__aeabi_fadd+0x192>
 8000696:	000c      	movs	r4, r1
 8000698:	0003      	movs	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0db      	beq.n	8000656 <__aeabi_fadd+0x14e>
 800069e:	2080      	movs	r0, #128	; 0x80
 80006a0:	03c0      	lsls	r0, r0, #15
 80006a2:	4318      	orrs	r0, r3
 80006a4:	0240      	lsls	r0, r0, #9
 80006a6:	0a43      	lsrs	r3, r0, #9
 80006a8:	469c      	mov	ip, r3
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	e771      	b.n	8000592 <__aeabi_fadd+0x8a>
 80006ae:	2900      	cmp	r1, #0
 80006b0:	d0d5      	beq.n	800065e <__aeabi_fadd+0x156>
 80006b2:	1b7a      	subs	r2, r7, r5
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d160      	bne.n	800077a <__aeabi_fadd+0x272>
 80006b8:	4643      	mov	r3, r8
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d024      	beq.n	8000708 <__aeabi_fadd+0x200>
 80006be:	1e53      	subs	r3, r2, #1
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d073      	beq.n	80007ac <__aeabi_fadd+0x2a4>
 80006c4:	2aff      	cmp	r2, #255	; 0xff
 80006c6:	d0e7      	beq.n	8000698 <__aeabi_fadd+0x190>
 80006c8:	001a      	movs	r2, r3
 80006ca:	2a1b      	cmp	r2, #27
 80006cc:	dc00      	bgt.n	80006d0 <__aeabi_fadd+0x1c8>
 80006ce:	e085      	b.n	80007dc <__aeabi_fadd+0x2d4>
 80006d0:	2001      	movs	r0, #1
 80006d2:	003d      	movs	r5, r7
 80006d4:	1980      	adds	r0, r0, r6
 80006d6:	e785      	b.n	80005e4 <__aeabi_fadd+0xdc>
 80006d8:	2320      	movs	r3, #32
 80006da:	003a      	movs	r2, r7
 80006dc:	1b45      	subs	r5, r0, r5
 80006de:	0038      	movs	r0, r7
 80006e0:	3501      	adds	r5, #1
 80006e2:	40ea      	lsrs	r2, r5
 80006e4:	1b5d      	subs	r5, r3, r5
 80006e6:	40a8      	lsls	r0, r5
 80006e8:	1e43      	subs	r3, r0, #1
 80006ea:	4198      	sbcs	r0, r3
 80006ec:	2500      	movs	r5, #0
 80006ee:	4310      	orrs	r0, r2
 80006f0:	e73e      	b.n	8000570 <__aeabi_fadd+0x68>
 80006f2:	2320      	movs	r3, #32
 80006f4:	0030      	movs	r0, r6
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	0031      	movs	r1, r6
 80006fa:	4098      	lsls	r0, r3
 80006fc:	40d1      	lsrs	r1, r2
 80006fe:	1e43      	subs	r3, r0, #1
 8000700:	4198      	sbcs	r0, r3
 8000702:	4308      	orrs	r0, r1
 8000704:	e722      	b.n	800054c <__aeabi_fadd+0x44>
 8000706:	000c      	movs	r4, r1
 8000708:	0003      	movs	r3, r0
 800070a:	0015      	movs	r5, r2
 800070c:	e7b4      	b.n	8000678 <__aeabi_fadd+0x170>
 800070e:	2fff      	cmp	r7, #255	; 0xff
 8000710:	d0c1      	beq.n	8000696 <__aeabi_fadd+0x18e>
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	4640      	mov	r0, r8
 8000716:	04db      	lsls	r3, r3, #19
 8000718:	4318      	orrs	r0, r3
 800071a:	4680      	mov	r8, r0
 800071c:	2a1b      	cmp	r2, #27
 800071e:	dd51      	ble.n	80007c4 <__aeabi_fadd+0x2bc>
 8000720:	2001      	movs	r0, #1
 8000722:	000c      	movs	r4, r1
 8000724:	003d      	movs	r5, r7
 8000726:	1a30      	subs	r0, r6, r0
 8000728:	e712      	b.n	8000550 <__aeabi_fadd+0x48>
 800072a:	4643      	mov	r3, r8
 800072c:	1b9f      	subs	r7, r3, r6
 800072e:	017b      	lsls	r3, r7, #5
 8000730:	d42b      	bmi.n	800078a <__aeabi_fadd+0x282>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x230>
 8000736:	e710      	b.n	800055a <__aeabi_fadd+0x52>
 8000738:	2300      	movs	r3, #0
 800073a:	2400      	movs	r4, #0
 800073c:	2200      	movs	r2, #0
 800073e:	469c      	mov	ip, r3
 8000740:	e727      	b.n	8000592 <__aeabi_fadd+0x8a>
 8000742:	2320      	movs	r3, #32
 8000744:	0032      	movs	r2, r6
 8000746:	0030      	movs	r0, r6
 8000748:	40ca      	lsrs	r2, r1
 800074a:	1a59      	subs	r1, r3, r1
 800074c:	4088      	lsls	r0, r1
 800074e:	1e43      	subs	r3, r0, #1
 8000750:	4198      	sbcs	r0, r3
 8000752:	4310      	orrs	r0, r2
 8000754:	e745      	b.n	80005e2 <__aeabi_fadd+0xda>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d14a      	bne.n	80007f0 <__aeabi_fadd+0x2e8>
 800075a:	4643      	mov	r3, r8
 800075c:	2b00      	cmp	r3, #0
 800075e:	d063      	beq.n	8000828 <__aeabi_fadd+0x320>
 8000760:	2200      	movs	r2, #0
 8000762:	2e00      	cmp	r6, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x260>
 8000766:	e714      	b.n	8000592 <__aeabi_fadd+0x8a>
 8000768:	0030      	movs	r0, r6
 800076a:	4440      	add	r0, r8
 800076c:	0143      	lsls	r3, r0, #5
 800076e:	d400      	bmi.n	8000772 <__aeabi_fadd+0x26a>
 8000770:	e77e      	b.n	8000670 <__aeabi_fadd+0x168>
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <__aeabi_fadd+0x334>)
 8000774:	3501      	adds	r5, #1
 8000776:	4018      	ands	r0, r3
 8000778:	e77a      	b.n	8000670 <__aeabi_fadd+0x168>
 800077a:	2fff      	cmp	r7, #255	; 0xff
 800077c:	d08c      	beq.n	8000698 <__aeabi_fadd+0x190>
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	4641      	mov	r1, r8
 8000782:	04db      	lsls	r3, r3, #19
 8000784:	4319      	orrs	r1, r3
 8000786:	4688      	mov	r8, r1
 8000788:	e79f      	b.n	80006ca <__aeabi_fadd+0x1c2>
 800078a:	4643      	mov	r3, r8
 800078c:	000c      	movs	r4, r1
 800078e:	1af7      	subs	r7, r6, r3
 8000790:	e6e3      	b.n	800055a <__aeabi_fadd+0x52>
 8000792:	4642      	mov	r2, r8
 8000794:	2a00      	cmp	r2, #0
 8000796:	d000      	beq.n	800079a <__aeabi_fadd+0x292>
 8000798:	e775      	b.n	8000686 <__aeabi_fadd+0x17e>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x298>
 800079e:	e77a      	b.n	8000696 <__aeabi_fadd+0x18e>
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	03db      	lsls	r3, r3, #15
 80007a4:	2400      	movs	r4, #0
 80007a6:	469c      	mov	ip, r3
 80007a8:	22ff      	movs	r2, #255	; 0xff
 80007aa:	e6f2      	b.n	8000592 <__aeabi_fadd+0x8a>
 80007ac:	0030      	movs	r0, r6
 80007ae:	4440      	add	r0, r8
 80007b0:	2501      	movs	r5, #1
 80007b2:	0143      	lsls	r3, r0, #5
 80007b4:	d400      	bmi.n	80007b8 <__aeabi_fadd+0x2b0>
 80007b6:	e75b      	b.n	8000670 <__aeabi_fadd+0x168>
 80007b8:	2502      	movs	r5, #2
 80007ba:	e718      	b.n	80005ee <__aeabi_fadd+0xe6>
 80007bc:	4643      	mov	r3, r8
 80007be:	2501      	movs	r5, #1
 80007c0:	1b98      	subs	r0, r3, r6
 80007c2:	e6c5      	b.n	8000550 <__aeabi_fadd+0x48>
 80007c4:	2320      	movs	r3, #32
 80007c6:	4644      	mov	r4, r8
 80007c8:	4640      	mov	r0, r8
 80007ca:	40d4      	lsrs	r4, r2
 80007cc:	1a9a      	subs	r2, r3, r2
 80007ce:	4090      	lsls	r0, r2
 80007d0:	1e43      	subs	r3, r0, #1
 80007d2:	4198      	sbcs	r0, r3
 80007d4:	4320      	orrs	r0, r4
 80007d6:	e7a4      	b.n	8000722 <__aeabi_fadd+0x21a>
 80007d8:	000d      	movs	r5, r1
 80007da:	e74d      	b.n	8000678 <__aeabi_fadd+0x170>
 80007dc:	2320      	movs	r3, #32
 80007de:	4641      	mov	r1, r8
 80007e0:	4640      	mov	r0, r8
 80007e2:	40d1      	lsrs	r1, r2
 80007e4:	1a9a      	subs	r2, r3, r2
 80007e6:	4090      	lsls	r0, r2
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	4308      	orrs	r0, r1
 80007ee:	e770      	b.n	80006d2 <__aeabi_fadd+0x1ca>
 80007f0:	4642      	mov	r2, r8
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x2f0>
 80007f6:	e74f      	b.n	8000698 <__aeabi_fadd+0x190>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x2f6>
 80007fc:	e74d      	b.n	800069a <__aeabi_fadd+0x192>
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4213      	tst	r3, r2
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x300>
 8000806:	e748      	b.n	800069a <__aeabi_fadd+0x192>
 8000808:	4210      	tst	r0, r2
 800080a:	d000      	beq.n	800080e <__aeabi_fadd+0x306>
 800080c:	e745      	b.n	800069a <__aeabi_fadd+0x192>
 800080e:	0003      	movs	r3, r0
 8000810:	e743      	b.n	800069a <__aeabi_fadd+0x192>
 8000812:	2e00      	cmp	r6, #0
 8000814:	d090      	beq.n	8000738 <__aeabi_fadd+0x230>
 8000816:	000c      	movs	r4, r1
 8000818:	4684      	mov	ip, r0
 800081a:	2200      	movs	r2, #0
 800081c:	e6b9      	b.n	8000592 <__aeabi_fadd+0x8a>
 800081e:	4643      	mov	r3, r8
 8000820:	000c      	movs	r4, r1
 8000822:	1af0      	subs	r0, r6, r3
 8000824:	3501      	adds	r5, #1
 8000826:	e693      	b.n	8000550 <__aeabi_fadd+0x48>
 8000828:	4684      	mov	ip, r0
 800082a:	2200      	movs	r2, #0
 800082c:	e6b1      	b.n	8000592 <__aeabi_fadd+0x8a>
 800082e:	2800      	cmp	r0, #0
 8000830:	d000      	beq.n	8000834 <__aeabi_fadd+0x32c>
 8000832:	e71d      	b.n	8000670 <__aeabi_fadd+0x168>
 8000834:	2300      	movs	r3, #0
 8000836:	2400      	movs	r4, #0
 8000838:	469c      	mov	ip, r3
 800083a:	e6aa      	b.n	8000592 <__aeabi_fadd+0x8a>
 800083c:	fbffffff 	.word	0xfbffffff
 8000840:	7dffffff 	.word	0x7dffffff

08000844 <__aeabi_fdiv>:
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	464f      	mov	r7, r9
 8000848:	4646      	mov	r6, r8
 800084a:	46d6      	mov	lr, sl
 800084c:	0245      	lsls	r5, r0, #9
 800084e:	b5c0      	push	{r6, r7, lr}
 8000850:	0047      	lsls	r7, r0, #1
 8000852:	1c0c      	adds	r4, r1, #0
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	0e3f      	lsrs	r7, r7, #24
 8000858:	0fc6      	lsrs	r6, r0, #31
 800085a:	2f00      	cmp	r7, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fdiv+0x1c>
 800085e:	e070      	b.n	8000942 <__aeabi_fdiv+0xfe>
 8000860:	2fff      	cmp	r7, #255	; 0xff
 8000862:	d100      	bne.n	8000866 <__aeabi_fdiv+0x22>
 8000864:	e075      	b.n	8000952 <__aeabi_fdiv+0x10e>
 8000866:	00eb      	lsls	r3, r5, #3
 8000868:	2580      	movs	r5, #128	; 0x80
 800086a:	04ed      	lsls	r5, r5, #19
 800086c:	431d      	orrs	r5, r3
 800086e:	2300      	movs	r3, #0
 8000870:	4699      	mov	r9, r3
 8000872:	469a      	mov	sl, r3
 8000874:	3f7f      	subs	r7, #127	; 0x7f
 8000876:	0260      	lsls	r0, r4, #9
 8000878:	0a43      	lsrs	r3, r0, #9
 800087a:	4698      	mov	r8, r3
 800087c:	0063      	lsls	r3, r4, #1
 800087e:	0e1b      	lsrs	r3, r3, #24
 8000880:	0fe4      	lsrs	r4, r4, #31
 8000882:	2b00      	cmp	r3, #0
 8000884:	d04e      	beq.n	8000924 <__aeabi_fdiv+0xe0>
 8000886:	2bff      	cmp	r3, #255	; 0xff
 8000888:	d046      	beq.n	8000918 <__aeabi_fdiv+0xd4>
 800088a:	4642      	mov	r2, r8
 800088c:	00d0      	lsls	r0, r2, #3
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	04d2      	lsls	r2, r2, #19
 8000892:	4302      	orrs	r2, r0
 8000894:	4690      	mov	r8, r2
 8000896:	2200      	movs	r2, #0
 8000898:	3b7f      	subs	r3, #127	; 0x7f
 800089a:	0031      	movs	r1, r6
 800089c:	1aff      	subs	r7, r7, r3
 800089e:	464b      	mov	r3, r9
 80008a0:	4061      	eors	r1, r4
 80008a2:	b2c9      	uxtb	r1, r1
 80008a4:	4313      	orrs	r3, r2
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d900      	bls.n	80008ac <__aeabi_fdiv+0x68>
 80008aa:	e0b5      	b.n	8000a18 <__aeabi_fdiv+0x1d4>
 80008ac:	486e      	ldr	r0, [pc, #440]	; (8000a68 <__aeabi_fdiv+0x224>)
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	58c3      	ldr	r3, [r0, r3]
 80008b2:	469f      	mov	pc, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	4698      	mov	r8, r3
 80008b8:	0026      	movs	r6, r4
 80008ba:	4645      	mov	r5, r8
 80008bc:	4692      	mov	sl, r2
 80008be:	4653      	mov	r3, sl
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fdiv+0x82>
 80008c4:	e089      	b.n	80009da <__aeabi_fdiv+0x196>
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d100      	bne.n	80008cc <__aeabi_fdiv+0x88>
 80008ca:	e09e      	b.n	8000a0a <__aeabi_fdiv+0x1c6>
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d018      	beq.n	8000902 <__aeabi_fdiv+0xbe>
 80008d0:	003b      	movs	r3, r7
 80008d2:	337f      	adds	r3, #127	; 0x7f
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd69      	ble.n	80009ac <__aeabi_fdiv+0x168>
 80008d8:	076a      	lsls	r2, r5, #29
 80008da:	d004      	beq.n	80008e6 <__aeabi_fdiv+0xa2>
 80008dc:	220f      	movs	r2, #15
 80008de:	402a      	ands	r2, r5
 80008e0:	2a04      	cmp	r2, #4
 80008e2:	d000      	beq.n	80008e6 <__aeabi_fdiv+0xa2>
 80008e4:	3504      	adds	r5, #4
 80008e6:	012a      	lsls	r2, r5, #4
 80008e8:	d503      	bpl.n	80008f2 <__aeabi_fdiv+0xae>
 80008ea:	4b60      	ldr	r3, [pc, #384]	; (8000a6c <__aeabi_fdiv+0x228>)
 80008ec:	401d      	ands	r5, r3
 80008ee:	003b      	movs	r3, r7
 80008f0:	3380      	adds	r3, #128	; 0x80
 80008f2:	2bfe      	cmp	r3, #254	; 0xfe
 80008f4:	dd00      	ble.n	80008f8 <__aeabi_fdiv+0xb4>
 80008f6:	e070      	b.n	80009da <__aeabi_fdiv+0x196>
 80008f8:	01ad      	lsls	r5, r5, #6
 80008fa:	0a6d      	lsrs	r5, r5, #9
 80008fc:	b2d8      	uxtb	r0, r3
 80008fe:	e002      	b.n	8000906 <__aeabi_fdiv+0xc2>
 8000900:	000e      	movs	r6, r1
 8000902:	2000      	movs	r0, #0
 8000904:	2500      	movs	r5, #0
 8000906:	05c0      	lsls	r0, r0, #23
 8000908:	4328      	orrs	r0, r5
 800090a:	07f6      	lsls	r6, r6, #31
 800090c:	4330      	orrs	r0, r6
 800090e:	bce0      	pop	{r5, r6, r7}
 8000910:	46ba      	mov	sl, r7
 8000912:	46b1      	mov	r9, r6
 8000914:	46a8      	mov	r8, r5
 8000916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000918:	4643      	mov	r3, r8
 800091a:	2b00      	cmp	r3, #0
 800091c:	d13f      	bne.n	800099e <__aeabi_fdiv+0x15a>
 800091e:	2202      	movs	r2, #2
 8000920:	3fff      	subs	r7, #255	; 0xff
 8000922:	e003      	b.n	800092c <__aeabi_fdiv+0xe8>
 8000924:	4643      	mov	r3, r8
 8000926:	2b00      	cmp	r3, #0
 8000928:	d12d      	bne.n	8000986 <__aeabi_fdiv+0x142>
 800092a:	2201      	movs	r2, #1
 800092c:	0031      	movs	r1, r6
 800092e:	464b      	mov	r3, r9
 8000930:	4061      	eors	r1, r4
 8000932:	b2c9      	uxtb	r1, r1
 8000934:	4313      	orrs	r3, r2
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d834      	bhi.n	80009a4 <__aeabi_fdiv+0x160>
 800093a:	484d      	ldr	r0, [pc, #308]	; (8000a70 <__aeabi_fdiv+0x22c>)
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	58c3      	ldr	r3, [r0, r3]
 8000940:	469f      	mov	pc, r3
 8000942:	2d00      	cmp	r5, #0
 8000944:	d113      	bne.n	800096e <__aeabi_fdiv+0x12a>
 8000946:	2304      	movs	r3, #4
 8000948:	4699      	mov	r9, r3
 800094a:	3b03      	subs	r3, #3
 800094c:	2700      	movs	r7, #0
 800094e:	469a      	mov	sl, r3
 8000950:	e791      	b.n	8000876 <__aeabi_fdiv+0x32>
 8000952:	2d00      	cmp	r5, #0
 8000954:	d105      	bne.n	8000962 <__aeabi_fdiv+0x11e>
 8000956:	2308      	movs	r3, #8
 8000958:	4699      	mov	r9, r3
 800095a:	3b06      	subs	r3, #6
 800095c:	27ff      	movs	r7, #255	; 0xff
 800095e:	469a      	mov	sl, r3
 8000960:	e789      	b.n	8000876 <__aeabi_fdiv+0x32>
 8000962:	230c      	movs	r3, #12
 8000964:	4699      	mov	r9, r3
 8000966:	3b09      	subs	r3, #9
 8000968:	27ff      	movs	r7, #255	; 0xff
 800096a:	469a      	mov	sl, r3
 800096c:	e783      	b.n	8000876 <__aeabi_fdiv+0x32>
 800096e:	0028      	movs	r0, r5
 8000970:	f000 fcb4 	bl	80012dc <__clzsi2>
 8000974:	2776      	movs	r7, #118	; 0x76
 8000976:	1f43      	subs	r3, r0, #5
 8000978:	409d      	lsls	r5, r3
 800097a:	2300      	movs	r3, #0
 800097c:	427f      	negs	r7, r7
 800097e:	4699      	mov	r9, r3
 8000980:	469a      	mov	sl, r3
 8000982:	1a3f      	subs	r7, r7, r0
 8000984:	e777      	b.n	8000876 <__aeabi_fdiv+0x32>
 8000986:	4640      	mov	r0, r8
 8000988:	f000 fca8 	bl	80012dc <__clzsi2>
 800098c:	4642      	mov	r2, r8
 800098e:	1f43      	subs	r3, r0, #5
 8000990:	409a      	lsls	r2, r3
 8000992:	2376      	movs	r3, #118	; 0x76
 8000994:	425b      	negs	r3, r3
 8000996:	4690      	mov	r8, r2
 8000998:	1a1b      	subs	r3, r3, r0
 800099a:	2200      	movs	r2, #0
 800099c:	e77d      	b.n	800089a <__aeabi_fdiv+0x56>
 800099e:	23ff      	movs	r3, #255	; 0xff
 80009a0:	2203      	movs	r2, #3
 80009a2:	e77a      	b.n	800089a <__aeabi_fdiv+0x56>
 80009a4:	000e      	movs	r6, r1
 80009a6:	20ff      	movs	r0, #255	; 0xff
 80009a8:	2500      	movs	r5, #0
 80009aa:	e7ac      	b.n	8000906 <__aeabi_fdiv+0xc2>
 80009ac:	2001      	movs	r0, #1
 80009ae:	1ac0      	subs	r0, r0, r3
 80009b0:	281b      	cmp	r0, #27
 80009b2:	dca6      	bgt.n	8000902 <__aeabi_fdiv+0xbe>
 80009b4:	379e      	adds	r7, #158	; 0x9e
 80009b6:	002a      	movs	r2, r5
 80009b8:	40bd      	lsls	r5, r7
 80009ba:	40c2      	lsrs	r2, r0
 80009bc:	1e6b      	subs	r3, r5, #1
 80009be:	419d      	sbcs	r5, r3
 80009c0:	4315      	orrs	r5, r2
 80009c2:	076b      	lsls	r3, r5, #29
 80009c4:	d004      	beq.n	80009d0 <__aeabi_fdiv+0x18c>
 80009c6:	230f      	movs	r3, #15
 80009c8:	402b      	ands	r3, r5
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fdiv+0x18c>
 80009ce:	3504      	adds	r5, #4
 80009d0:	016b      	lsls	r3, r5, #5
 80009d2:	d544      	bpl.n	8000a5e <__aeabi_fdiv+0x21a>
 80009d4:	2001      	movs	r0, #1
 80009d6:	2500      	movs	r5, #0
 80009d8:	e795      	b.n	8000906 <__aeabi_fdiv+0xc2>
 80009da:	20ff      	movs	r0, #255	; 0xff
 80009dc:	2500      	movs	r5, #0
 80009de:	e792      	b.n	8000906 <__aeabi_fdiv+0xc2>
 80009e0:	2580      	movs	r5, #128	; 0x80
 80009e2:	2600      	movs	r6, #0
 80009e4:	20ff      	movs	r0, #255	; 0xff
 80009e6:	03ed      	lsls	r5, r5, #15
 80009e8:	e78d      	b.n	8000906 <__aeabi_fdiv+0xc2>
 80009ea:	2300      	movs	r3, #0
 80009ec:	4698      	mov	r8, r3
 80009ee:	2080      	movs	r0, #128	; 0x80
 80009f0:	03c0      	lsls	r0, r0, #15
 80009f2:	4205      	tst	r5, r0
 80009f4:	d009      	beq.n	8000a0a <__aeabi_fdiv+0x1c6>
 80009f6:	4643      	mov	r3, r8
 80009f8:	4203      	tst	r3, r0
 80009fa:	d106      	bne.n	8000a0a <__aeabi_fdiv+0x1c6>
 80009fc:	4645      	mov	r5, r8
 80009fe:	4305      	orrs	r5, r0
 8000a00:	026d      	lsls	r5, r5, #9
 8000a02:	0026      	movs	r6, r4
 8000a04:	20ff      	movs	r0, #255	; 0xff
 8000a06:	0a6d      	lsrs	r5, r5, #9
 8000a08:	e77d      	b.n	8000906 <__aeabi_fdiv+0xc2>
 8000a0a:	2080      	movs	r0, #128	; 0x80
 8000a0c:	03c0      	lsls	r0, r0, #15
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	026d      	lsls	r5, r5, #9
 8000a12:	20ff      	movs	r0, #255	; 0xff
 8000a14:	0a6d      	lsrs	r5, r5, #9
 8000a16:	e776      	b.n	8000906 <__aeabi_fdiv+0xc2>
 8000a18:	4642      	mov	r2, r8
 8000a1a:	016b      	lsls	r3, r5, #5
 8000a1c:	0150      	lsls	r0, r2, #5
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	d219      	bcs.n	8000a56 <__aeabi_fdiv+0x212>
 8000a22:	221b      	movs	r2, #27
 8000a24:	2500      	movs	r5, #0
 8000a26:	3f01      	subs	r7, #1
 8000a28:	2601      	movs	r6, #1
 8000a2a:	001c      	movs	r4, r3
 8000a2c:	006d      	lsls	r5, r5, #1
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	db01      	blt.n	8000a38 <__aeabi_fdiv+0x1f4>
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d801      	bhi.n	8000a3c <__aeabi_fdiv+0x1f8>
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	4335      	orrs	r5, r6
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d1f3      	bne.n	8000a2a <__aeabi_fdiv+0x1e6>
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	4193      	sbcs	r3, r2
 8000a46:	431d      	orrs	r5, r3
 8000a48:	003b      	movs	r3, r7
 8000a4a:	337f      	adds	r3, #127	; 0x7f
 8000a4c:	000e      	movs	r6, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	dd00      	ble.n	8000a54 <__aeabi_fdiv+0x210>
 8000a52:	e741      	b.n	80008d8 <__aeabi_fdiv+0x94>
 8000a54:	e7aa      	b.n	80009ac <__aeabi_fdiv+0x168>
 8000a56:	221a      	movs	r2, #26
 8000a58:	2501      	movs	r5, #1
 8000a5a:	1a1b      	subs	r3, r3, r0
 8000a5c:	e7e4      	b.n	8000a28 <__aeabi_fdiv+0x1e4>
 8000a5e:	01ad      	lsls	r5, r5, #6
 8000a60:	2000      	movs	r0, #0
 8000a62:	0a6d      	lsrs	r5, r5, #9
 8000a64:	e74f      	b.n	8000906 <__aeabi_fdiv+0xc2>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	08006290 	.word	0x08006290
 8000a6c:	f7ffffff 	.word	0xf7ffffff
 8000a70:	080062d0 	.word	0x080062d0

08000a74 <__eqsf2>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	0042      	lsls	r2, r0, #1
 8000a78:	0245      	lsls	r5, r0, #9
 8000a7a:	024e      	lsls	r6, r1, #9
 8000a7c:	004c      	lsls	r4, r1, #1
 8000a7e:	0fc3      	lsrs	r3, r0, #31
 8000a80:	0a6d      	lsrs	r5, r5, #9
 8000a82:	2001      	movs	r0, #1
 8000a84:	0e12      	lsrs	r2, r2, #24
 8000a86:	0a76      	lsrs	r6, r6, #9
 8000a88:	0e24      	lsrs	r4, r4, #24
 8000a8a:	0fc9      	lsrs	r1, r1, #31
 8000a8c:	2aff      	cmp	r2, #255	; 0xff
 8000a8e:	d006      	beq.n	8000a9e <__eqsf2+0x2a>
 8000a90:	2cff      	cmp	r4, #255	; 0xff
 8000a92:	d003      	beq.n	8000a9c <__eqsf2+0x28>
 8000a94:	42a2      	cmp	r2, r4
 8000a96:	d101      	bne.n	8000a9c <__eqsf2+0x28>
 8000a98:	42b5      	cmp	r5, r6
 8000a9a:	d006      	beq.n	8000aaa <__eqsf2+0x36>
 8000a9c:	bd70      	pop	{r4, r5, r6, pc}
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d1fc      	bne.n	8000a9c <__eqsf2+0x28>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d1fa      	bne.n	8000a9c <__eqsf2+0x28>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d1f8      	bne.n	8000a9c <__eqsf2+0x28>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d006      	beq.n	8000abc <__eqsf2+0x48>
 8000aae:	2001      	movs	r0, #1
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d1f3      	bne.n	8000a9c <__eqsf2+0x28>
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	1e43      	subs	r3, r0, #1
 8000ab8:	4198      	sbcs	r0, r3
 8000aba:	e7ef      	b.n	8000a9c <__eqsf2+0x28>
 8000abc:	2000      	movs	r0, #0
 8000abe:	e7ed      	b.n	8000a9c <__eqsf2+0x28>

08000ac0 <__gesf2>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	024e      	lsls	r6, r1, #9
 8000ac8:	004c      	lsls	r4, r1, #1
 8000aca:	0fc3      	lsrs	r3, r0, #31
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	0e12      	lsrs	r2, r2, #24
 8000ad0:	0a76      	lsrs	r6, r6, #9
 8000ad2:	0e24      	lsrs	r4, r4, #24
 8000ad4:	0fc8      	lsrs	r0, r1, #31
 8000ad6:	2aff      	cmp	r2, #255	; 0xff
 8000ad8:	d01b      	beq.n	8000b12 <__gesf2+0x52>
 8000ada:	2cff      	cmp	r4, #255	; 0xff
 8000adc:	d00e      	beq.n	8000afc <__gesf2+0x3c>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d11b      	bne.n	8000b1a <__gesf2+0x5a>
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	d101      	bne.n	8000aea <__gesf2+0x2a>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d01c      	beq.n	8000b24 <__gesf2+0x64>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d00c      	beq.n	8000b08 <__gesf2+0x48>
 8000aee:	4283      	cmp	r3, r0
 8000af0:	d01c      	beq.n	8000b2c <__gesf2+0x6c>
 8000af2:	2102      	movs	r1, #2
 8000af4:	1e58      	subs	r0, r3, #1
 8000af6:	4008      	ands	r0, r1
 8000af8:	3801      	subs	r0, #1
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d122      	bne.n	8000b46 <__gesf2+0x86>
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d1f4      	bne.n	8000aee <__gesf2+0x2e>
 8000b04:	2d00      	cmp	r5, #0
 8000b06:	d1f2      	bne.n	8000aee <__gesf2+0x2e>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d1f6      	bne.n	8000afa <__gesf2+0x3a>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	4240      	negs	r0, r0
 8000b10:	e7f3      	b.n	8000afa <__gesf2+0x3a>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d117      	bne.n	8000b46 <__gesf2+0x86>
 8000b16:	2cff      	cmp	r4, #255	; 0xff
 8000b18:	d0f0      	beq.n	8000afc <__gesf2+0x3c>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d1e7      	bne.n	8000aee <__gesf2+0x2e>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d1e5      	bne.n	8000aee <__gesf2+0x2e>
 8000b22:	e7e6      	b.n	8000af2 <__gesf2+0x32>
 8000b24:	2000      	movs	r0, #0
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d0e7      	beq.n	8000afa <__gesf2+0x3a>
 8000b2a:	e7e2      	b.n	8000af2 <__gesf2+0x32>
 8000b2c:	42a2      	cmp	r2, r4
 8000b2e:	dc05      	bgt.n	8000b3c <__gesf2+0x7c>
 8000b30:	dbea      	blt.n	8000b08 <__gesf2+0x48>
 8000b32:	42b5      	cmp	r5, r6
 8000b34:	d802      	bhi.n	8000b3c <__gesf2+0x7c>
 8000b36:	d3e7      	bcc.n	8000b08 <__gesf2+0x48>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	e7de      	b.n	8000afa <__gesf2+0x3a>
 8000b3c:	4243      	negs	r3, r0
 8000b3e:	4158      	adcs	r0, r3
 8000b40:	0040      	lsls	r0, r0, #1
 8000b42:	3801      	subs	r0, #1
 8000b44:	e7d9      	b.n	8000afa <__gesf2+0x3a>
 8000b46:	2002      	movs	r0, #2
 8000b48:	4240      	negs	r0, r0
 8000b4a:	e7d6      	b.n	8000afa <__gesf2+0x3a>

08000b4c <__lesf2>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	0042      	lsls	r2, r0, #1
 8000b50:	0245      	lsls	r5, r0, #9
 8000b52:	024e      	lsls	r6, r1, #9
 8000b54:	004c      	lsls	r4, r1, #1
 8000b56:	0fc3      	lsrs	r3, r0, #31
 8000b58:	0a6d      	lsrs	r5, r5, #9
 8000b5a:	0e12      	lsrs	r2, r2, #24
 8000b5c:	0a76      	lsrs	r6, r6, #9
 8000b5e:	0e24      	lsrs	r4, r4, #24
 8000b60:	0fc8      	lsrs	r0, r1, #31
 8000b62:	2aff      	cmp	r2, #255	; 0xff
 8000b64:	d00b      	beq.n	8000b7e <__lesf2+0x32>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d00d      	beq.n	8000b86 <__lesf2+0x3a>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d11f      	bne.n	8000bae <__lesf2+0x62>
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	d116      	bne.n	8000ba0 <__lesf2+0x54>
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d114      	bne.n	8000ba0 <__lesf2+0x54>
 8000b76:	2000      	movs	r0, #0
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d010      	beq.n	8000b9e <__lesf2+0x52>
 8000b7c:	e009      	b.n	8000b92 <__lesf2+0x46>
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d10c      	bne.n	8000b9c <__lesf2+0x50>
 8000b82:	2cff      	cmp	r4, #255	; 0xff
 8000b84:	d113      	bne.n	8000bae <__lesf2+0x62>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d108      	bne.n	8000b9c <__lesf2+0x50>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d008      	beq.n	8000ba0 <__lesf2+0x54>
 8000b8e:	4283      	cmp	r3, r0
 8000b90:	d012      	beq.n	8000bb8 <__lesf2+0x6c>
 8000b92:	2102      	movs	r1, #2
 8000b94:	1e58      	subs	r0, r3, #1
 8000b96:	4008      	ands	r0, r1
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e000      	b.n	8000b9e <__lesf2+0x52>
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d1f4      	bne.n	8000b8e <__lesf2+0x42>
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d1fa      	bne.n	8000b9e <__lesf2+0x52>
 8000ba8:	2001      	movs	r0, #1
 8000baa:	4240      	negs	r0, r0
 8000bac:	e7f7      	b.n	8000b9e <__lesf2+0x52>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d1ed      	bne.n	8000b8e <__lesf2+0x42>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d1eb      	bne.n	8000b8e <__lesf2+0x42>
 8000bb6:	e7ec      	b.n	8000b92 <__lesf2+0x46>
 8000bb8:	42a2      	cmp	r2, r4
 8000bba:	dc05      	bgt.n	8000bc8 <__lesf2+0x7c>
 8000bbc:	dbf2      	blt.n	8000ba4 <__lesf2+0x58>
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d802      	bhi.n	8000bc8 <__lesf2+0x7c>
 8000bc2:	d3ef      	bcc.n	8000ba4 <__lesf2+0x58>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	e7ea      	b.n	8000b9e <__lesf2+0x52>
 8000bc8:	4243      	negs	r3, r0
 8000bca:	4158      	adcs	r0, r3
 8000bcc:	0040      	lsls	r0, r0, #1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7e5      	b.n	8000b9e <__lesf2+0x52>
 8000bd2:	46c0      	nop			; (mov r8, r8)

08000bd4 <__aeabi_fmul>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	0045      	lsls	r5, r0, #1
 8000be0:	b5c0      	push	{r6, r7, lr}
 8000be2:	0a64      	lsrs	r4, r4, #9
 8000be4:	1c0f      	adds	r7, r1, #0
 8000be6:	0e2d      	lsrs	r5, r5, #24
 8000be8:	0fc6      	lsrs	r6, r0, #31
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_fmul+0x1c>
 8000bee:	e08d      	b.n	8000d0c <__aeabi_fmul+0x138>
 8000bf0:	2dff      	cmp	r5, #255	; 0xff
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_fmul+0x22>
 8000bf4:	e092      	b.n	8000d1c <__aeabi_fmul+0x148>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2080      	movs	r0, #128	; 0x80
 8000bfa:	4699      	mov	r9, r3
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	00e4      	lsls	r4, r4, #3
 8000c00:	04c0      	lsls	r0, r0, #19
 8000c02:	4304      	orrs	r4, r0
 8000c04:	3d7f      	subs	r5, #127	; 0x7f
 8000c06:	0278      	lsls	r0, r7, #9
 8000c08:	0a43      	lsrs	r3, r0, #9
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	007b      	lsls	r3, r7, #1
 8000c0e:	0e1b      	lsrs	r3, r3, #24
 8000c10:	0fff      	lsrs	r7, r7, #31
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fmul+0x44>
 8000c16:	e070      	b.n	8000cfa <__aeabi_fmul+0x126>
 8000c18:	2bff      	cmp	r3, #255	; 0xff
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_fmul+0x4a>
 8000c1c:	e086      	b.n	8000d2c <__aeabi_fmul+0x158>
 8000c1e:	4642      	mov	r2, r8
 8000c20:	00d0      	lsls	r0, r2, #3
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	3b7f      	subs	r3, #127	; 0x7f
 8000c26:	18ed      	adds	r5, r5, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	04d2      	lsls	r2, r2, #19
 8000c2c:	4302      	orrs	r2, r0
 8000c2e:	4690      	mov	r8, r2
 8000c30:	469c      	mov	ip, r3
 8000c32:	0031      	movs	r1, r6
 8000c34:	464b      	mov	r3, r9
 8000c36:	4079      	eors	r1, r7
 8000c38:	1c68      	adds	r0, r5, #1
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d81c      	bhi.n	8000c78 <__aeabi_fmul+0xa4>
 8000c3e:	4a76      	ldr	r2, [pc, #472]	; (8000e18 <__aeabi_fmul+0x244>)
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	58d3      	ldr	r3, [r2, r3]
 8000c44:	469f      	mov	pc, r3
 8000c46:	0039      	movs	r1, r7
 8000c48:	4644      	mov	r4, r8
 8000c4a:	46e2      	mov	sl, ip
 8000c4c:	4653      	mov	r3, sl
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d00f      	beq.n	8000c72 <__aeabi_fmul+0x9e>
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fmul+0x84>
 8000c56:	e0d7      	b.n	8000e08 <__aeabi_fmul+0x234>
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d137      	bne.n	8000ccc <__aeabi_fmul+0xf8>
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	2400      	movs	r4, #0
 8000c60:	05c0      	lsls	r0, r0, #23
 8000c62:	4320      	orrs	r0, r4
 8000c64:	07c9      	lsls	r1, r1, #31
 8000c66:	4308      	orrs	r0, r1
 8000c68:	bce0      	pop	{r5, r6, r7}
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	46b1      	mov	r9, r6
 8000c6e:	46a8      	mov	r8, r5
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	2400      	movs	r4, #0
 8000c76:	e7f3      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000c78:	0c26      	lsrs	r6, r4, #16
 8000c7a:	0424      	lsls	r4, r4, #16
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	4644      	mov	r4, r8
 8000c80:	0424      	lsls	r4, r4, #16
 8000c82:	0c24      	lsrs	r4, r4, #16
 8000c84:	4643      	mov	r3, r8
 8000c86:	0027      	movs	r7, r4
 8000c88:	0c1b      	lsrs	r3, r3, #16
 8000c8a:	4357      	muls	r7, r2
 8000c8c:	4374      	muls	r4, r6
 8000c8e:	435a      	muls	r2, r3
 8000c90:	435e      	muls	r6, r3
 8000c92:	1912      	adds	r2, r2, r4
 8000c94:	0c3b      	lsrs	r3, r7, #16
 8000c96:	189b      	adds	r3, r3, r2
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	d903      	bls.n	8000ca4 <__aeabi_fmul+0xd0>
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	0252      	lsls	r2, r2, #9
 8000ca0:	4694      	mov	ip, r2
 8000ca2:	4466      	add	r6, ip
 8000ca4:	043f      	lsls	r7, r7, #16
 8000ca6:	041a      	lsls	r2, r3, #16
 8000ca8:	0c3f      	lsrs	r7, r7, #16
 8000caa:	19d2      	adds	r2, r2, r7
 8000cac:	0194      	lsls	r4, r2, #6
 8000cae:	1e67      	subs	r7, r4, #1
 8000cb0:	41bc      	sbcs	r4, r7
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	0e92      	lsrs	r2, r2, #26
 8000cb6:	199b      	adds	r3, r3, r6
 8000cb8:	4314      	orrs	r4, r2
 8000cba:	019b      	lsls	r3, r3, #6
 8000cbc:	431c      	orrs	r4, r3
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	d400      	bmi.n	8000cc4 <__aeabi_fmul+0xf0>
 8000cc2:	e09b      	b.n	8000dfc <__aeabi_fmul+0x228>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	0862      	lsrs	r2, r4, #1
 8000cc8:	401c      	ands	r4, r3
 8000cca:	4314      	orrs	r4, r2
 8000ccc:	0002      	movs	r2, r0
 8000cce:	327f      	adds	r2, #127	; 0x7f
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	dd64      	ble.n	8000d9e <__aeabi_fmul+0x1ca>
 8000cd4:	0763      	lsls	r3, r4, #29
 8000cd6:	d004      	beq.n	8000ce2 <__aeabi_fmul+0x10e>
 8000cd8:	230f      	movs	r3, #15
 8000cda:	4023      	ands	r3, r4
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fmul+0x10e>
 8000ce0:	3404      	adds	r4, #4
 8000ce2:	0123      	lsls	r3, r4, #4
 8000ce4:	d503      	bpl.n	8000cee <__aeabi_fmul+0x11a>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	; (8000e1c <__aeabi_fmul+0x248>)
 8000cea:	3280      	adds	r2, #128	; 0x80
 8000cec:	401c      	ands	r4, r3
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	dcbf      	bgt.n	8000c72 <__aeabi_fmul+0x9e>
 8000cf2:	01a4      	lsls	r4, r4, #6
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	b2d0      	uxtb	r0, r2
 8000cf8:	e7b2      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d13d      	bne.n	8000d7c <__aeabi_fmul+0x1a8>
 8000d00:	464a      	mov	r2, r9
 8000d02:	3301      	adds	r3, #1
 8000d04:	431a      	orrs	r2, r3
 8000d06:	4691      	mov	r9, r2
 8000d08:	469c      	mov	ip, r3
 8000d0a:	e792      	b.n	8000c32 <__aeabi_fmul+0x5e>
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d129      	bne.n	8000d64 <__aeabi_fmul+0x190>
 8000d10:	2304      	movs	r3, #4
 8000d12:	4699      	mov	r9, r3
 8000d14:	3b03      	subs	r3, #3
 8000d16:	2500      	movs	r5, #0
 8000d18:	469a      	mov	sl, r3
 8000d1a:	e774      	b.n	8000c06 <__aeabi_fmul+0x32>
 8000d1c:	2c00      	cmp	r4, #0
 8000d1e:	d11b      	bne.n	8000d58 <__aeabi_fmul+0x184>
 8000d20:	2308      	movs	r3, #8
 8000d22:	4699      	mov	r9, r3
 8000d24:	3b06      	subs	r3, #6
 8000d26:	25ff      	movs	r5, #255	; 0xff
 8000d28:	469a      	mov	sl, r3
 8000d2a:	e76c      	b.n	8000c06 <__aeabi_fmul+0x32>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	35ff      	adds	r5, #255	; 0xff
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d10b      	bne.n	8000d4c <__aeabi_fmul+0x178>
 8000d34:	2302      	movs	r3, #2
 8000d36:	464a      	mov	r2, r9
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	4691      	mov	r9, r2
 8000d3c:	469c      	mov	ip, r3
 8000d3e:	e778      	b.n	8000c32 <__aeabi_fmul+0x5e>
 8000d40:	4653      	mov	r3, sl
 8000d42:	0031      	movs	r1, r6
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d000      	beq.n	8000d4a <__aeabi_fmul+0x176>
 8000d48:	e783      	b.n	8000c52 <__aeabi_fmul+0x7e>
 8000d4a:	e792      	b.n	8000c72 <__aeabi_fmul+0x9e>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	464a      	mov	r2, r9
 8000d50:	431a      	orrs	r2, r3
 8000d52:	4691      	mov	r9, r2
 8000d54:	469c      	mov	ip, r3
 8000d56:	e76c      	b.n	8000c32 <__aeabi_fmul+0x5e>
 8000d58:	230c      	movs	r3, #12
 8000d5a:	4699      	mov	r9, r3
 8000d5c:	3b09      	subs	r3, #9
 8000d5e:	25ff      	movs	r5, #255	; 0xff
 8000d60:	469a      	mov	sl, r3
 8000d62:	e750      	b.n	8000c06 <__aeabi_fmul+0x32>
 8000d64:	0020      	movs	r0, r4
 8000d66:	f000 fab9 	bl	80012dc <__clzsi2>
 8000d6a:	2576      	movs	r5, #118	; 0x76
 8000d6c:	1f43      	subs	r3, r0, #5
 8000d6e:	409c      	lsls	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	426d      	negs	r5, r5
 8000d74:	4699      	mov	r9, r3
 8000d76:	469a      	mov	sl, r3
 8000d78:	1a2d      	subs	r5, r5, r0
 8000d7a:	e744      	b.n	8000c06 <__aeabi_fmul+0x32>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	f000 faad 	bl	80012dc <__clzsi2>
 8000d82:	4642      	mov	r2, r8
 8000d84:	1f43      	subs	r3, r0, #5
 8000d86:	409a      	lsls	r2, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	1a2d      	subs	r5, r5, r0
 8000d8c:	4690      	mov	r8, r2
 8000d8e:	469c      	mov	ip, r3
 8000d90:	3d76      	subs	r5, #118	; 0x76
 8000d92:	e74e      	b.n	8000c32 <__aeabi_fmul+0x5e>
 8000d94:	2480      	movs	r4, #128	; 0x80
 8000d96:	2100      	movs	r1, #0
 8000d98:	20ff      	movs	r0, #255	; 0xff
 8000d9a:	03e4      	lsls	r4, r4, #15
 8000d9c:	e760      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	2b1b      	cmp	r3, #27
 8000da4:	dd00      	ble.n	8000da8 <__aeabi_fmul+0x1d4>
 8000da6:	e759      	b.n	8000c5c <__aeabi_fmul+0x88>
 8000da8:	0022      	movs	r2, r4
 8000daa:	309e      	adds	r0, #158	; 0x9e
 8000dac:	40da      	lsrs	r2, r3
 8000dae:	4084      	lsls	r4, r0
 8000db0:	0013      	movs	r3, r2
 8000db2:	1e62      	subs	r2, r4, #1
 8000db4:	4194      	sbcs	r4, r2
 8000db6:	431c      	orrs	r4, r3
 8000db8:	0763      	lsls	r3, r4, #29
 8000dba:	d004      	beq.n	8000dc6 <__aeabi_fmul+0x1f2>
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_fmul+0x1f2>
 8000dc4:	3404      	adds	r4, #4
 8000dc6:	0163      	lsls	r3, r4, #5
 8000dc8:	d51a      	bpl.n	8000e00 <__aeabi_fmul+0x22c>
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2400      	movs	r4, #0
 8000dce:	e747      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	03c0      	lsls	r0, r0, #15
 8000dd4:	4204      	tst	r4, r0
 8000dd6:	d009      	beq.n	8000dec <__aeabi_fmul+0x218>
 8000dd8:	4643      	mov	r3, r8
 8000dda:	4203      	tst	r3, r0
 8000ddc:	d106      	bne.n	8000dec <__aeabi_fmul+0x218>
 8000dde:	4644      	mov	r4, r8
 8000de0:	4304      	orrs	r4, r0
 8000de2:	0264      	lsls	r4, r4, #9
 8000de4:	0039      	movs	r1, r7
 8000de6:	20ff      	movs	r0, #255	; 0xff
 8000de8:	0a64      	lsrs	r4, r4, #9
 8000dea:	e739      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000dec:	2080      	movs	r0, #128	; 0x80
 8000dee:	03c0      	lsls	r0, r0, #15
 8000df0:	4304      	orrs	r4, r0
 8000df2:	0264      	lsls	r4, r4, #9
 8000df4:	0031      	movs	r1, r6
 8000df6:	20ff      	movs	r0, #255	; 0xff
 8000df8:	0a64      	lsrs	r4, r4, #9
 8000dfa:	e731      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000dfc:	0028      	movs	r0, r5
 8000dfe:	e765      	b.n	8000ccc <__aeabi_fmul+0xf8>
 8000e00:	01a4      	lsls	r4, r4, #6
 8000e02:	2000      	movs	r0, #0
 8000e04:	0a64      	lsrs	r4, r4, #9
 8000e06:	e72b      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000e08:	2080      	movs	r0, #128	; 0x80
 8000e0a:	03c0      	lsls	r0, r0, #15
 8000e0c:	4304      	orrs	r4, r0
 8000e0e:	0264      	lsls	r4, r4, #9
 8000e10:	20ff      	movs	r0, #255	; 0xff
 8000e12:	0a64      	lsrs	r4, r4, #9
 8000e14:	e724      	b.n	8000c60 <__aeabi_fmul+0x8c>
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	08006310 	.word	0x08006310
 8000e1c:	f7ffffff 	.word	0xf7ffffff

08000e20 <__aeabi_fsub>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	46ce      	mov	lr, r9
 8000e24:	4647      	mov	r7, r8
 8000e26:	0243      	lsls	r3, r0, #9
 8000e28:	0a5b      	lsrs	r3, r3, #9
 8000e2a:	024e      	lsls	r6, r1, #9
 8000e2c:	00da      	lsls	r2, r3, #3
 8000e2e:	4694      	mov	ip, r2
 8000e30:	0a72      	lsrs	r2, r6, #9
 8000e32:	4691      	mov	r9, r2
 8000e34:	0045      	lsls	r5, r0, #1
 8000e36:	004a      	lsls	r2, r1, #1
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	0e2d      	lsrs	r5, r5, #24
 8000e3c:	001f      	movs	r7, r3
 8000e3e:	0fc4      	lsrs	r4, r0, #31
 8000e40:	0e12      	lsrs	r2, r2, #24
 8000e42:	0fc9      	lsrs	r1, r1, #31
 8000e44:	09b6      	lsrs	r6, r6, #6
 8000e46:	2aff      	cmp	r2, #255	; 0xff
 8000e48:	d05b      	beq.n	8000f02 <__aeabi_fsub+0xe2>
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	4041      	eors	r1, r0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d039      	beq.n	8000ec6 <__aeabi_fsub+0xa6>
 8000e52:	1aa8      	subs	r0, r5, r2
 8000e54:	2800      	cmp	r0, #0
 8000e56:	dd5a      	ble.n	8000f0e <__aeabi_fsub+0xee>
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d06a      	beq.n	8000f32 <__aeabi_fsub+0x112>
 8000e5c:	2dff      	cmp	r5, #255	; 0xff
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_fsub+0x42>
 8000e60:	e0d9      	b.n	8001016 <__aeabi_fsub+0x1f6>
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	04d2      	lsls	r2, r2, #19
 8000e66:	4316      	orrs	r6, r2
 8000e68:	281b      	cmp	r0, #27
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_fsub+0x4e>
 8000e6c:	e0e9      	b.n	8001042 <__aeabi_fsub+0x222>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	4663      	mov	r3, ip
 8000e72:	1a18      	subs	r0, r3, r0
 8000e74:	0143      	lsls	r3, r0, #5
 8000e76:	d400      	bmi.n	8000e7a <__aeabi_fsub+0x5a>
 8000e78:	e0b4      	b.n	8000fe4 <__aeabi_fsub+0x1c4>
 8000e7a:	0180      	lsls	r0, r0, #6
 8000e7c:	0987      	lsrs	r7, r0, #6
 8000e7e:	0038      	movs	r0, r7
 8000e80:	f000 fa2c 	bl	80012dc <__clzsi2>
 8000e84:	3805      	subs	r0, #5
 8000e86:	4087      	lsls	r7, r0
 8000e88:	4285      	cmp	r5, r0
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_fsub+0x6e>
 8000e8c:	e0cc      	b.n	8001028 <__aeabi_fsub+0x208>
 8000e8e:	1a2d      	subs	r5, r5, r0
 8000e90:	48b5      	ldr	r0, [pc, #724]	; (8001168 <__aeabi_fsub+0x348>)
 8000e92:	4038      	ands	r0, r7
 8000e94:	0743      	lsls	r3, r0, #29
 8000e96:	d004      	beq.n	8000ea2 <__aeabi_fsub+0x82>
 8000e98:	230f      	movs	r3, #15
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_fsub+0x82>
 8000ea0:	3004      	adds	r0, #4
 8000ea2:	0143      	lsls	r3, r0, #5
 8000ea4:	d400      	bmi.n	8000ea8 <__aeabi_fsub+0x88>
 8000ea6:	e0a0      	b.n	8000fea <__aeabi_fsub+0x1ca>
 8000ea8:	1c6a      	adds	r2, r5, #1
 8000eaa:	2dfe      	cmp	r5, #254	; 0xfe
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_fsub+0x90>
 8000eae:	e08d      	b.n	8000fcc <__aeabi_fsub+0x1ac>
 8000eb0:	0180      	lsls	r0, r0, #6
 8000eb2:	0a47      	lsrs	r7, r0, #9
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	05d0      	lsls	r0, r2, #23
 8000eb8:	4338      	orrs	r0, r7
 8000eba:	07e4      	lsls	r4, r4, #31
 8000ebc:	4320      	orrs	r0, r4
 8000ebe:	bcc0      	pop	{r6, r7}
 8000ec0:	46b9      	mov	r9, r7
 8000ec2:	46b0      	mov	r8, r6
 8000ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec6:	1aa8      	subs	r0, r5, r2
 8000ec8:	4680      	mov	r8, r0
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	dd45      	ble.n	8000f5a <__aeabi_fsub+0x13a>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d070      	beq.n	8000fb4 <__aeabi_fsub+0x194>
 8000ed2:	2dff      	cmp	r5, #255	; 0xff
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0xb8>
 8000ed6:	e09e      	b.n	8001016 <__aeabi_fsub+0x1f6>
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	04db      	lsls	r3, r3, #19
 8000edc:	431e      	orrs	r6, r3
 8000ede:	4643      	mov	r3, r8
 8000ee0:	2b1b      	cmp	r3, #27
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_fsub+0xc6>
 8000ee4:	e0d2      	b.n	800108c <__aeabi_fsub+0x26c>
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4460      	add	r0, ip
 8000eea:	0143      	lsls	r3, r0, #5
 8000eec:	d57a      	bpl.n	8000fe4 <__aeabi_fsub+0x1c4>
 8000eee:	3501      	adds	r5, #1
 8000ef0:	2dff      	cmp	r5, #255	; 0xff
 8000ef2:	d06b      	beq.n	8000fcc <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4a9d      	ldr	r2, [pc, #628]	; (800116c <__aeabi_fsub+0x34c>)
 8000ef8:	4003      	ands	r3, r0
 8000efa:	0840      	lsrs	r0, r0, #1
 8000efc:	4010      	ands	r0, r2
 8000efe:	4318      	orrs	r0, r3
 8000f00:	e7c8      	b.n	8000e94 <__aeabi_fsub+0x74>
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d020      	beq.n	8000f48 <__aeabi_fsub+0x128>
 8000f06:	428c      	cmp	r4, r1
 8000f08:	d023      	beq.n	8000f52 <__aeabi_fsub+0x132>
 8000f0a:	0028      	movs	r0, r5
 8000f0c:	38ff      	subs	r0, #255	; 0xff
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d039      	beq.n	8000f86 <__aeabi_fsub+0x166>
 8000f12:	1b57      	subs	r7, r2, r5
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_fsub+0xfa>
 8000f18:	e09d      	b.n	8001056 <__aeabi_fsub+0x236>
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_fsub+0x102>
 8000f20:	e0db      	b.n	80010da <__aeabi_fsub+0x2ba>
 8000f22:	1e7b      	subs	r3, r7, #1
 8000f24:	2f01      	cmp	r7, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x10a>
 8000f28:	e10d      	b.n	8001146 <__aeabi_fsub+0x326>
 8000f2a:	2fff      	cmp	r7, #255	; 0xff
 8000f2c:	d071      	beq.n	8001012 <__aeabi_fsub+0x1f2>
 8000f2e:	001f      	movs	r7, r3
 8000f30:	e098      	b.n	8001064 <__aeabi_fsub+0x244>
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x118>
 8000f36:	e0a7      	b.n	8001088 <__aeabi_fsub+0x268>
 8000f38:	1e42      	subs	r2, r0, #1
 8000f3a:	2801      	cmp	r0, #1
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x120>
 8000f3e:	e0e6      	b.n	800110e <__aeabi_fsub+0x2ee>
 8000f40:	28ff      	cmp	r0, #255	; 0xff
 8000f42:	d068      	beq.n	8001016 <__aeabi_fsub+0x1f6>
 8000f44:	0010      	movs	r0, r2
 8000f46:	e78f      	b.n	8000e68 <__aeabi_fsub+0x48>
 8000f48:	2001      	movs	r0, #1
 8000f4a:	4041      	eors	r1, r0
 8000f4c:	42a1      	cmp	r1, r4
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_fsub+0x132>
 8000f50:	e77f      	b.n	8000e52 <__aeabi_fsub+0x32>
 8000f52:	20ff      	movs	r0, #255	; 0xff
 8000f54:	4240      	negs	r0, r0
 8000f56:	4680      	mov	r8, r0
 8000f58:	44a8      	add	r8, r5
 8000f5a:	4640      	mov	r0, r8
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	d038      	beq.n	8000fd2 <__aeabi_fsub+0x1b2>
 8000f60:	1b51      	subs	r1, r2, r5
 8000f62:	2d00      	cmp	r5, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0x148>
 8000f66:	e0ae      	b.n	80010c6 <__aeabi_fsub+0x2a6>
 8000f68:	2aff      	cmp	r2, #255	; 0xff
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x14e>
 8000f6c:	e0df      	b.n	800112e <__aeabi_fsub+0x30e>
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	4660      	mov	r0, ip
 8000f72:	04db      	lsls	r3, r3, #19
 8000f74:	4318      	orrs	r0, r3
 8000f76:	4684      	mov	ip, r0
 8000f78:	291b      	cmp	r1, #27
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_fsub+0x15e>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_fsub+0x312>
 8000f7e:	2001      	movs	r0, #1
 8000f80:	0015      	movs	r5, r2
 8000f82:	1980      	adds	r0, r0, r6
 8000f84:	e7b1      	b.n	8000eea <__aeabi_fsub+0xca>
 8000f86:	20fe      	movs	r0, #254	; 0xfe
 8000f88:	1c6a      	adds	r2, r5, #1
 8000f8a:	4210      	tst	r0, r2
 8000f8c:	d171      	bne.n	8001072 <__aeabi_fsub+0x252>
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d000      	beq.n	8000f94 <__aeabi_fsub+0x174>
 8000f92:	e0a6      	b.n	80010e2 <__aeabi_fsub+0x2c2>
 8000f94:	4663      	mov	r3, ip
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x17c>
 8000f9a:	e0d9      	b.n	8001150 <__aeabi_fsub+0x330>
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2e00      	cmp	r6, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0x184>
 8000fa2:	e788      	b.n	8000eb6 <__aeabi_fsub+0x96>
 8000fa4:	1b98      	subs	r0, r3, r6
 8000fa6:	0143      	lsls	r3, r0, #5
 8000fa8:	d400      	bmi.n	8000fac <__aeabi_fsub+0x18c>
 8000faa:	e0e1      	b.n	8001170 <__aeabi_fsub+0x350>
 8000fac:	4663      	mov	r3, ip
 8000fae:	000c      	movs	r4, r1
 8000fb0:	1af0      	subs	r0, r6, r3
 8000fb2:	e76f      	b.n	8000e94 <__aeabi_fsub+0x74>
 8000fb4:	2e00      	cmp	r6, #0
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x19a>
 8000fb8:	e0b7      	b.n	800112a <__aeabi_fsub+0x30a>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	2801      	cmp	r0, #1
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x1a4>
 8000fc2:	e09c      	b.n	80010fe <__aeabi_fsub+0x2de>
 8000fc4:	28ff      	cmp	r0, #255	; 0xff
 8000fc6:	d026      	beq.n	8001016 <__aeabi_fsub+0x1f6>
 8000fc8:	4690      	mov	r8, r2
 8000fca:	e788      	b.n	8000ede <__aeabi_fsub+0xbe>
 8000fcc:	22ff      	movs	r2, #255	; 0xff
 8000fce:	2700      	movs	r7, #0
 8000fd0:	e771      	b.n	8000eb6 <__aeabi_fsub+0x96>
 8000fd2:	20fe      	movs	r0, #254	; 0xfe
 8000fd4:	1c6a      	adds	r2, r5, #1
 8000fd6:	4210      	tst	r0, r2
 8000fd8:	d064      	beq.n	80010a4 <__aeabi_fsub+0x284>
 8000fda:	2aff      	cmp	r2, #255	; 0xff
 8000fdc:	d0f6      	beq.n	8000fcc <__aeabi_fsub+0x1ac>
 8000fde:	0015      	movs	r5, r2
 8000fe0:	4466      	add	r6, ip
 8000fe2:	0870      	lsrs	r0, r6, #1
 8000fe4:	0743      	lsls	r3, r0, #29
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x1ca>
 8000fe8:	e756      	b.n	8000e98 <__aeabi_fsub+0x78>
 8000fea:	08c3      	lsrs	r3, r0, #3
 8000fec:	2dff      	cmp	r5, #255	; 0xff
 8000fee:	d012      	beq.n	8001016 <__aeabi_fsub+0x1f6>
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	0a5f      	lsrs	r7, r3, #9
 8000ff4:	b2ea      	uxtb	r2, r5
 8000ff6:	e75e      	b.n	8000eb6 <__aeabi_fsub+0x96>
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0x1e0>
 8000ffe:	e096      	b.n	800112e <__aeabi_fsub+0x30e>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d008      	beq.n	8001016 <__aeabi_fsub+0x1f6>
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	03d2      	lsls	r2, r2, #15
 8001008:	4213      	tst	r3, r2
 800100a:	d004      	beq.n	8001016 <__aeabi_fsub+0x1f6>
 800100c:	4648      	mov	r0, r9
 800100e:	4210      	tst	r0, r2
 8001010:	d101      	bne.n	8001016 <__aeabi_fsub+0x1f6>
 8001012:	000c      	movs	r4, r1
 8001014:	464b      	mov	r3, r9
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0d8      	beq.n	8000fcc <__aeabi_fsub+0x1ac>
 800101a:	2780      	movs	r7, #128	; 0x80
 800101c:	03ff      	lsls	r7, r7, #15
 800101e:	431f      	orrs	r7, r3
 8001020:	027f      	lsls	r7, r7, #9
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	0a7f      	lsrs	r7, r7, #9
 8001026:	e746      	b.n	8000eb6 <__aeabi_fsub+0x96>
 8001028:	2320      	movs	r3, #32
 800102a:	003a      	movs	r2, r7
 800102c:	1b45      	subs	r5, r0, r5
 800102e:	0038      	movs	r0, r7
 8001030:	3501      	adds	r5, #1
 8001032:	40ea      	lsrs	r2, r5
 8001034:	1b5d      	subs	r5, r3, r5
 8001036:	40a8      	lsls	r0, r5
 8001038:	1e43      	subs	r3, r0, #1
 800103a:	4198      	sbcs	r0, r3
 800103c:	2500      	movs	r5, #0
 800103e:	4310      	orrs	r0, r2
 8001040:	e728      	b.n	8000e94 <__aeabi_fsub+0x74>
 8001042:	2320      	movs	r3, #32
 8001044:	1a1b      	subs	r3, r3, r0
 8001046:	0032      	movs	r2, r6
 8001048:	409e      	lsls	r6, r3
 800104a:	40c2      	lsrs	r2, r0
 800104c:	0030      	movs	r0, r6
 800104e:	1e43      	subs	r3, r0, #1
 8001050:	4198      	sbcs	r0, r3
 8001052:	4310      	orrs	r0, r2
 8001054:	e70c      	b.n	8000e70 <__aeabi_fsub+0x50>
 8001056:	2aff      	cmp	r2, #255	; 0xff
 8001058:	d0db      	beq.n	8001012 <__aeabi_fsub+0x1f2>
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	4660      	mov	r0, ip
 800105e:	04db      	lsls	r3, r3, #19
 8001060:	4318      	orrs	r0, r3
 8001062:	4684      	mov	ip, r0
 8001064:	2f1b      	cmp	r7, #27
 8001066:	dd56      	ble.n	8001116 <__aeabi_fsub+0x2f6>
 8001068:	2001      	movs	r0, #1
 800106a:	000c      	movs	r4, r1
 800106c:	0015      	movs	r5, r2
 800106e:	1a30      	subs	r0, r6, r0
 8001070:	e700      	b.n	8000e74 <__aeabi_fsub+0x54>
 8001072:	4663      	mov	r3, ip
 8001074:	1b9f      	subs	r7, r3, r6
 8001076:	017b      	lsls	r3, r7, #5
 8001078:	d43d      	bmi.n	80010f6 <__aeabi_fsub+0x2d6>
 800107a:	2f00      	cmp	r7, #0
 800107c:	d000      	beq.n	8001080 <__aeabi_fsub+0x260>
 800107e:	e6fe      	b.n	8000e7e <__aeabi_fsub+0x5e>
 8001080:	2400      	movs	r4, #0
 8001082:	2200      	movs	r2, #0
 8001084:	2700      	movs	r7, #0
 8001086:	e716      	b.n	8000eb6 <__aeabi_fsub+0x96>
 8001088:	0005      	movs	r5, r0
 800108a:	e7af      	b.n	8000fec <__aeabi_fsub+0x1cc>
 800108c:	0032      	movs	r2, r6
 800108e:	4643      	mov	r3, r8
 8001090:	4641      	mov	r1, r8
 8001092:	40da      	lsrs	r2, r3
 8001094:	2320      	movs	r3, #32
 8001096:	1a5b      	subs	r3, r3, r1
 8001098:	409e      	lsls	r6, r3
 800109a:	0030      	movs	r0, r6
 800109c:	1e43      	subs	r3, r0, #1
 800109e:	4198      	sbcs	r0, r3
 80010a0:	4310      	orrs	r0, r2
 80010a2:	e721      	b.n	8000ee8 <__aeabi_fsub+0xc8>
 80010a4:	2d00      	cmp	r5, #0
 80010a6:	d1a7      	bne.n	8000ff8 <__aeabi_fsub+0x1d8>
 80010a8:	4663      	mov	r3, ip
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d059      	beq.n	8001162 <__aeabi_fsub+0x342>
 80010ae:	2200      	movs	r2, #0
 80010b0:	2e00      	cmp	r6, #0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_fsub+0x296>
 80010b4:	e6ff      	b.n	8000eb6 <__aeabi_fsub+0x96>
 80010b6:	0030      	movs	r0, r6
 80010b8:	4460      	add	r0, ip
 80010ba:	0143      	lsls	r3, r0, #5
 80010bc:	d592      	bpl.n	8000fe4 <__aeabi_fsub+0x1c4>
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <__aeabi_fsub+0x348>)
 80010c0:	3501      	adds	r5, #1
 80010c2:	4018      	ands	r0, r3
 80010c4:	e78e      	b.n	8000fe4 <__aeabi_fsub+0x1c4>
 80010c6:	4663      	mov	r3, ip
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d047      	beq.n	800115c <__aeabi_fsub+0x33c>
 80010cc:	1e4b      	subs	r3, r1, #1
 80010ce:	2901      	cmp	r1, #1
 80010d0:	d015      	beq.n	80010fe <__aeabi_fsub+0x2de>
 80010d2:	29ff      	cmp	r1, #255	; 0xff
 80010d4:	d02b      	beq.n	800112e <__aeabi_fsub+0x30e>
 80010d6:	0019      	movs	r1, r3
 80010d8:	e74e      	b.n	8000f78 <__aeabi_fsub+0x158>
 80010da:	000c      	movs	r4, r1
 80010dc:	464b      	mov	r3, r9
 80010de:	003d      	movs	r5, r7
 80010e0:	e784      	b.n	8000fec <__aeabi_fsub+0x1cc>
 80010e2:	4662      	mov	r2, ip
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d18b      	bne.n	8001000 <__aeabi_fsub+0x1e0>
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	d192      	bne.n	8001012 <__aeabi_fsub+0x1f2>
 80010ec:	2780      	movs	r7, #128	; 0x80
 80010ee:	2400      	movs	r4, #0
 80010f0:	22ff      	movs	r2, #255	; 0xff
 80010f2:	03ff      	lsls	r7, r7, #15
 80010f4:	e6df      	b.n	8000eb6 <__aeabi_fsub+0x96>
 80010f6:	4663      	mov	r3, ip
 80010f8:	000c      	movs	r4, r1
 80010fa:	1af7      	subs	r7, r6, r3
 80010fc:	e6bf      	b.n	8000e7e <__aeabi_fsub+0x5e>
 80010fe:	0030      	movs	r0, r6
 8001100:	4460      	add	r0, ip
 8001102:	2501      	movs	r5, #1
 8001104:	0143      	lsls	r3, r0, #5
 8001106:	d400      	bmi.n	800110a <__aeabi_fsub+0x2ea>
 8001108:	e76c      	b.n	8000fe4 <__aeabi_fsub+0x1c4>
 800110a:	2502      	movs	r5, #2
 800110c:	e6f2      	b.n	8000ef4 <__aeabi_fsub+0xd4>
 800110e:	4663      	mov	r3, ip
 8001110:	2501      	movs	r5, #1
 8001112:	1b98      	subs	r0, r3, r6
 8001114:	e6ae      	b.n	8000e74 <__aeabi_fsub+0x54>
 8001116:	2320      	movs	r3, #32
 8001118:	4664      	mov	r4, ip
 800111a:	4660      	mov	r0, ip
 800111c:	40fc      	lsrs	r4, r7
 800111e:	1bdf      	subs	r7, r3, r7
 8001120:	40b8      	lsls	r0, r7
 8001122:	1e43      	subs	r3, r0, #1
 8001124:	4198      	sbcs	r0, r3
 8001126:	4320      	orrs	r0, r4
 8001128:	e79f      	b.n	800106a <__aeabi_fsub+0x24a>
 800112a:	0005      	movs	r5, r0
 800112c:	e75e      	b.n	8000fec <__aeabi_fsub+0x1cc>
 800112e:	464b      	mov	r3, r9
 8001130:	e771      	b.n	8001016 <__aeabi_fsub+0x1f6>
 8001132:	2320      	movs	r3, #32
 8001134:	4665      	mov	r5, ip
 8001136:	4660      	mov	r0, ip
 8001138:	40cd      	lsrs	r5, r1
 800113a:	1a59      	subs	r1, r3, r1
 800113c:	4088      	lsls	r0, r1
 800113e:	1e43      	subs	r3, r0, #1
 8001140:	4198      	sbcs	r0, r3
 8001142:	4328      	orrs	r0, r5
 8001144:	e71c      	b.n	8000f80 <__aeabi_fsub+0x160>
 8001146:	4663      	mov	r3, ip
 8001148:	000c      	movs	r4, r1
 800114a:	2501      	movs	r5, #1
 800114c:	1af0      	subs	r0, r6, r3
 800114e:	e691      	b.n	8000e74 <__aeabi_fsub+0x54>
 8001150:	2e00      	cmp	r6, #0
 8001152:	d095      	beq.n	8001080 <__aeabi_fsub+0x260>
 8001154:	000c      	movs	r4, r1
 8001156:	464f      	mov	r7, r9
 8001158:	2200      	movs	r2, #0
 800115a:	e6ac      	b.n	8000eb6 <__aeabi_fsub+0x96>
 800115c:	464b      	mov	r3, r9
 800115e:	000d      	movs	r5, r1
 8001160:	e744      	b.n	8000fec <__aeabi_fsub+0x1cc>
 8001162:	464f      	mov	r7, r9
 8001164:	2200      	movs	r2, #0
 8001166:	e6a6      	b.n	8000eb6 <__aeabi_fsub+0x96>
 8001168:	fbffffff 	.word	0xfbffffff
 800116c:	7dffffff 	.word	0x7dffffff
 8001170:	2800      	cmp	r0, #0
 8001172:	d000      	beq.n	8001176 <__aeabi_fsub+0x356>
 8001174:	e736      	b.n	8000fe4 <__aeabi_fsub+0x1c4>
 8001176:	2400      	movs	r4, #0
 8001178:	2700      	movs	r7, #0
 800117a:	e69c      	b.n	8000eb6 <__aeabi_fsub+0x96>

0800117c <__aeabi_f2iz>:
 800117c:	0241      	lsls	r1, r0, #9
 800117e:	0042      	lsls	r2, r0, #1
 8001180:	0fc3      	lsrs	r3, r0, #31
 8001182:	0a49      	lsrs	r1, r1, #9
 8001184:	2000      	movs	r0, #0
 8001186:	0e12      	lsrs	r2, r2, #24
 8001188:	2a7e      	cmp	r2, #126	; 0x7e
 800118a:	dd03      	ble.n	8001194 <__aeabi_f2iz+0x18>
 800118c:	2a9d      	cmp	r2, #157	; 0x9d
 800118e:	dd02      	ble.n	8001196 <__aeabi_f2iz+0x1a>
 8001190:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <__aeabi_f2iz+0x3c>)
 8001192:	1898      	adds	r0, r3, r2
 8001194:	4770      	bx	lr
 8001196:	2080      	movs	r0, #128	; 0x80
 8001198:	0400      	lsls	r0, r0, #16
 800119a:	4301      	orrs	r1, r0
 800119c:	2a95      	cmp	r2, #149	; 0x95
 800119e:	dc07      	bgt.n	80011b0 <__aeabi_f2iz+0x34>
 80011a0:	2096      	movs	r0, #150	; 0x96
 80011a2:	1a82      	subs	r2, r0, r2
 80011a4:	40d1      	lsrs	r1, r2
 80011a6:	4248      	negs	r0, r1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f3      	bne.n	8001194 <__aeabi_f2iz+0x18>
 80011ac:	0008      	movs	r0, r1
 80011ae:	e7f1      	b.n	8001194 <__aeabi_f2iz+0x18>
 80011b0:	3a96      	subs	r2, #150	; 0x96
 80011b2:	4091      	lsls	r1, r2
 80011b4:	e7f7      	b.n	80011a6 <__aeabi_f2iz+0x2a>
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	7fffffff 	.word	0x7fffffff

080011bc <__aeabi_i2f>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	2800      	cmp	r0, #0
 80011c0:	d013      	beq.n	80011ea <__aeabi_i2f+0x2e>
 80011c2:	17c3      	asrs	r3, r0, #31
 80011c4:	18c6      	adds	r6, r0, r3
 80011c6:	405e      	eors	r6, r3
 80011c8:	0fc4      	lsrs	r4, r0, #31
 80011ca:	0030      	movs	r0, r6
 80011cc:	f000 f886 	bl	80012dc <__clzsi2>
 80011d0:	239e      	movs	r3, #158	; 0x9e
 80011d2:	0005      	movs	r5, r0
 80011d4:	1a1b      	subs	r3, r3, r0
 80011d6:	2b96      	cmp	r3, #150	; 0x96
 80011d8:	dc0f      	bgt.n	80011fa <__aeabi_i2f+0x3e>
 80011da:	2808      	cmp	r0, #8
 80011dc:	dd01      	ble.n	80011e2 <__aeabi_i2f+0x26>
 80011de:	3d08      	subs	r5, #8
 80011e0:	40ae      	lsls	r6, r5
 80011e2:	0276      	lsls	r6, r6, #9
 80011e4:	0a76      	lsrs	r6, r6, #9
 80011e6:	b2d8      	uxtb	r0, r3
 80011e8:	e002      	b.n	80011f0 <__aeabi_i2f+0x34>
 80011ea:	2400      	movs	r4, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	2600      	movs	r6, #0
 80011f0:	05c0      	lsls	r0, r0, #23
 80011f2:	4330      	orrs	r0, r6
 80011f4:	07e4      	lsls	r4, r4, #31
 80011f6:	4320      	orrs	r0, r4
 80011f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fa:	2b99      	cmp	r3, #153	; 0x99
 80011fc:	dd0c      	ble.n	8001218 <__aeabi_i2f+0x5c>
 80011fe:	2205      	movs	r2, #5
 8001200:	0031      	movs	r1, r6
 8001202:	1a12      	subs	r2, r2, r0
 8001204:	40d1      	lsrs	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	0001      	movs	r1, r0
 800120a:	0030      	movs	r0, r6
 800120c:	311b      	adds	r1, #27
 800120e:	4088      	lsls	r0, r1
 8001210:	1e41      	subs	r1, r0, #1
 8001212:	4188      	sbcs	r0, r1
 8001214:	4302      	orrs	r2, r0
 8001216:	0016      	movs	r6, r2
 8001218:	2d05      	cmp	r5, #5
 800121a:	dc12      	bgt.n	8001242 <__aeabi_i2f+0x86>
 800121c:	0031      	movs	r1, r6
 800121e:	4f0d      	ldr	r7, [pc, #52]	; (8001254 <__aeabi_i2f+0x98>)
 8001220:	4039      	ands	r1, r7
 8001222:	0772      	lsls	r2, r6, #29
 8001224:	d009      	beq.n	800123a <__aeabi_i2f+0x7e>
 8001226:	200f      	movs	r0, #15
 8001228:	4030      	ands	r0, r6
 800122a:	2804      	cmp	r0, #4
 800122c:	d005      	beq.n	800123a <__aeabi_i2f+0x7e>
 800122e:	3104      	adds	r1, #4
 8001230:	014a      	lsls	r2, r1, #5
 8001232:	d502      	bpl.n	800123a <__aeabi_i2f+0x7e>
 8001234:	239f      	movs	r3, #159	; 0x9f
 8001236:	4039      	ands	r1, r7
 8001238:	1b5b      	subs	r3, r3, r5
 800123a:	0189      	lsls	r1, r1, #6
 800123c:	0a4e      	lsrs	r6, r1, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e7d6      	b.n	80011f0 <__aeabi_i2f+0x34>
 8001242:	1f6a      	subs	r2, r5, #5
 8001244:	4096      	lsls	r6, r2
 8001246:	0031      	movs	r1, r6
 8001248:	4f02      	ldr	r7, [pc, #8]	; (8001254 <__aeabi_i2f+0x98>)
 800124a:	4039      	ands	r1, r7
 800124c:	0772      	lsls	r2, r6, #29
 800124e:	d0f4      	beq.n	800123a <__aeabi_i2f+0x7e>
 8001250:	e7e9      	b.n	8001226 <__aeabi_i2f+0x6a>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	fbffffff 	.word	0xfbffffff

08001258 <__aeabi_ui2f>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	1e05      	subs	r5, r0, #0
 800125c:	d00e      	beq.n	800127c <__aeabi_ui2f+0x24>
 800125e:	f000 f83d 	bl	80012dc <__clzsi2>
 8001262:	239e      	movs	r3, #158	; 0x9e
 8001264:	0004      	movs	r4, r0
 8001266:	1a1b      	subs	r3, r3, r0
 8001268:	2b96      	cmp	r3, #150	; 0x96
 800126a:	dc0c      	bgt.n	8001286 <__aeabi_ui2f+0x2e>
 800126c:	2808      	cmp	r0, #8
 800126e:	dd01      	ble.n	8001274 <__aeabi_ui2f+0x1c>
 8001270:	3c08      	subs	r4, #8
 8001272:	40a5      	lsls	r5, r4
 8001274:	026d      	lsls	r5, r5, #9
 8001276:	0a6d      	lsrs	r5, r5, #9
 8001278:	b2d8      	uxtb	r0, r3
 800127a:	e001      	b.n	8001280 <__aeabi_ui2f+0x28>
 800127c:	2000      	movs	r0, #0
 800127e:	2500      	movs	r5, #0
 8001280:	05c0      	lsls	r0, r0, #23
 8001282:	4328      	orrs	r0, r5
 8001284:	bd70      	pop	{r4, r5, r6, pc}
 8001286:	2b99      	cmp	r3, #153	; 0x99
 8001288:	dd09      	ble.n	800129e <__aeabi_ui2f+0x46>
 800128a:	0002      	movs	r2, r0
 800128c:	0029      	movs	r1, r5
 800128e:	321b      	adds	r2, #27
 8001290:	4091      	lsls	r1, r2
 8001292:	1e4a      	subs	r2, r1, #1
 8001294:	4191      	sbcs	r1, r2
 8001296:	2205      	movs	r2, #5
 8001298:	1a12      	subs	r2, r2, r0
 800129a:	40d5      	lsrs	r5, r2
 800129c:	430d      	orrs	r5, r1
 800129e:	2c05      	cmp	r4, #5
 80012a0:	dc12      	bgt.n	80012c8 <__aeabi_ui2f+0x70>
 80012a2:	0029      	movs	r1, r5
 80012a4:	4e0c      	ldr	r6, [pc, #48]	; (80012d8 <__aeabi_ui2f+0x80>)
 80012a6:	4031      	ands	r1, r6
 80012a8:	076a      	lsls	r2, r5, #29
 80012aa:	d009      	beq.n	80012c0 <__aeabi_ui2f+0x68>
 80012ac:	200f      	movs	r0, #15
 80012ae:	4028      	ands	r0, r5
 80012b0:	2804      	cmp	r0, #4
 80012b2:	d005      	beq.n	80012c0 <__aeabi_ui2f+0x68>
 80012b4:	3104      	adds	r1, #4
 80012b6:	014a      	lsls	r2, r1, #5
 80012b8:	d502      	bpl.n	80012c0 <__aeabi_ui2f+0x68>
 80012ba:	239f      	movs	r3, #159	; 0x9f
 80012bc:	4031      	ands	r1, r6
 80012be:	1b1b      	subs	r3, r3, r4
 80012c0:	0189      	lsls	r1, r1, #6
 80012c2:	0a4d      	lsrs	r5, r1, #9
 80012c4:	b2d8      	uxtb	r0, r3
 80012c6:	e7db      	b.n	8001280 <__aeabi_ui2f+0x28>
 80012c8:	1f62      	subs	r2, r4, #5
 80012ca:	4095      	lsls	r5, r2
 80012cc:	0029      	movs	r1, r5
 80012ce:	4e02      	ldr	r6, [pc, #8]	; (80012d8 <__aeabi_ui2f+0x80>)
 80012d0:	4031      	ands	r1, r6
 80012d2:	076a      	lsls	r2, r5, #29
 80012d4:	d0f4      	beq.n	80012c0 <__aeabi_ui2f+0x68>
 80012d6:	e7e9      	b.n	80012ac <__aeabi_ui2f+0x54>
 80012d8:	fbffffff 	.word	0xfbffffff

080012dc <__clzsi2>:
 80012dc:	211c      	movs	r1, #28
 80012de:	2301      	movs	r3, #1
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	4298      	cmp	r0, r3
 80012e4:	d301      	bcc.n	80012ea <__clzsi2+0xe>
 80012e6:	0c00      	lsrs	r0, r0, #16
 80012e8:	3910      	subs	r1, #16
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	4298      	cmp	r0, r3
 80012ee:	d301      	bcc.n	80012f4 <__clzsi2+0x18>
 80012f0:	0a00      	lsrs	r0, r0, #8
 80012f2:	3908      	subs	r1, #8
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	4298      	cmp	r0, r3
 80012f8:	d301      	bcc.n	80012fe <__clzsi2+0x22>
 80012fa:	0900      	lsrs	r0, r0, #4
 80012fc:	3904      	subs	r1, #4
 80012fe:	a202      	add	r2, pc, #8	; (adr r2, 8001308 <__clzsi2+0x2c>)
 8001300:	5c10      	ldrb	r0, [r2, r0]
 8001302:	1840      	adds	r0, r0, r1
 8001304:	4770      	bx	lr
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	02020304 	.word	0x02020304
 800130c:	01010101 	.word	0x01010101
	...

08001318 <__clzdi2>:
 8001318:	b510      	push	{r4, lr}
 800131a:	2900      	cmp	r1, #0
 800131c:	d103      	bne.n	8001326 <__clzdi2+0xe>
 800131e:	f7ff ffdd 	bl	80012dc <__clzsi2>
 8001322:	3020      	adds	r0, #32
 8001324:	e002      	b.n	800132c <__clzdi2+0x14>
 8001326:	0008      	movs	r0, r1
 8001328:	f7ff ffd8 	bl	80012dc <__clzsi2>
 800132c:	bd10      	pop	{r4, pc}
 800132e:	46c0      	nop			; (mov r8, r8)

08001330 <user_init_bme>:
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
void bme68x_delay_us(uint32_t period, void *intf_ptr);


uint8_t user_init_bme(struct bme68x_dev *bme)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	// Init config vars
	int8_t rslt = BME68X_OK;
 8001338:	2547      	movs	r5, #71	; 0x47
 800133a:	197b      	adds	r3, r7, r5
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
    struct bme68x_conf conf;
    struct bme68x_heatr_conf heatr_conf;
    struct bme68x_data data;
    uint32_t del_period;
    uint32_t time_ms = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t n_fields;
    uint16_t sample_count = 1;
 8001344:	233e      	movs	r3, #62	; 0x3e
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2201      	movs	r2, #1
 800134a:	801a      	strh	r2, [r3, #0]

	// Set I2C Address
	dev_addr = BME68X_I2C_ADDR_HIGH;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <user_init_bme+0xb8>)
 800134e:	2277      	movs	r2, #119	; 0x77
 8001350:	701a      	strb	r2, [r3, #0]

	// Init struct
	bme->read = bme68x_i2c_read;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a25      	ldr	r2, [pc, #148]	; (80013ec <user_init_bme+0xbc>)
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
	bme->write = bme68x_i2c_write;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <user_init_bme+0xc0>)
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
	bme->intf = BME68X_I2C_INTF;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	731a      	strb	r2, [r3, #12]
	bme->delay_us = bme68x_delay_us;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <user_init_bme+0xc4>)
 8001368:	649a      	str	r2, [r3, #72]	; 0x48
	bme->intf_ptr = &dev_addr;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <user_init_bme+0xb8>)
 800136e:	605a      	str	r2, [r3, #4]
	bme->amb_temp = 25; /* The ambient temperature in deg C is used for defining the heater temperature */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2219      	movs	r2, #25
 8001374:	739a      	strb	r2, [r3, #14]

    // Run API init
    rslt = bme68x_init(bme);
 8001376:	197c      	adds	r4, r7, r5
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 fb99 	bl	8001ab2 <bme68x_init>
 8001380:	0003      	movs	r3, r0
 8001382:	7023      	strb	r3, [r4, #0]

    // Config Filter
    conf.filter = BME68X_FILTER_OFF;
 8001384:	2138      	movs	r1, #56	; 0x38
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2200      	movs	r2, #0
 800138a:	70da      	strb	r2, [r3, #3]
    conf.odr = BME68X_ODR_NONE;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2208      	movs	r2, #8
 8001390:	711a      	strb	r2, [r3, #4]
    conf.os_hum = BME68X_OS_16X;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2205      	movs	r2, #5
 8001396:	701a      	strb	r2, [r3, #0]
    conf.os_pres = BME68X_OS_1X;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2201      	movs	r2, #1
 800139c:	709a      	strb	r2, [r3, #2]
    conf.os_temp = BME68X_OS_2X;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2202      	movs	r2, #2
 80013a2:	705a      	strb	r2, [r3, #1]
    rslt = bme68x_set_conf(&conf, bme);
 80013a4:	197c      	adds	r4, r7, r5
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	0011      	movs	r1, r2
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 fd1d 	bl	8001dec <bme68x_set_conf>
 80013b2:	0003      	movs	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]

    // Config heater
    heatr_conf.enable = BME68X_ENABLE;
 80013b6:	2124      	movs	r1, #36	; 0x24
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
    heatr_conf.heatr_temp = 300;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2296      	movs	r2, #150	; 0x96
 80013c2:	0052      	lsls	r2, r2, #1
 80013c4:	805a      	strh	r2, [r3, #2]
    heatr_conf.heatr_dur = 100;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2264      	movs	r2, #100	; 0x64
 80013ca:	809a      	strh	r2, [r3, #4]
    rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, bme);
 80013cc:	197c      	adds	r4, r7, r5
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	0019      	movs	r1, r3
 80013d4:	2001      	movs	r0, #1
 80013d6:	f000 fef9 	bl	80021cc <bme68x_set_heatr_conf>
 80013da:	0003      	movs	r3, r0
 80013dc:	7023      	strb	r3, [r4, #0]



	return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b012      	add	sp, #72	; 0x48
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}
 80013e8:	20000078 	.word	0x20000078
 80013ec:	080013f9 	.word	0x080013f9
 80013f0:	08001459 	.word	0x08001459
 80013f4:	080014b5 	.word	0x080014b5

080013f8 <bme68x_i2c_read>:
	return 0;
}

// Wrapper code to map I2C read
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	240f      	movs	r4, #15
 8001406:	193b      	adds	r3, r7, r4
 8001408:	1c02      	adds	r2, r0, #0
 800140a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;

    uint8_t device_addr = *(uint8_t*)intf_ptr;
 800140c:	2117      	movs	r1, #23
 800140e:	187b      	adds	r3, r7, r1
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	701a      	strb	r2, [r3, #0]

    (void)intf_ptr;

    ret = HAL_I2C_Mem_Read(&hi2c1, device_addr<<1, reg_addr,
 8001416:	187b      	adds	r3, r7, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	18db      	adds	r3, r3, r3
 800141e:	b299      	uxth	r1, r3
 8001420:	193b      	adds	r3, r7, r4
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	b29b      	uxth	r3, r3
 800142a:	2616      	movs	r6, #22
 800142c:	19bc      	adds	r4, r7, r6
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <bme68x_i2c_read+0x5c>)
 8001430:	2564      	movs	r5, #100	; 0x64
 8001432:	9502      	str	r5, [sp, #8]
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	f002 f988 	bl	8003750 <HAL_I2C_Mem_Read>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]
    		(uint16_t)sizeof(uint8_t), reg_data, (uint16_t) len, 100);

    return ret;
 8001444:	19bb      	adds	r3, r7, r6
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b25b      	sxtb	r3, r3
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b007      	add	sp, #28
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	2000007c 	.word	0x2000007c

08001458 <bme68x_i2c_write>:

// Wrapper code to map I2C write
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b08b      	sub	sp, #44	; 0x2c
 800145c:	af04      	add	r7, sp, #16
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	240f      	movs	r4, #15
 8001466:	193b      	adds	r3, r7, r4
 8001468:	1c02      	adds	r2, r0, #0
 800146a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef ret;

    uint8_t device_addr = *(uint8_t*)intf_ptr;
 800146c:	2117      	movs	r1, #23
 800146e:	187b      	adds	r3, r7, r1
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	701a      	strb	r2, [r3, #0]

    (void)intf_ptr;

    ret = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) device_addr, (uint16_t) reg_addr,
 8001476:	187b      	adds	r3, r7, r1
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b299      	uxth	r1, r3
 800147c:	193b      	adds	r3, r7, r4
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b29a      	uxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	b29b      	uxth	r3, r3
 8001486:	2616      	movs	r6, #22
 8001488:	19bc      	adds	r4, r7, r6
 800148a:	4809      	ldr	r0, [pc, #36]	; (80014b0 <bme68x_i2c_write+0x58>)
 800148c:	2564      	movs	r5, #100	; 0x64
 800148e:	9502      	str	r5, [sp, #8]
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	f002 f82c 	bl	80034f4 <HAL_I2C_Mem_Write>
 800149c:	0003      	movs	r3, r0
 800149e:	7023      	strb	r3, [r4, #0]
                                        (uint16_t) sizeof(reg_addr), (uint8_t *)reg_data, (uint16_t)len, 100);

    return ret;
 80014a0:	19bb      	adds	r3, r7, r6
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b25b      	sxtb	r3, r3
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b007      	add	sp, #28
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	2000007c 	.word	0x2000007c

080014b4 <bme68x_delay_us>:

// Wrapper code to map delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
    (void)intf_ptr;
    //coines_delay_usec(period);
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b002      	add	sp, #8
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	240c      	movs	r4, #12
 80014d0:	193b      	adds	r3, r7, r4
 80014d2:	0018      	movs	r0, r3
 80014d4:	2314      	movs	r3, #20
 80014d6:	001a      	movs	r2, r3
 80014d8:	2100      	movs	r1, #0
 80014da:	f004 fe5d 	bl	8006198 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_GPIO_Init+0x98>)
 80014e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_GPIO_Init+0x98>)
 80014e4:	2104      	movs	r1, #4
 80014e6:	430a      	orrs	r2, r1
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_GPIO_Init+0x98>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	2204      	movs	r2, #4
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_GPIO_Init+0x98>)
 80014f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_GPIO_Init+0x98>)
 80014fc:	2101      	movs	r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_GPIO_Init+0x98>)
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	2201      	movs	r2, #1
 8001508:	4013      	ands	r3, r2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_GPIO_Init+0x98>)
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_GPIO_Init+0x98>)
 8001514:	2102      	movs	r1, #2
 8001516:	430a      	orrs	r2, r1
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_GPIO_Init+0x98>)
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_GPIO_Init+0x9c>)
 8001528:	2200      	movs	r2, #0
 800152a:	2108      	movs	r1, #8
 800152c:	0018      	movs	r0, r3
 800152e:	f001 ff13 	bl	8003358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001532:	0021      	movs	r1, r4
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2208      	movs	r2, #8
 8001538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2201      	movs	r2, #1
 800153e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800154c:	187b      	adds	r3, r7, r1
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <MX_GPIO_Init+0x9c>)
 8001550:	0019      	movs	r1, r3
 8001552:	0010      	movs	r0, r2
 8001554:	f001 fd92 	bl	800307c <HAL_GPIO_Init>

}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b009      	add	sp, #36	; 0x24
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	50000400 	.word	0x50000400

08001568 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_I2C1_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_I2C1_Init+0x74>)
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <MX_I2C1_Init+0x7c>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_I2C1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_I2C1_Init+0x74>)
 8001580:	2201      	movs	r2, #1
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_I2C1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_I2C1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_I2C1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_I2C1_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_I2C1_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_I2C1_Init+0x74>)
 80015a4:	0018      	movs	r0, r3
 80015a6:	f001 ff0f 	bl	80033c8 <HAL_I2C_Init>
 80015aa:	1e03      	subs	r3, r0, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ae:	f000 f901 	bl	80017b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_I2C1_Init+0x74>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	0018      	movs	r0, r3
 80015b8:	f002 fcf8 	bl	8003fac <HAL_I2CEx_ConfigAnalogFilter>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c0:	f000 f8f8 	bl	80017b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <MX_I2C1_Init+0x74>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	0018      	movs	r0, r3
 80015ca:	f002 fd3b 	bl	8004044 <HAL_I2CEx_ConfigDigitalFilter>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 f8ef 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000007c 	.word	0x2000007c
 80015e0:	40005400 	.word	0x40005400
 80015e4:	00300f38 	.word	0x00300f38

080015e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	240c      	movs	r4, #12
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	0018      	movs	r0, r3
 80015f6:	2314      	movs	r3, #20
 80015f8:	001a      	movs	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	f004 fdcc 	bl	8006198 <memset>
  if(i2cHandle->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <HAL_I2C_MspInit+0x80>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12a      	bne.n	8001660 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_I2C_MspInit+0x84>)
 800160c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001610:	2101      	movs	r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	2201      	movs	r2, #1
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	22c0      	movs	r2, #192	; 0xc0
 8001626:	00d2      	lsls	r2, r2, #3
 8001628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	0021      	movs	r1, r4
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2212      	movs	r2, #18
 8001630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2203      	movs	r2, #3
 800163c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2201      	movs	r2, #1
 8001642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	187a      	adds	r2, r7, r1
 8001646:	23a0      	movs	r3, #160	; 0xa0
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f001 fd15 	bl	800307c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_I2C_MspInit+0x84>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0389      	lsls	r1, r1, #14
 800165c:	430a      	orrs	r2, r1
 800165e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b009      	add	sp, #36	; 0x24
 8001666:	bd90      	pop	{r4, r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	40021000 	.word	0x40021000

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f001 fb90 	bl	8002d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001678:	f000 f826 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f7ff ff24 	bl	80014c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001680:	f000 f978 	bl	8001974 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8001684:	f000 f8da 	bl	800183c <MX_TIM21_Init>
  MX_I2C1_Init();
 8001688:	f7ff ff6e 	bl	8001568 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim21);
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <main+0x4c>)
 800168e:	0018      	movs	r0, r3
 8001690:	f003 fc88 	bl	8004fa4 <HAL_TIM_Base_Start_IT>

  // Init BME
  user_init_bme(&bme);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <main+0x50>)
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff fe4a 	bl	8001330 <user_init_bme>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <main+0x54>)
 800169e:	2108      	movs	r1, #8
 80016a0:	0018      	movs	r0, r3
 80016a2:	f001 fe76 	bl	8003392 <HAL_GPIO_TogglePin>

	  HAL_Delay(2000);
 80016a6:	23fa      	movs	r3, #250	; 0xfa
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	0018      	movs	r0, r3
 80016ac:	f001 fbe4 	bl	8002e78 <HAL_Delay>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 80016b0:	2102      	movs	r1, #2
 80016b2:	2000      	movs	r0, #0
 80016b4:	f002 fd12 	bl	80040dc <HAL_PWR_EnterSLEEPMode>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016b8:	e7f0      	b.n	800169c <main+0x2c>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	200000d0 	.word	0x200000d0
 80016c0:	20000028 	.word	0x20000028
 80016c4:	50000400 	.word	0x50000400

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b099      	sub	sp, #100	; 0x64
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	242c      	movs	r4, #44	; 0x2c
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	2334      	movs	r3, #52	; 0x34
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f004 fd5d 	bl	8006198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016de:	2318      	movs	r3, #24
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	0018      	movs	r0, r3
 80016e4:	2314      	movs	r3, #20
 80016e6:	001a      	movs	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f004 fd55 	bl	8006198 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ee:	003b      	movs	r3, r7
 80016f0:	0018      	movs	r0, r3
 80016f2:	2318      	movs	r3, #24
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f004 fd4e 	bl	8006198 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <SystemClock_Config+0xe4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <SystemClock_Config+0xe8>)
 8001702:	401a      	ands	r2, r3
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <SystemClock_Config+0xe4>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0109      	lsls	r1, r1, #4
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800170e:	0021      	movs	r1, r4
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2201      	movs	r2, #1
 800171a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2210      	movs	r2, #16
 8001720:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2202      	movs	r2, #2
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	02d2      	lsls	r2, r2, #11
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	03d2      	lsls	r2, r2, #15
 800173c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	187b      	adds	r3, r7, r1
 8001740:	0018      	movs	r0, r3
 8001742:	f002 fd23 	bl	800418c <HAL_RCC_OscConfig>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800174a:	f000 f833 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	2118      	movs	r1, #24
 8001750:	187b      	adds	r3, r7, r1
 8001752:	220f      	movs	r2, #15
 8001754:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2203      	movs	r2, #3
 800175a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2101      	movs	r1, #1
 8001772:	0018      	movs	r0, r3
 8001774:	f003 f886 	bl	8004884 <HAL_RCC_ClockConfig>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800177c:	f000 f81a 	bl	80017b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001780:	003b      	movs	r3, r7
 8001782:	220a      	movs	r2, #10
 8001784:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001786:	003b      	movs	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800178c:	003b      	movs	r3, r7
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001792:	003b      	movs	r3, r7
 8001794:	0018      	movs	r0, r3
 8001796:	f003 fa99 	bl	8004ccc <HAL_RCCEx_PeriphCLKConfig>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800179e:	f000 f809 	bl	80017b4 <Error_Handler>
  }
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b019      	add	sp, #100	; 0x64
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40007000 	.word	0x40007000
 80017b0:	ffffe7ff 	.word	0xffffe7ff

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_MspInit+0x24>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x24>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_MspInit+0x24>)
 80017d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_MspInit+0x24>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	0549      	lsls	r1, r1, #21
 80017da:	430a      	orrs	r2, r1
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180c:	f001 fb18 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <TIM21_IRQHandler+0x14>)
 800181e:	0018      	movs	r0, r3
 8001820:	f003 fc0c 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	200000d0 	.word	0x200000d0

08001830 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	2308      	movs	r3, #8
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	0018      	movs	r0, r3
 8001848:	2310      	movs	r3, #16
 800184a:	001a      	movs	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	f004 fca3 	bl	8006198 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	003b      	movs	r3, r7
 8001854:	0018      	movs	r0, r3
 8001856:	2308      	movs	r3, #8
 8001858:	001a      	movs	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f004 fc9c 	bl	8006198 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_TIM21_Init+0xa4>)
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <MX_TIM21_Init+0xa8>)
 8001864:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000;
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_TIM21_Init+0xa4>)
 8001868:	22fa      	movs	r2, #250	; 0xfa
 800186a:	01d2      	lsls	r2, r2, #7
 800186c:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_TIM21_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_TIM21_Init+0xa4>)
 8001876:	22fa      	movs	r2, #250	; 0xfa
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_TIM21_Init+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_TIM21_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_TIM21_Init+0xa4>)
 800188a:	0018      	movs	r0, r3
 800188c:	f003 fb4a 	bl	8004f24 <HAL_TIM_Base_Init>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM21_Init+0x5c>
  {
    Error_Handler();
 8001894:	f7ff ff8e 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	2108      	movs	r1, #8
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	0152      	lsls	r2, r2, #5
 80018a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80018a2:	187a      	adds	r2, r7, r1
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_TIM21_Init+0xa4>)
 80018a6:	0011      	movs	r1, r2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f003 fcaf 	bl	800520c <HAL_TIM_ConfigClockSource>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 80018b2:	f7ff ff7f 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	003b      	movs	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	003b      	movs	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80018c2:	003a      	movs	r2, r7
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_TIM21_Init+0xa4>)
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f003 fe81 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80018d2:	f7ff ff6f 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b006      	add	sp, #24
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	200000d0 	.word	0x200000d0
 80018e4:	40010800 	.word	0x40010800

080018e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_TIM_Base_MspInit+0x38>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10d      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_TIM_Base_MspInit+0x3c>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x3c>)
 8001900:	2104      	movs	r1, #4
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2014      	movs	r0, #20
 800190c:	f001 fb84 	bl	8003018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001910:	2014      	movs	r0, #20
 8001912:	f001 fb96 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40010800 	.word	0x40010800
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	b091      	sub	sp, #68	; 0x44
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	uint8_t data[50] = "Hello group 8\n\r";
 8001930:	240c      	movs	r4, #12
 8001932:	1939      	adds	r1, r7, r4
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001936:	000b      	movs	r3, r1
 8001938:	ca61      	ldmia	r2!, {r0, r5, r6}
 800193a:	c361      	stmia	r3!, {r0, r5, r6}
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	000b      	movs	r3, r1
 8001942:	3310      	adds	r3, #16
 8001944:	2222      	movs	r2, #34	; 0x22
 8001946:	2100      	movs	r1, #0
 8001948:	0018      	movs	r0, r3
 800194a:	f004 fc25 	bl	8006198 <memset>

	HAL_UART_Transmit(&huart2, data, strlen((char*)data), 100);
 800194e:	193b      	adds	r3, r7, r4
 8001950:	0018      	movs	r0, r3
 8001952:	f7fe fbd9 	bl	8000108 <strlen>
 8001956:	0003      	movs	r3, r0
 8001958:	b29a      	uxth	r2, r3
 800195a:	1939      	adds	r1, r7, r4
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	f003 fee2 	bl	8005728 <HAL_UART_Transmit>
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b011      	add	sp, #68	; 0x44
 800196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196c:	080061c0 	.word	0x080061c0
 8001970:	20000110 	.word	0x20000110

08001974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <MX_USART2_UART_Init+0x5c>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001980:	22e1      	movs	r2, #225	; 0xe1
 8001982:	0252      	lsls	r2, r2, #9
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART2_UART_Init+0x58>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <MX_USART2_UART_Init+0x58>)
 80019b8:	0018      	movs	r0, r3
 80019ba:	f003 fe61 	bl	8005680 <HAL_UART_Init>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019c2:	f7ff fef7 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000110 	.word	0x20000110
 80019d0:	40004400 	.word	0x40004400

080019d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	240c      	movs	r4, #12
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	0018      	movs	r0, r3
 80019e2:	2314      	movs	r3, #20
 80019e4:	001a      	movs	r2, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	f004 fbd6 	bl	8006198 <memset>
  if(uartHandle->Instance==USART2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_UART_MspInit+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d129      	bne.n	8001a4a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_UART_MspInit+0x84>)
 80019f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_UART_MspInit+0x84>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0289      	lsls	r1, r1, #10
 8001a00:	430a      	orrs	r2, r1
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_UART_MspInit+0x84>)
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_UART_MspInit+0x84>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_UART_MspInit+0x84>)
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2201      	movs	r2, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a1c:	0021      	movs	r1, r4
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_UART_MspInit+0x88>)
 8001a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2202      	movs	r2, #2
 8001a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2203      	movs	r2, #3
 8001a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2204      	movs	r2, #4
 8001a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	187a      	adds	r2, r7, r1
 8001a3e:	23a0      	movs	r3, #160	; 0xa0
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 fb19 	bl	800307c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b009      	add	sp, #36	; 0x24
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40004400 	.word	0x40004400
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	00008004 	.word	0x00008004

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a62:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a64:	f7ff fee4 	bl	8001830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <LoopForever+0xe>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	; (8001aac <LoopForever+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f004 fb5f 	bl	8006150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fded 	bl	8001670 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
   ldr   r0, =_estack
 8001a98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001aa4:	080063cc 	.word	0x080063cc
  ldr r2, =_sbss
 8001aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001aac:	2000019c 	.word	0x2000019c

08001ab0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_COMP_IRQHandler>

08001ab2 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8001ab2:	b5b0      	push	{r4, r5, r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 f93d 	bl	8001d3c <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	250f      	movs	r5, #15
 8001ac6:	197c      	adds	r4, r7, r5
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	20d0      	movs	r0, #208	; 0xd0
 8001ace:	f000 f8da 	bl	8001c86 <bme68x_get_regs>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8001ad6:	197b      	adds	r3, r7, r5
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11b      	bne.n	8001b18 <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b61      	cmp	r3, #97	; 0x61
 8001ae6:	d113      	bne.n	8001b10 <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8001ae8:	197c      	adds	r4, r7, r5
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f001 f92f 	bl	8002d50 <read_variant_id>
 8001af2:	0003      	movs	r3, r0
 8001af4:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8001af6:	197b      	adds	r3, r7, r5
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8001b00:	197c      	adds	r4, r7, r5
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fff7 	bl	8002af8 <get_calib_data>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	7023      	strb	r3, [r4, #0]
 8001b0e:	e003      	b.n	8001b18 <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8001b10:	230f      	movs	r3, #15
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	22fd      	movs	r2, #253	; 0xfd
 8001b16:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b25b      	sxtb	r3, r3
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b004      	add	sp, #16
 8001b26:	bdb0      	pop	{r4, r5, r7, pc}

08001b28 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001b36:	2310      	movs	r3, #16
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	2210      	movs	r2, #16
 8001b42:	2100      	movs	r1, #0
 8001b44:	0018      	movs	r0, r3
 8001b46:	f004 fb27 	bl	8006198 <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b4a:	2527      	movs	r5, #39	; 0x27
 8001b4c:	197c      	adds	r4, r7, r5
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fde6 	bl	8002722 <null_ptr_check>
 8001b56:	0003      	movs	r3, r0
 8001b58:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8001b5a:	197b      	adds	r3, r7, r5
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d000      	beq.n	8001b66 <bme68x_set_regs+0x3e>
 8001b64:	e083      	b.n	8001c6e <bme68x_set_regs+0x146>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d100      	bne.n	8001b6e <bme68x_set_regs+0x46>
 8001b6c:	e07f      	b.n	8001c6e <bme68x_set_regs+0x146>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d100      	bne.n	8001b76 <bme68x_set_regs+0x4e>
 8001b74:	e07b      	b.n	8001c6e <bme68x_set_regs+0x146>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d100      	bne.n	8001b7e <bme68x_set_regs+0x56>
 8001b7c:	e070      	b.n	8001c60 <bme68x_set_regs+0x138>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0a      	cmp	r3, #10
 8001b82:	d900      	bls.n	8001b86 <bme68x_set_regs+0x5e>
 8001b84:	e06c      	b.n	8001c60 <bme68x_set_regs+0x138>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8001b86:	2324      	movs	r3, #36	; 0x24
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	e03f      	b.n	8001c10 <bme68x_set_regs+0xe8>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	7b1b      	ldrb	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d11d      	bne.n	8001bd4 <bme68x_set_regs+0xac>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8001b98:	2524      	movs	r5, #36	; 0x24
 8001b9a:	197b      	adds	r3, r7, r5
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2227      	movs	r2, #39	; 0x27
 8001ba6:	18bc      	adds	r4, r7, r2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	0011      	movs	r1, r2
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fcca 	bl	8002546 <set_mem_page>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001bb6:	197b      	adds	r3, r7, r5
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	197b      	adds	r3, r7, r5
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	217f      	movs	r1, #127	; 0x7f
 8001bc8:	400a      	ands	r2, r1
 8001bca:	b2d1      	uxtb	r1, r2
 8001bcc:	2210      	movs	r2, #16
 8001bce:	18ba      	adds	r2, r7, r2
 8001bd0:	54d1      	strb	r1, [r2, r3]
 8001bd2:	e00b      	b.n	8001bec <bme68x_set_regs+0xc4>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8001bd4:	2124      	movs	r1, #36	; 0x24
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	18d2      	adds	r2, r2, r3
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	7811      	ldrb	r1, [r2, #0]
 8001be6:	2210      	movs	r2, #16
 8001be8:	18ba      	adds	r2, r7, r2
 8001bea:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001bec:	2024      	movs	r0, #36	; 0x24
 8001bee:	183b      	adds	r3, r7, r0
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	18d2      	adds	r2, r2, r3
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	7811      	ldrb	r1, [r2, #0]
 8001c00:	2210      	movs	r2, #16
 8001c02:	18ba      	adds	r2, r7, r2
 8001c04:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 8001c06:	183b      	adds	r3, r7, r0
 8001c08:	881a      	ldrh	r2, [r3, #0]
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	3201      	adds	r2, #1
 8001c0e:	801a      	strh	r2, [r3, #0]
 8001c10:	2324      	movs	r3, #36	; 0x24
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8b9      	bhi.n	8001b90 <bme68x_set_regs+0x68>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8001c1c:	2627      	movs	r6, #39	; 0x27
 8001c1e:	19bb      	adds	r3, r7, r6
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d120      	bne.n	8001c6a <bme68x_set_regs+0x142>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	7818      	ldrb	r0, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685d      	ldr	r5, [r3, #4]
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	1c59      	adds	r1, r3, #1
 8001c40:	002b      	movs	r3, r5
 8001c42:	47a0      	blx	r4
 8001c44:	0003      	movs	r3, r0
 8001c46:	0019      	movs	r1, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	224c      	movs	r2, #76	; 0x4c
 8001c4c:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	224c      	movs	r2, #76	; 0x4c
 8001c52:	569b      	ldrsb	r3, [r3, r2]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <bme68x_set_regs+0x142>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001c58:	19bb      	adds	r3, r7, r6
 8001c5a:	22fe      	movs	r2, #254	; 0xfe
 8001c5c:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8001c5e:	e004      	b.n	8001c6a <bme68x_set_regs+0x142>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8001c60:	2327      	movs	r3, #39	; 0x27
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	22fc      	movs	r2, #252	; 0xfc
 8001c66:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001c68:	e005      	b.n	8001c76 <bme68x_set_regs+0x14e>
            if (rslt == BME68X_OK)
 8001c6a:	46c0      	nop			; (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001c6c:	e003      	b.n	8001c76 <bme68x_set_regs+0x14e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001c6e:	2327      	movs	r3, #39	; 0x27
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	22ff      	movs	r2, #255	; 0xff
 8001c74:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001c76:	2327      	movs	r3, #39	; 0x27
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b25b      	sxtb	r3, r3
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b00b      	add	sp, #44	; 0x2c
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c86 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	250f      	movs	r5, #15
 8001c94:	197b      	adds	r3, r7, r5
 8001c96:	1c02      	adds	r2, r0, #0
 8001c98:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c9a:	2617      	movs	r6, #23
 8001c9c:	19bc      	adds	r4, r7, r6
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 fd3e 	bl	8002722 <null_ptr_check>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 8001caa:	19bb      	adds	r3, r7, r6
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d136      	bne.n	8001d22 <bme68x_get_regs+0x9c>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d033      	beq.n	8001d22 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7b1b      	ldrb	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001cc2:	19bc      	adds	r4, r7, r6
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	0011      	movs	r1, r2
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fc3a 	bl	8002546 <set_mem_page>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8001cd6:	19bb      	adds	r3, r7, r6
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001ce0:	197b      	adds	r3, r7, r5
 8001ce2:	197a      	adds	r2, r7, r5
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	4249      	negs	r1, r1
 8001cea:	430a      	orrs	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685d      	ldr	r5, [r3, #4]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	7818      	ldrb	r0, [r3, #0]
 8001d00:	002b      	movs	r3, r5
 8001d02:	47a0      	blx	r4
 8001d04:	0003      	movs	r3, r0
 8001d06:	0019      	movs	r1, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	224c      	movs	r2, #76	; 0x4c
 8001d0c:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	224c      	movs	r2, #76	; 0x4c
 8001d12:	569b      	ldrsb	r3, [r3, r2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8001d18:	2317      	movs	r3, #23
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	22fe      	movs	r2, #254	; 0xfe
 8001d1e:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8001d20:	e003      	b.n	8001d2a <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001d22:	2317      	movs	r3, #23
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001d2a:	2317      	movs	r3, #23
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25b      	sxtb	r3, r3
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b007      	add	sp, #28
 8001d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d3c <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001d3c:	b5b0      	push	{r4, r5, r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001d44:	230e      	movs	r3, #14
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	22e0      	movs	r2, #224	; 0xe0
 8001d4a:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001d4c:	230d      	movs	r3, #13
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	22b6      	movs	r2, #182	; 0xb6
 8001d52:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d54:	250f      	movs	r5, #15
 8001d56:	197c      	adds	r4, r7, r5
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 fce1 	bl	8002722 <null_ptr_check>
 8001d60:	0003      	movs	r3, r0
 8001d62:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8001d64:	002a      	movs	r2, r5
 8001d66:	18bb      	adds	r3, r7, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d133      	bne.n	8001dd8 <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d106      	bne.n	8001d86 <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8001d78:	18bc      	adds	r4, r7, r2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f000 fc5f 	bl	8002640 <get_mem_page>
 8001d82:	0003      	movs	r3, r0
 8001d84:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8001d86:	250f      	movs	r5, #15
 8001d88:	197b      	adds	r3, r7, r5
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d122      	bne.n	8001dd8 <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001d92:	197c      	adds	r4, r7, r5
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	220d      	movs	r2, #13
 8001d98:	18b9      	adds	r1, r7, r2
 8001d9a:	220e      	movs	r2, #14
 8001d9c:	18b8      	adds	r0, r7, r2
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f7ff fec2 	bl	8001b28 <bme68x_set_regs>
 8001da4:	0003      	movs	r3, r0
 8001da6:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8001da8:	002c      	movs	r4, r5
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	480a      	ldr	r0, [pc, #40]	; (8001de8 <bme68x_soft_reset+0xac>)
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7b1b      	ldrb	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8001dca:	193c      	adds	r4, r7, r4
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fc36 	bl	8002640 <get_mem_page>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b004      	add	sp, #16
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	00002710 	.word	0x00002710

08001dec <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8001df6:	231e      	movs	r3, #30
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	231d      	movs	r3, #29
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001e06:	2314      	movs	r3, #20
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	4a9b      	ldr	r2, [pc, #620]	; (8002078 <bme68x_set_conf+0x28c>)
 8001e0c:	6811      	ldr	r1, [r2, #0]
 8001e0e:	6019      	str	r1, [r3, #0]
 8001e10:	7912      	ldrb	r2, [r2, #4]
 8001e12:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001e14:	230c      	movs	r3, #12
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	711a      	strb	r2, [r3, #4]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001e20:	251f      	movs	r5, #31
 8001e22:	197c      	adds	r4, r7, r5
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	231c      	movs	r3, #28
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 f9a5 	bl	800217c <bme68x_get_op_mode>
 8001e32:	0003      	movs	r3, r0
 8001e34:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8001e36:	197b      	adds	r3, r7, r5
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <bme68x_set_conf+0x64>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001e40:	197c      	adds	r4, r7, r5
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	0019      	movs	r1, r3
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f918 	bl	800207c <bme68x_set_op_mode>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <bme68x_set_conf+0x74>
    {
        rslt = BME68X_E_NULL_PTR;
 8001e56:	231f      	movs	r3, #31
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	22ff      	movs	r2, #255	; 0xff
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e0dd      	b.n	800201c <bme68x_set_conf+0x230>
    }
    else if (rslt == BME68X_OK)
 8001e60:	251f      	movs	r5, #31
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d000      	beq.n	8001e6e <bme68x_set_conf+0x82>
 8001e6c:	e0d6      	b.n	800201c <bme68x_set_conf+0x230>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8001e6e:	2314      	movs	r3, #20
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	7818      	ldrb	r0, [r3, #0]
 8001e74:	197c      	adds	r4, r7, r5
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	220c      	movs	r2, #12
 8001e7a:	18b9      	adds	r1, r7, r2
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f7ff ff02 	bl	8001c86 <bme68x_get_regs>
 8001e82:	0003      	movs	r3, r0
 8001e84:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	224d      	movs	r2, #77	; 0x4d
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8001e8e:	197b      	adds	r3, r7, r5
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b25b      	sxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <bme68x_set_conf+0xc0>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3303      	adds	r3, #3
 8001e9c:	197c      	adds	r4, r7, r5
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	2107      	movs	r1, #7
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 fc04 	bl	80026b0 <boundary_check>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001eac:	221f      	movs	r2, #31
 8001eae:	18bb      	adds	r3, r7, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <bme68x_set_conf+0xe0>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	18bc      	adds	r4, r7, r2
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fbf4 	bl	80026b0 <boundary_check>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001ecc:	221f      	movs	r2, #31
 8001ece:	18bb      	adds	r3, r7, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <bme68x_set_conf+0x100>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3302      	adds	r3, #2
 8001edc:	18bc      	adds	r4, r7, r2
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fbe4 	bl	80026b0 <boundary_check>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001eec:	221f      	movs	r2, #31
 8001eee:	18bb      	adds	r3, r7, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <bme68x_set_conf+0x11e>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	18bc      	adds	r4, r7, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	2105      	movs	r1, #5
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 fbd5 	bl	80026b0 <boundary_check>
 8001f06:	0003      	movs	r3, r0
 8001f08:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	18bb      	adds	r3, r7, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <bme68x_set_conf+0x13e>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	18bc      	adds	r4, r7, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	2108      	movs	r1, #8
 8001f20:	0018      	movs	r0, r3
 8001f22:	f000 fbc5 	bl	80026b0 <boundary_check>
 8001f26:	0003      	movs	r3, r0
 8001f28:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d172      	bne.n	800201c <bme68x_set_conf+0x230>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8001f36:	200c      	movs	r0, #12
 8001f38:	183b      	adds	r3, r7, r0
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	221c      	movs	r2, #28
 8001f40:	4393      	bics	r3, r2
 8001f42:	b25a      	sxtb	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	78db      	ldrb	r3, [r3, #3]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	211c      	movs	r1, #28
 8001f4e:	400b      	ands	r3, r1
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	78db      	ldrb	r3, [r3, #3]
 8001f60:	b25b      	sxtb	r3, r3
 8001f62:	221f      	movs	r2, #31
 8001f64:	4013      	ands	r3, r2
 8001f66:	b25a      	sxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	015b      	lsls	r3, r3, #5
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b25b      	sxtb	r3, r3
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	183b      	adds	r3, r7, r0
 8001f78:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	221c      	movs	r2, #28
 8001f82:	4393      	bics	r3, r2
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	789b      	ldrb	r3, [r3, #2]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	211c      	movs	r1, #28
 8001f90:	400b      	ands	r3, r1
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8001f9e:	183b      	adds	r3, r7, r0
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	b25b      	sxtb	r3, r3
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4393      	bics	r3, r2
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	2107      	movs	r1, #7
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b25b      	sxtb	r3, r3
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d008      	beq.n	8001fda <bme68x_set_conf+0x1ee>
            {
                odr20 = conf->odr;
 8001fc8:	231e      	movs	r3, #30
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	7912      	ldrb	r2, [r2, #4]
 8001fd0:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 8001fd2:	231d      	movs	r3, #29
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001fda:	210c      	movs	r1, #12
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	791b      	ldrb	r3, [r3, #4]
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	221f      	movs	r2, #31
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b25a      	sxtb	r2, r3
 8001fe8:	231e      	movs	r3, #30
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b25b      	sxtb	r3, r3
 8002002:	227f      	movs	r2, #127	; 0x7f
 8002004:	4013      	ands	r3, r2
 8002006:	b25a      	sxtb	r2, r3
 8002008:	231d      	movs	r3, #29
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	01db      	lsls	r3, r3, #7
 8002010:	b25b      	sxtb	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b25b      	sxtb	r3, r3
 8002016:	b2da      	uxtb	r2, r3
 8002018:	187b      	adds	r3, r7, r1
 800201a:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 800201c:	221f      	movs	r2, #31
 800201e:	18bb      	adds	r3, r7, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <bme68x_set_conf+0x252>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8002028:	18bc      	adds	r4, r7, r2
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	220c      	movs	r2, #12
 800202e:	18b9      	adds	r1, r7, r2
 8002030:	2214      	movs	r2, #20
 8002032:	18b8      	adds	r0, r7, r2
 8002034:	2205      	movs	r2, #5
 8002036:	f7ff fd77 	bl	8001b28 <bme68x_set_regs>
 800203a:	0003      	movs	r3, r0
 800203c:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800203e:	221c      	movs	r2, #28
 8002040:	18bb      	adds	r3, r7, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00f      	beq.n	8002068 <bme68x_set_conf+0x27c>
 8002048:	211f      	movs	r1, #31
 800204a:	187b      	adds	r3, r7, r1
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b25b      	sxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <bme68x_set_conf+0x27c>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8002054:	18bb      	adds	r3, r7, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	187c      	adds	r4, r7, r1
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	0011      	movs	r1, r2
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f80c 	bl	800207c <bme68x_set_op_mode>
 8002064:	0003      	movs	r3, r0
 8002066:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002068:	231f      	movs	r3, #31
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b25b      	sxtb	r3, r3
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b008      	add	sp, #32
 8002076:	bdb0      	pop	{r4, r5, r7, pc}
 8002078:	080061f4 	.word	0x080061f4

0800207c <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	0002      	movs	r2, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 800208a:	230e      	movs	r3, #14
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8002092:	230c      	movs	r3, #12
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	2274      	movs	r2, #116	; 0x74
 8002098:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 800209a:	260f      	movs	r6, #15
 800209c:	19bc      	adds	r4, r7, r6
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	250d      	movs	r5, #13
 80020a2:	1979      	adds	r1, r7, r5
 80020a4:	2201      	movs	r2, #1
 80020a6:	2074      	movs	r0, #116	; 0x74
 80020a8:	f7ff fded 	bl	8001c86 <bme68x_get_regs>
 80020ac:	0003      	movs	r3, r0
 80020ae:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 80020b0:	0034      	movs	r4, r6
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d123      	bne.n	8002104 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80020bc:	0028      	movs	r0, r5
 80020be:	183b      	adds	r3, r7, r0
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	250e      	movs	r5, #14
 80020c4:	197b      	adds	r3, r7, r5
 80020c6:	2103      	movs	r1, #3
 80020c8:	400a      	ands	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 80020cc:	197b      	adds	r3, r7, r5
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2203      	movs	r2, #3
 80020da:	4393      	bics	r3, r2
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80020e2:	193c      	adds	r4, r7, r4
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	1839      	adds	r1, r7, r0
 80020e8:	220c      	movs	r2, #12
 80020ea:	18b8      	adds	r0, r7, r2
 80020ec:	2201      	movs	r2, #1
 80020ee:	f7ff fd1b 	bl	8001b28 <bme68x_set_regs>
 80020f2:	0003      	movs	r3, r0
 80020f4:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	481e      	ldr	r0, [pc, #120]	; (8002178 <bme68x_set_op_mode+0xfc>)
 8002100:	0019      	movs	r1, r3
 8002102:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8002104:	230e      	movs	r3, #14
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <bme68x_set_op_mode+0x9e>
 800210e:	230f      	movs	r3, #15
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0bf      	beq.n	800209a <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d021      	beq.n	8002166 <bme68x_set_op_mode+0xea>
 8002122:	240f      	movs	r4, #15
 8002124:	193b      	adds	r3, r7, r4
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11b      	bne.n	8002166 <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 800212e:	200d      	movs	r0, #13
 8002130:	183b      	adds	r3, r7, r0
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b25b      	sxtb	r3, r3
 8002136:	2203      	movs	r2, #3
 8002138:	4393      	bics	r3, r2
 800213a:	b25a      	sxtb	r2, r3
 800213c:	1dfb      	adds	r3, r7, #7
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b25b      	sxtb	r3, r3
 8002142:	2103      	movs	r1, #3
 8002144:	400b      	ands	r3, r1
 8002146:	b25b      	sxtb	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	183b      	adds	r3, r7, r0
 8002150:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002152:	193c      	adds	r4, r7, r4
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1839      	adds	r1, r7, r0
 8002158:	220c      	movs	r2, #12
 800215a:	18b8      	adds	r0, r7, r2
 800215c:	2201      	movs	r2, #1
 800215e:	f7ff fce3 	bl	8001b28 <bme68x_set_regs>
 8002162:	0003      	movs	r3, r0
 8002164:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002166:	230f      	movs	r3, #15
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b25b      	sxtb	r3, r3
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b005      	add	sp, #20
 8002174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	00002710 	.word	0x00002710

0800217c <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800217c:	b5b0      	push	{r4, r5, r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800218c:	230f      	movs	r3, #15
 800218e:	18fc      	adds	r4, r7, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	250e      	movs	r5, #14
 8002194:	1979      	adds	r1, r7, r5
 8002196:	2201      	movs	r2, #1
 8002198:	2074      	movs	r0, #116	; 0x74
 800219a:	f7ff fd74 	bl	8001c86 <bme68x_get_regs>
 800219e:	0003      	movs	r3, r0
 80021a0:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 80021a2:	197b      	adds	r3, r7, r5
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2203      	movs	r2, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e003      	b.n	80021ba <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80021b2:	230f      	movs	r3, #15
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80021ba:	230f      	movs	r3, #15
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b25b      	sxtb	r3, r3
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021cc <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80021cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	260f      	movs	r6, #15
 80021d8:	19bb      	adds	r3, r7, r6
 80021da:	1c02      	adds	r2, r0, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80021de:	231c      	movs	r3, #28
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 80021e6:	221d      	movs	r2, #29
 80021e8:	18bb      	adds	r3, r7, r2
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80021ee:	2214      	movs	r2, #20
 80021f0:	18bb      	adds	r3, r7, r2
 80021f2:	4a52      	ldr	r2, [pc, #328]	; (800233c <bme68x_set_heatr_conf+0x170>)
 80021f4:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d100      	bne.n	80021fe <bme68x_set_heatr_conf+0x32>
 80021fc:	e091      	b.n	8002322 <bme68x_set_heatr_conf+0x156>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80021fe:	251f      	movs	r5, #31
 8002200:	197c      	adds	r4, r7, r5
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0019      	movs	r1, r3
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff ff38 	bl	800207c <bme68x_set_op_mode>
 800220c:	0003      	movs	r3, r0
 800220e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8002210:	197b      	adds	r3, r7, r5
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25b      	sxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10b      	bne.n	8002232 <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800221a:	197c      	adds	r4, r7, r5
 800221c:	687d      	ldr	r5, [r7, #4]
 800221e:	231c      	movs	r3, #28
 8002220:	18fa      	adds	r2, r7, r3
 8002222:	19bb      	adds	r3, r7, r6
 8002224:	7819      	ldrb	r1, [r3, #0]
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	002b      	movs	r3, r5
 800222a:	f000 fa9d 	bl	8002768 <set_conf>
 800222e:	0003      	movs	r3, r0
 8002230:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8002232:	251f      	movs	r5, #31
 8002234:	197b      	adds	r3, r7, r5
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d175      	bne.n	800232a <bme68x_set_heatr_conf+0x15e>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 800223e:	197c      	adds	r4, r7, r5
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2218      	movs	r2, #24
 8002244:	18b9      	adds	r1, r7, r2
 8002246:	2202      	movs	r2, #2
 8002248:	2070      	movs	r0, #112	; 0x70
 800224a:	f7ff fd1c 	bl	8001c86 <bme68x_get_regs>
 800224e:	0003      	movs	r3, r0
 8002250:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8002252:	197b      	adds	r3, r7, r5
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b25b      	sxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d166      	bne.n	800232a <bme68x_set_heatr_conf+0x15e>
            {
                if (conf->enable == BME68X_ENABLE)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d111      	bne.n	8002288 <bme68x_set_heatr_conf+0xbc>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8002264:	231e      	movs	r3, #30
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d104      	bne.n	800227e <bme68x_set_heatr_conf+0xb2>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8002274:	231d      	movs	r3, #29
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2202      	movs	r2, #2
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e00c      	b.n	8002298 <bme68x_set_heatr_conf+0xcc>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800227e:	231d      	movs	r3, #29
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e007      	b.n	8002298 <bme68x_set_heatr_conf+0xcc>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8002288:	231e      	movs	r3, #30
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8002290:	231d      	movs	r3, #29
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8002298:	2018      	movs	r0, #24
 800229a:	183b      	adds	r3, r7, r0
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	2208      	movs	r2, #8
 80022a2:	4393      	bics	r3, r2
 80022a4:	b25a      	sxtb	r2, r3
 80022a6:	231e      	movs	r3, #30
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	2108      	movs	r1, #8
 80022b2:	400b      	ands	r3, r1
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b25b      	sxtb	r3, r3
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	183b      	adds	r3, r7, r0
 80022be:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80022c0:	183b      	adds	r3, r7, r0
 80022c2:	785b      	ldrb	r3, [r3, #1]
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	220f      	movs	r2, #15
 80022c8:	4393      	bics	r3, r2
 80022ca:	b25a      	sxtb	r2, r3
 80022cc:	231c      	movs	r3, #28
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	210f      	movs	r1, #15
 80022d6:	400b      	ands	r3, r1
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	4313      	orrs	r3, r2
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	183b      	adds	r3, r7, r0
 80022e2:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 80022e4:	183b      	adds	r3, r7, r0
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	2230      	movs	r2, #48	; 0x30
 80022ec:	4393      	bics	r3, r2
 80022ee:	b25a      	sxtb	r2, r3
 80022f0:	231d      	movs	r3, #29
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	2130      	movs	r1, #48	; 0x30
 80022fc:	400b      	ands	r3, r1
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	b25b      	sxtb	r3, r3
 8002304:	b2da      	uxtb	r2, r3
 8002306:	183b      	adds	r3, r7, r0
 8002308:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800230a:	231f      	movs	r3, #31
 800230c:	18fc      	adds	r4, r7, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1839      	adds	r1, r7, r0
 8002312:	2214      	movs	r2, #20
 8002314:	18b8      	adds	r0, r7, r2
 8002316:	2202      	movs	r2, #2
 8002318:	f7ff fc06 	bl	8001b28 <bme68x_set_regs>
 800231c:	0003      	movs	r3, r0
 800231e:	7023      	strb	r3, [r4, #0]
 8002320:	e003      	b.n	800232a <bme68x_set_heatr_conf+0x15e>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002322:	231f      	movs	r3, #31
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25b      	sxtb	r3, r3
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b009      	add	sp, #36	; 0x24
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	00007170 	.word	0x00007170

08002340 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	0002      	movs	r2, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	1dbb      	adds	r3, r7, #6
 800234c:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	881a      	ldrh	r2, [r3, #0]
 8002352:	23c8      	movs	r3, #200	; 0xc8
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	429a      	cmp	r2, r3
 8002358:	d903      	bls.n	8002362 <calc_res_heat+0x22>
    {
        temp = 400;
 800235a:	1dbb      	adds	r3, r7, #6
 800235c:	22c8      	movs	r2, #200	; 0xc8
 800235e:	0052      	lsls	r2, r2, #1
 8002360:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	7e5b      	ldrb	r3, [r3, #25]
 8002366:	b25b      	sxtb	r3, r3
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe ff27 	bl	80011bc <__aeabi_i2f>
 800236e:	1c03      	adds	r3, r0, #0
 8002370:	2183      	movs	r1, #131	; 0x83
 8002372:	05c9      	lsls	r1, r1, #23
 8002374:	1c18      	adds	r0, r3, #0
 8002376:	f7fe fa65 	bl	8000844 <__aeabi_fdiv>
 800237a:	1c03      	adds	r3, r0, #0
 800237c:	4950      	ldr	r1, [pc, #320]	; (80024c0 <calc_res_heat+0x180>)
 800237e:	1c18      	adds	r0, r3, #0
 8002380:	f7fe f8c2 	bl	8000508 <__aeabi_fadd>
 8002384:	1c03      	adds	r3, r0, #0
 8002386:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	221a      	movs	r2, #26
 800238c:	5e9b      	ldrsh	r3, [r3, r2]
 800238e:	0018      	movs	r0, r3
 8002390:	f7fe ff14 	bl	80011bc <__aeabi_i2f>
 8002394:	1c03      	adds	r3, r0, #0
 8002396:	218e      	movs	r1, #142	; 0x8e
 8002398:	05c9      	lsls	r1, r1, #23
 800239a:	1c18      	adds	r0, r3, #0
 800239c:	f7fe fa52 	bl	8000844 <__aeabi_fdiv>
 80023a0:	1c03      	adds	r3, r0, #0
 80023a2:	4948      	ldr	r1, [pc, #288]	; (80024c4 <calc_res_heat+0x184>)
 80023a4:	1c18      	adds	r0, r3, #0
 80023a6:	f7fe fc15 	bl	8000bd4 <__aeabi_fmul>
 80023aa:	1c03      	adds	r3, r0, #0
 80023ac:	4946      	ldr	r1, [pc, #280]	; (80024c8 <calc_res_heat+0x188>)
 80023ae:	1c18      	adds	r0, r3, #0
 80023b0:	f7fe f8aa 	bl	8000508 <__aeabi_fadd>
 80023b4:	1c03      	adds	r3, r0, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	7f1b      	ldrb	r3, [r3, #28]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	0018      	movs	r0, r3
 80023c0:	f7fe fefc 	bl	80011bc <__aeabi_i2f>
 80023c4:	1c03      	adds	r3, r0, #0
 80023c6:	2189      	movs	r1, #137	; 0x89
 80023c8:	05c9      	lsls	r1, r1, #23
 80023ca:	1c18      	adds	r0, r3, #0
 80023cc:	f7fe fa3a 	bl	8000844 <__aeabi_fdiv>
 80023d0:	1c03      	adds	r3, r0, #0
 80023d2:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 80023d4:	1dbb      	adds	r3, r7, #6
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7fe ff3d 	bl	8001258 <__aeabi_ui2f>
 80023de:	1c03      	adds	r3, r0, #0
 80023e0:	69b9      	ldr	r1, [r7, #24]
 80023e2:	1c18      	adds	r0, r3, #0
 80023e4:	f7fe fbf6 	bl	8000bd4 <__aeabi_fmul>
 80023e8:	1c03      	adds	r3, r0, #0
 80023ea:	21fe      	movs	r1, #254	; 0xfe
 80023ec:	0589      	lsls	r1, r1, #22
 80023ee:	1c18      	adds	r0, r3, #0
 80023f0:	f7fe f88a 	bl	8000508 <__aeabi_fadd>
 80023f4:	1c03      	adds	r3, r0, #0
 80023f6:	1c19      	adds	r1, r3, #0
 80023f8:	69f8      	ldr	r0, [r7, #28]
 80023fa:	f7fe fbeb 	bl	8000bd4 <__aeabi_fmul>
 80023fe:	1c03      	adds	r3, r0, #0
 8002400:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	7b9b      	ldrb	r3, [r3, #14]
 8002406:	b25b      	sxtb	r3, r3
 8002408:	0018      	movs	r0, r3
 800240a:	f7fe fed7 	bl	80011bc <__aeabi_i2f>
 800240e:	1c03      	adds	r3, r0, #0
 8002410:	6979      	ldr	r1, [r7, #20]
 8002412:	1c18      	adds	r0, r3, #0
 8002414:	f7fe fbde 	bl	8000bd4 <__aeabi_fmul>
 8002418:	1c03      	adds	r3, r0, #0
 800241a:	1c19      	adds	r1, r3, #0
 800241c:	6938      	ldr	r0, [r7, #16]
 800241e:	f7fe f873 	bl	8000508 <__aeabi_fadd>
 8002422:	1c03      	adds	r3, r0, #0
 8002424:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	223c      	movs	r2, #60	; 0x3c
 800242a:	5c9b      	ldrb	r3, [r3, r2]
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe ff13 	bl	8001258 <__aeabi_ui2f>
 8002432:	1c03      	adds	r3, r0, #0
 8002434:	2181      	movs	r1, #129	; 0x81
 8002436:	05c9      	lsls	r1, r1, #23
 8002438:	1c18      	adds	r0, r3, #0
 800243a:	f7fe f865 	bl	8000508 <__aeabi_fadd>
 800243e:	1c03      	adds	r3, r0, #0
 8002440:	1c19      	adds	r1, r3, #0
 8002442:	2081      	movs	r0, #129	; 0x81
 8002444:	05c0      	lsls	r0, r0, #23
 8002446:	f7fe f9fd 	bl	8000844 <__aeabi_fdiv>
 800244a:	1c03      	adds	r3, r0, #0
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	1c18      	adds	r0, r3, #0
 8002450:	f7fe fbc0 	bl	8000bd4 <__aeabi_fmul>
 8002454:	1c03      	adds	r3, r0, #0
 8002456:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	223d      	movs	r2, #61	; 0x3d
 800245c:	569b      	ldrsb	r3, [r3, r2]
 800245e:	0018      	movs	r0, r3
 8002460:	f7fe feac 	bl	80011bc <__aeabi_i2f>
 8002464:	1c03      	adds	r3, r0, #0
 8002466:	4919      	ldr	r1, [pc, #100]	; (80024cc <calc_res_heat+0x18c>)
 8002468:	1c18      	adds	r0, r3, #0
 800246a:	f7fe fbb3 	bl	8000bd4 <__aeabi_fmul>
 800246e:	1c03      	adds	r3, r0, #0
 8002470:	21fe      	movs	r1, #254	; 0xfe
 8002472:	0589      	lsls	r1, r1, #22
 8002474:	1c18      	adds	r0, r3, #0
 8002476:	f7fe f847 	bl	8000508 <__aeabi_fadd>
 800247a:	1c03      	adds	r3, r0, #0
 800247c:	1c19      	adds	r1, r3, #0
 800247e:	20fe      	movs	r0, #254	; 0xfe
 8002480:	0580      	lsls	r0, r0, #22
 8002482:	f7fe f9df 	bl	8000844 <__aeabi_fdiv>
 8002486:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002488:	1c19      	adds	r1, r3, #0
 800248a:	1c20      	adds	r0, r4, #0
 800248c:	f7fe fba2 	bl	8000bd4 <__aeabi_fmul>
 8002490:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002492:	490f      	ldr	r1, [pc, #60]	; (80024d0 <calc_res_heat+0x190>)
 8002494:	1c18      	adds	r0, r3, #0
 8002496:	f7fe fcc3 	bl	8000e20 <__aeabi_fsub>
 800249a:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 800249c:	490d      	ldr	r1, [pc, #52]	; (80024d4 <calc_res_heat+0x194>)
 800249e:	1c18      	adds	r0, r3, #0
 80024a0:	f7fe fb98 	bl	8000bd4 <__aeabi_fmul>
 80024a4:	1c03      	adds	r3, r0, #0
    res_heat =
 80024a6:	250b      	movs	r5, #11
 80024a8:	197c      	adds	r4, r7, r5
 80024aa:	1c18      	adds	r0, r3, #0
 80024ac:	f7fd ff48 	bl	8000340 <__aeabi_f2uiz>
 80024b0:	0003      	movs	r3, r0
 80024b2:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 80024b4:	197b      	adds	r3, r7, r5
 80024b6:	781b      	ldrb	r3, [r3, #0]
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b008      	add	sp, #32
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	42440000 	.word	0x42440000
 80024c4:	3a03126f 	.word	0x3a03126f
 80024c8:	3b1a0275 	.word	0x3b1a0275
 80024cc:	3b03126f 	.word	0x3b03126f
 80024d0:	41c80000 	.word	0x41c80000
 80024d4:	4059999a 	.word	0x4059999a

080024d8 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	0002      	movs	r2, r0
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	23fc      	movs	r3, #252	; 0xfc
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d30f      	bcc.n	8002518 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 80024f8:	230e      	movs	r3, #14
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e01a      	b.n	8002538 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002502:	1dbb      	adds	r3, r7, #6
 8002504:	1dba      	adds	r2, r7, #6
 8002506:	8812      	ldrh	r2, [r2, #0]
 8002508:	0892      	lsrs	r2, r2, #2
 800250a:	801a      	strh	r2, [r3, #0]
            factor += 1;
 800250c:	220f      	movs	r2, #15
 800250e:	18bb      	adds	r3, r7, r2
 8002510:	18ba      	adds	r2, r7, r2
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	3201      	adds	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	2b3f      	cmp	r3, #63	; 0x3f
 800251e:	d8f0      	bhi.n	8002502 <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8002520:	1dbb      	adds	r3, r7, #6
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b2d9      	uxtb	r1, r3
 8002526:	230f      	movs	r3, #15
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	b2da      	uxtb	r2, r3
 8002530:	230e      	movs	r3, #14
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	188a      	adds	r2, r1, r2
 8002536:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8002538:	230e      	movs	r3, #14
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	781b      	ldrb	r3, [r3, #0]
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}

08002546 <set_mem_page>:
    return rslt;
}

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8002546:	b5b0      	push	{r4, r5, r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	0002      	movs	r2, r0
 800254e:	6039      	str	r1, [r7, #0]
 8002550:	1dfb      	adds	r3, r7, #7
 8002552:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8002554:	250f      	movs	r5, #15
 8002556:	197c      	adds	r4, r7, r5
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f8e1 	bl	8002722 <null_ptr_check>
 8002560:	0003      	movs	r3, r0
 8002562:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8002564:	197b      	adds	r3, r7, r5
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d160      	bne.n	8002630 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b25b      	sxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	da04      	bge.n	8002582 <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8002578:	230e      	movs	r3, #14
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e003      	b.n	800258a <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 8002582:	230e      	movs	r3, #14
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2210      	movs	r2, #16
 8002588:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	7b5b      	ldrb	r3, [r3, #13]
 800258e:	210e      	movs	r1, #14
 8002590:	187a      	adds	r2, r7, r1
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d04b      	beq.n	8002630 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	187a      	adds	r2, r7, r1
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	220d      	movs	r2, #13
 80025aa:	18b9      	adds	r1, r7, r2
 80025ac:	2201      	movs	r2, #1
 80025ae:	20f3      	movs	r0, #243	; 0xf3
 80025b0:	47a0      	blx	r4
 80025b2:	0003      	movs	r3, r0
 80025b4:	0019      	movs	r1, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	224c      	movs	r2, #76	; 0x4c
 80025ba:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	224c      	movs	r2, #76	; 0x4c
 80025c0:	569b      	ldrsb	r3, [r3, r2]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	22fe      	movs	r2, #254	; 0xfe
 80025cc:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 80025ce:	250f      	movs	r5, #15
 80025d0:	197b      	adds	r3, r7, r5
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12a      	bne.n	8002630 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80025da:	210d      	movs	r1, #13
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	4393      	bics	r3, r2
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7b5b      	ldrb	r3, [r3, #13]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	2210      	movs	r2, #16
 80025f2:	4013      	ands	r3, r2
 80025f4:	b25a      	sxtb	r2, r3
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	b2da      	uxtb	r2, r3
 8002602:	187b      	adds	r3, r7, r1
 8002604:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	1879      	adds	r1, r7, r1
 8002610:	2201      	movs	r2, #1
 8002612:	2073      	movs	r0, #115	; 0x73
 8002614:	47a0      	blx	r4
 8002616:	0003      	movs	r3, r0
 8002618:	0019      	movs	r1, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	224c      	movs	r2, #76	; 0x4c
 800261e:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	224c      	movs	r2, #76	; 0x4c
 8002624:	569b      	ldrsb	r3, [r3, r2]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 800262a:	197b      	adds	r3, r7, r5
 800262c:	22fe      	movs	r2, #254	; 0xfe
 800262e:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8002630:	230f      	movs	r3, #15
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b25b      	sxtb	r3, r3
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bdb0      	pop	{r4, r5, r7, pc}

08002640 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8002640:	b5b0      	push	{r4, r5, r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002648:	250f      	movs	r5, #15
 800264a:	197c      	adds	r4, r7, r5
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f867 	bl	8002722 <null_ptr_check>
 8002654:	0003      	movs	r3, r0
 8002656:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8002658:	197b      	adds	r3, r7, r5
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b25b      	sxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11e      	bne.n	80026a0 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	220e      	movs	r2, #14
 800266c:	18b9      	adds	r1, r7, r2
 800266e:	2201      	movs	r2, #1
 8002670:	20f3      	movs	r0, #243	; 0xf3
 8002672:	47a0      	blx	r4
 8002674:	0003      	movs	r3, r0
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	224c      	movs	r2, #76	; 0x4c
 800267c:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	224c      	movs	r2, #76	; 0x4c
 8002682:	569b      	ldrsb	r3, [r3, r2]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 8002688:	197b      	adds	r3, r7, r5
 800268a:	22fe      	movs	r2, #254	; 0xfe
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e007      	b.n	80026a0 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8002690:	230e      	movs	r3, #14
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2210      	movs	r2, #16
 8002698:	4013      	ands	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80026a0:	230f      	movs	r3, #15
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b25b      	sxtb	r3, r3
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bdb0      	pop	{r4, r5, r7, pc}

080026b0 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	250b      	movs	r5, #11
 80026bc:	197b      	adds	r3, r7, r5
 80026be:	1c0a      	adds	r2, r1, #0
 80026c0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80026c2:	2617      	movs	r6, #23
 80026c4:	19bc      	adds	r4, r7, r6
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f82a 	bl	8002722 <null_ptr_check>
 80026ce:	0003      	movs	r3, r0
 80026d0:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d018      	beq.n	800270a <boundary_check+0x5a>
 80026d8:	19bb      	adds	r3, r7, r6
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d113      	bne.n	800270a <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	197a      	adds	r2, r7, r5
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d211      	bcs.n	8002712 <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	197a      	adds	r2, r7, r5
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	224d      	movs	r2, #77	; 0x4d
 80026fa:	5c9b      	ldrb	r3, [r3, r2]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4313      	orrs	r3, r2
 8002700:	b2d9      	uxtb	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	224d      	movs	r2, #77	; 0x4d
 8002706:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8002708:	e003      	b.n	8002712 <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 800270a:	2317      	movs	r3, #23
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002712:	2317      	movs	r3, #23
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b25b      	sxtb	r3, r3
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b007      	add	sp, #28
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002722 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 800272a:	230f      	movs	r3, #15
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <null_ptr_check+0x2e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <null_ptr_check+0x2e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8002750:	230f      	movs	r3, #15
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002758:	230f      	movs	r3, #15
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b25b      	sxtb	r3, r3
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}

08002768 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	b092      	sub	sp, #72	; 0x48
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	200b      	movs	r0, #11
 8002776:	183b      	adds	r3, r7, r0
 8002778:	1c0a      	adds	r2, r1, #0
 800277a:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 800277c:	2347      	movs	r3, #71	; 0x47
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002784:	2345      	movs	r3, #69	; 0x45
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 800278c:	2343      	movs	r3, #67	; 0x43
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	226e      	movs	r2, #110	; 0x6e
 8002792:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002794:	2338      	movs	r3, #56	; 0x38
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	4ab0      	ldr	r2, [pc, #704]	; (8002a5c <set_conf+0x2f4>)
 800279a:	ca12      	ldmia	r2!, {r1, r4}
 800279c:	c312      	stmia	r3!, {r1, r4}
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80027a2:	232c      	movs	r3, #44	; 0x2c
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	4aad      	ldr	r2, [pc, #692]	; (8002a5c <set_conf+0x2f4>)
 80027a8:	ca12      	ldmia	r2!, {r1, r4}
 80027aa:	c312      	stmia	r3!, {r1, r4}
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80027b0:	2320      	movs	r3, #32
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	4aa9      	ldr	r2, [pc, #676]	; (8002a5c <set_conf+0x2f4>)
 80027b6:	ca12      	ldmia	r2!, {r1, r4}
 80027b8:	c312      	stmia	r3!, {r1, r4}
 80027ba:	8812      	ldrh	r2, [r2, #0]
 80027bc:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80027be:	2314      	movs	r3, #20
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	4aa6      	ldr	r2, [pc, #664]	; (8002a5c <set_conf+0x2f4>)
 80027c4:	ca12      	ldmia	r2!, {r1, r4}
 80027c6:	c312      	stmia	r3!, {r1, r4}
 80027c8:	8812      	ldrh	r2, [r2, #0]
 80027ca:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 80027cc:	183b      	adds	r3, r7, r0
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d02d      	beq.n	8002830 <set_conf+0xc8>
 80027d4:	dd00      	ble.n	80027d8 <set_conf+0x70>
 80027d6:	e10c      	b.n	80029f2 <set_conf+0x28a>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d003      	beq.n	80027e4 <set_conf+0x7c>
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d100      	bne.n	80027e2 <set_conf+0x7a>
 80027e0:	e088      	b.n	80028f4 <set_conf+0x18c>
 80027e2:	e106      	b.n	80029f2 <set_conf+0x28a>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80027e4:	2338      	movs	r3, #56	; 0x38
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	225a      	movs	r2, #90	; 0x5a
 80027ea:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	885b      	ldrh	r3, [r3, #2]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff fda3 	bl	8002340 <calc_res_heat>
 80027fa:	0003      	movs	r3, r0
 80027fc:	001a      	movs	r2, r3
 80027fe:	232c      	movs	r3, #44	; 0x2c
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002804:	2320      	movs	r3, #32
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2264      	movs	r2, #100	; 0x64
 800280a:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	889b      	ldrh	r3, [r3, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff fe61 	bl	80024d8 <calc_gas_wait>
 8002816:	0003      	movs	r3, r0
 8002818:	001a      	movs	r2, r3
 800281a:	2314      	movs	r3, #20
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002826:	2345      	movs	r3, #69	; 0x45
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
            break;
 800282e:	e0e6      	b.n	80029fe <set_conf+0x296>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <set_conf+0xd8>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d104      	bne.n	800284a <set_conf+0xe2>
            {
                rslt = BME68X_E_NULL_PTR;
 8002840:	2347      	movs	r3, #71	; 0x47
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	701a      	strb	r2, [r3, #0]
                break;
 8002848:	e0d9      	b.n	80029fe <set_conf+0x296>
            }

            for (i = 0; i < conf->profile_len; i++)
 800284a:	2346      	movs	r3, #70	; 0x46
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	e03e      	b.n	80028d2 <set_conf+0x16a>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002854:	2046      	movs	r0, #70	; 0x46
 8002856:	183b      	adds	r3, r7, r0
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	183a      	adds	r2, r7, r0
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	325a      	adds	r2, #90	; 0x5a
 8002860:	b2d1      	uxtb	r1, r2
 8002862:	2238      	movs	r2, #56	; 0x38
 8002864:	18ba      	adds	r2, r7, r2
 8002866:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	183b      	adds	r3, r7, r0
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	18d3      	adds	r3, r2, r3
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	0005      	movs	r5, r0
 8002878:	183b      	adds	r3, r7, r0
 800287a:	781c      	ldrb	r4, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	0019      	movs	r1, r3
 8002880:	0010      	movs	r0, r2
 8002882:	f7ff fd5d 	bl	8002340 <calc_res_heat>
 8002886:	0003      	movs	r3, r0
 8002888:	001a      	movs	r2, r3
 800288a:	232c      	movs	r3, #44	; 0x2c
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002890:	0028      	movs	r0, r5
 8002892:	183b      	adds	r3, r7, r0
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	183a      	adds	r2, r7, r0
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	3264      	adds	r2, #100	; 0x64
 800289c:	b2d1      	uxtb	r1, r2
 800289e:	2220      	movs	r2, #32
 80028a0:	18ba      	adds	r2, r7, r2
 80028a2:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	0005      	movs	r5, r0
 80028b4:	183b      	adds	r3, r7, r0
 80028b6:	781c      	ldrb	r4, [r3, #0]
 80028b8:	0010      	movs	r0, r2
 80028ba:	f7ff fe0d 	bl	80024d8 <calc_gas_wait>
 80028be:	0003      	movs	r3, r0
 80028c0:	001a      	movs	r2, r3
 80028c2:	2314      	movs	r3, #20
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 80028c8:	197b      	adds	r3, r7, r5
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	197b      	adds	r3, r7, r5
 80028ce:	3201      	adds	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	7c1b      	ldrb	r3, [r3, #16]
 80028d6:	2246      	movs	r2, #70	; 0x46
 80028d8:	18ba      	adds	r2, r7, r2
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d3b9      	bcc.n	8002854 <set_conf+0xec>
            }

            (*nb_conv) = conf->profile_len;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	7c1a      	ldrb	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80028e8:	2345      	movs	r3, #69	; 0x45
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	7c12      	ldrb	r2, [r2, #16]
 80028f0:	701a      	strb	r2, [r3, #0]
            break;
 80028f2:	e084      	b.n	80029fe <set_conf+0x296>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <set_conf+0x19c>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d104      	bne.n	800290e <set_conf+0x1a6>
            {
                rslt = BME68X_E_NULL_PTR;
 8002904:	2347      	movs	r3, #71	; 0x47
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	22ff      	movs	r2, #255	; 0xff
 800290a:	701a      	strb	r2, [r3, #0]
                break;
 800290c:	e077      	b.n	80029fe <set_conf+0x296>
            }

            if (conf->shared_heatr_dur == 0)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8a5b      	ldrh	r3, [r3, #18]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <set_conf+0x1b6>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002916:	2347      	movs	r3, #71	; 0x47
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2203      	movs	r2, #3
 800291c:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 800291e:	2346      	movs	r3, #70	; 0x46
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e039      	b.n	800299c <set_conf+0x234>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002928:	2046      	movs	r0, #70	; 0x46
 800292a:	183b      	adds	r3, r7, r0
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	183a      	adds	r2, r7, r0
 8002930:	7812      	ldrb	r2, [r2, #0]
 8002932:	325a      	adds	r2, #90	; 0x5a
 8002934:	b2d1      	uxtb	r1, r2
 8002936:	2238      	movs	r2, #56	; 0x38
 8002938:	18ba      	adds	r2, r7, r2
 800293a:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	183b      	adds	r3, r7, r0
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	18d3      	adds	r3, r2, r3
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	0005      	movs	r5, r0
 800294c:	183b      	adds	r3, r7, r0
 800294e:	781c      	ldrb	r4, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	0019      	movs	r1, r3
 8002954:	0010      	movs	r0, r2
 8002956:	f7ff fcf3 	bl	8002340 <calc_res_heat>
 800295a:	0003      	movs	r3, r0
 800295c:	001a      	movs	r2, r3
 800295e:	232c      	movs	r3, #44	; 0x2c
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002964:	0028      	movs	r0, r5
 8002966:	183b      	adds	r3, r7, r0
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	183a      	adds	r2, r7, r0
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	3264      	adds	r2, #100	; 0x64
 8002970:	b2d1      	uxtb	r1, r2
 8002972:	2220      	movs	r2, #32
 8002974:	18ba      	adds	r2, r7, r2
 8002976:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	183b      	adds	r3, r7, r0
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	18d3      	adds	r3, r2, r3
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	183b      	adds	r3, r7, r0
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b2d1      	uxtb	r1, r2
 800298c:	2214      	movs	r2, #20
 800298e:	18ba      	adds	r2, r7, r2
 8002990:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 8002992:	183b      	adds	r3, r7, r0
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	183b      	adds	r3, r7, r0
 8002998:	3201      	adds	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	7c1b      	ldrb	r3, [r3, #16]
 80029a0:	2246      	movs	r2, #70	; 0x46
 80029a2:	18ba      	adds	r2, r7, r2
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d3be      	bcc.n	8002928 <set_conf+0x1c0>
            }

            (*nb_conv) = conf->profile_len;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	7c1a      	ldrb	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80029b2:	2345      	movs	r3, #69	; 0x45
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	7c12      	ldrb	r2, [r2, #16]
 80029ba:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8a5b      	ldrh	r3, [r3, #18]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 f84d 	bl	8002a60 <calc_heatr_dur_shared>
 80029c6:	0003      	movs	r3, r0
 80029c8:	001a      	movs	r2, r3
 80029ca:	2144      	movs	r1, #68	; 0x44
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 80029d0:	2247      	movs	r2, #71	; 0x47
 80029d2:	18bb      	adds	r3, r7, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <set_conf+0x294>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 80029dc:	18bc      	adds	r4, r7, r2
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	1879      	adds	r1, r7, r1
 80029e2:	2243      	movs	r2, #67	; 0x43
 80029e4:	18b8      	adds	r0, r7, r2
 80029e6:	2201      	movs	r2, #1
 80029e8:	f7ff f89e 	bl	8001b28 <bme68x_set_regs>
 80029ec:	0003      	movs	r3, r0
 80029ee:	7023      	strb	r3, [r4, #0]
            }

            break;
 80029f0:	e004      	b.n	80029fc <set_conf+0x294>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 80029f2:	2347      	movs	r3, #71	; 0x47
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e000      	b.n	80029fe <set_conf+0x296>
            break;
 80029fc:	46c0      	nop			; (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 80029fe:	2147      	movs	r1, #71	; 0x47
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b25b      	sxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <set_conf+0x2bc>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002a0a:	2345      	movs	r3, #69	; 0x45
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	187c      	adds	r4, r7, r1
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	1879      	adds	r1, r7, r1
 8002a18:	2038      	movs	r0, #56	; 0x38
 8002a1a:	1838      	adds	r0, r7, r0
 8002a1c:	f7ff f884 	bl	8001b28 <bme68x_set_regs>
 8002a20:	0003      	movs	r3, r0
 8002a22:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8002a24:	2147      	movs	r1, #71	; 0x47
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10c      	bne.n	8002a4a <set_conf+0x2e2>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002a30:	2345      	movs	r3, #69	; 0x45
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	187c      	adds	r4, r7, r1
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2114      	movs	r1, #20
 8002a3c:	1879      	adds	r1, r7, r1
 8002a3e:	2020      	movs	r0, #32
 8002a40:	1838      	adds	r0, r7, r0
 8002a42:	f7ff f871 	bl	8001b28 <bme68x_set_regs>
 8002a46:	0003      	movs	r3, r0
 8002a48:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8002a4a:	2347      	movs	r3, #71	; 0x47
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b25b      	sxtb	r3, r3
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b012      	add	sp, #72	; 0x48
 8002a58:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	08006284 	.word	0x08006284

08002a60 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	0002      	movs	r2, r0
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8002a6c:	230f      	movs	r3, #15
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002a74:	1dbb      	adds	r3, r7, #6
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <calc_heatr_dur_shared+0x94>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d904      	bls.n	8002a88 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 8002a7e:	230e      	movs	r3, #14
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e02e      	b.n	8002ae6 <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002a88:	1dbb      	adds	r3, r7, #6
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	015b      	lsls	r3, r3, #5
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	001a      	movs	r2, r3
 8002a9a:	23de      	movs	r3, #222	; 0xde
 8002a9c:	33ff      	adds	r3, #255	; 0xff
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f7fd fb39 	bl	8000118 <__udivsi3>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 8002aae:	e00a      	b.n	8002ac6 <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 8002ab0:	1dbb      	adds	r3, r7, #6
 8002ab2:	1dba      	adds	r2, r7, #6
 8002ab4:	8812      	ldrh	r2, [r2, #0]
 8002ab6:	0892      	lsrs	r2, r2, #2
 8002ab8:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8002aba:	220f      	movs	r2, #15
 8002abc:	18bb      	adds	r3, r7, r2
 8002abe:	18ba      	adds	r2, r7, r2
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	3201      	adds	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8002ac6:	1dbb      	adds	r3, r7, #6
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	2b3f      	cmp	r3, #63	; 0x3f
 8002acc:	d8f0      	bhi.n	8002ab0 <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002ace:	1dbb      	adds	r3, r7, #6
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b2d9      	uxtb	r1, r3
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	019b      	lsls	r3, r3, #6
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	230e      	movs	r3, #14
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	188a      	adds	r2, r1, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8002ae6:	230e      	movs	r3, #14
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b004      	add	sp, #16
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00000782 	.word	0x00000782

08002af8 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afa:	b08f      	sub	sp, #60	; 0x3c
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002b00:	2537      	movs	r5, #55	; 0x37
 8002b02:	197c      	adds	r4, r7, r5
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	260c      	movs	r6, #12
 8002b08:	19b9      	adds	r1, r7, r6
 8002b0a:	2217      	movs	r2, #23
 8002b0c:	208a      	movs	r0, #138	; 0x8a
 8002b0e:	f7ff f8ba 	bl	8001c86 <bme68x_get_regs>
 8002b12:	0003      	movs	r3, r0
 8002b14:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8002b16:	197b      	adds	r3, r7, r5
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002b20:	197c      	adds	r4, r7, r5
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	19bb      	adds	r3, r7, r6
 8002b26:	3317      	adds	r3, #23
 8002b28:	0019      	movs	r1, r3
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	220e      	movs	r2, #14
 8002b2e:	20e1      	movs	r0, #225	; 0xe1
 8002b30:	f7ff f8a9 	bl	8001c86 <bme68x_get_regs>
 8002b34:	0003      	movs	r3, r0
 8002b36:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8002b38:	2237      	movs	r2, #55	; 0x37
 8002b3a:	18bb      	adds	r3, r7, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10c      	bne.n	8002b5e <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002b44:	18bc      	adds	r4, r7, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	230c      	movs	r3, #12
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	3325      	adds	r3, #37	; 0x25
 8002b4e:	0019      	movs	r1, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	2205      	movs	r2, #5
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7ff f896 	bl	8001c86 <bme68x_get_regs>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002b5e:	2337      	movs	r3, #55	; 0x37
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b25b      	sxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d000      	beq.n	8002b6c <get_calib_data+0x74>
 8002b6a:	e0e9      	b.n	8002d40 <get_calib_data+0x248>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002b6c:	210c      	movs	r1, #12
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2220      	movs	r2, #32
 8002b72:	5c9b      	ldrb	r3, [r3, r2]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	7fdb      	ldrb	r3, [r3, #31]
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	b21a      	sxth	r2, r3
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b21b      	sxth	r3, r3
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002b9e:	0008      	movs	r0, r1
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	789b      	ldrb	r3, [r3, #2]
 8002ba4:	b259      	sxtb	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2222      	movs	r2, #34	; 0x22
 8002baa:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002bac:	0001      	movs	r1, r0
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	b21a      	sxth	r2, r3
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	791b      	ldrb	r3, [r3, #4]
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	79db      	ldrb	r3, [r3, #7]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	799b      	ldrb	r3, [r3, #6]
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002bdc:	0008      	movs	r0, r1
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	7a1b      	ldrb	r3, [r3, #8]
 8002be2:	b259      	sxtb	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2228      	movs	r2, #40	; 0x28
 8002be8:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002bea:	0001      	movs	r1, r0
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	7adb      	ldrb	r3, [r3, #11]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	7a9b      	ldrb	r3, [r3, #10]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	7b5b      	ldrb	r3, [r3, #13]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	7b1b      	ldrb	r3, [r3, #12]
 8002c0e:	b21b      	sxth	r3, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8002c18:	0008      	movs	r0, r1
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	7bdb      	ldrb	r3, [r3, #15]
 8002c1e:	b259      	sxtb	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	222e      	movs	r2, #46	; 0x2e
 8002c24:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8002c26:	183b      	adds	r3, r7, r0
 8002c28:	7b9b      	ldrb	r3, [r3, #14]
 8002c2a:	b259      	sxtb	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	222f      	movs	r2, #47	; 0x2f
 8002c30:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	7cdb      	ldrb	r3, [r3, #19]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	7c9b      	ldrb	r3, [r3, #18]
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	4313      	orrs	r3, r2
 8002c42:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8002c48:	183b      	adds	r3, r7, r0
 8002c4a:	7d5b      	ldrb	r3, [r3, #21]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	7d1b      	ldrb	r3, [r3, #20]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8002c5e:	183b      	adds	r3, r7, r0
 8002c60:	7d99      	ldrb	r1, [r3, #22]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2234      	movs	r2, #52	; 0x34
 8002c66:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	7e5b      	ldrb	r3, [r3, #25]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8002c70:	183b      	adds	r3, r7, r0
 8002c72:	7e1b      	ldrb	r3, [r3, #24]
 8002c74:	b21b      	sxth	r3, r3
 8002c76:	210f      	movs	r1, #15
 8002c78:	400b      	ands	r3, r1
 8002c7a:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8002c86:	183b      	adds	r3, r7, r0
 8002c88:	7ddb      	ldrb	r3, [r3, #23]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	b21a      	sxth	r2, r3
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	7e1b      	ldrb	r3, [r3, #24]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8002ca2:	183b      	adds	r3, r7, r0
 8002ca4:	7e9b      	ldrb	r3, [r3, #26]
 8002ca6:	b25a      	sxtb	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8002cac:	183b      	adds	r3, r7, r0
 8002cae:	7edb      	ldrb	r3, [r3, #27]
 8002cb0:	b25a      	sxtb	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8002cb6:	183b      	adds	r3, r7, r0
 8002cb8:	7f1b      	ldrb	r3, [r3, #28]
 8002cba:	b25a      	sxtb	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8002cc0:	183b      	adds	r3, r7, r0
 8002cc2:	7f5a      	ldrb	r2, [r3, #29]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8002cc8:	183b      	adds	r3, r7, r0
 8002cca:	7f9b      	ldrb	r3, [r3, #30]
 8002ccc:	b25a      	sxtb	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	2223      	movs	r2, #35	; 0x23
 8002cd6:	5c9b      	ldrb	r3, [r3, r2]
 8002cd8:	b25a      	sxtb	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8002cde:	183b      	adds	r3, r7, r0
 8002ce0:	2222      	movs	r2, #34	; 0x22
 8002ce2:	5c9b      	ldrb	r3, [r3, r2]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	2121      	movs	r1, #33	; 0x21
 8002cec:	5c5b      	ldrb	r3, [r3, r1]
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	b25a      	sxtb	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	2227      	movs	r2, #39	; 0x27
 8002d08:	5c9b      	ldrb	r3, [r3, r2]
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	2330      	movs	r3, #48	; 0x30
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d500      	bpl.n	8002d14 <get_calib_data+0x21c>
 8002d12:	330f      	adds	r3, #15
 8002d14:	111b      	asrs	r3, r3, #4
 8002d16:	b2d9      	uxtb	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223c      	movs	r2, #60	; 0x3c
 8002d1c:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8002d1e:	200c      	movs	r0, #12
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	2225      	movs	r2, #37	; 0x25
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	b259      	sxtb	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	223d      	movs	r2, #61	; 0x3d
 8002d2c:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	2229      	movs	r2, #41	; 0x29
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	111b      	asrs	r3, r3, #4
 8002d38:	b259      	sxtb	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	223e      	movs	r2, #62	; 0x3e
 8002d3e:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 8002d40:	2337      	movs	r3, #55	; 0x37
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b25b      	sxtb	r3, r3
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b00f      	add	sp, #60	; 0x3c
 8002d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d50 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8002d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002d58:	250e      	movs	r5, #14
 8002d5a:	197b      	adds	r3, r7, r5
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002d60:	260f      	movs	r6, #15
 8002d62:	19bc      	adds	r4, r7, r6
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	1979      	adds	r1, r7, r5
 8002d68:	2201      	movs	r2, #1
 8002d6a:	20f0      	movs	r0, #240	; 0xf0
 8002d6c:	f7fe ff8b 	bl	8001c86 <bme68x_get_regs>
 8002d70:	0003      	movs	r3, r0
 8002d72:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8002d74:	19bb      	adds	r3, r7, r6
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d104      	bne.n	8002d88 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8002d7e:	197b      	adds	r3, r7, r5
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	001a      	movs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b25b      	sxtb	r3, r3
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b005      	add	sp, #20
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d9e:	1dfb      	adds	r3, r7, #7
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_Init+0x3c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Init+0x3c>)
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 f811 	bl	8002dd8 <HAL_InitTick>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e001      	b.n	8002dc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dc2:	f7fe fcfd 	bl	80017c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_InitTick+0x5c>)
 8002de2:	681c      	ldr	r4, [r3, #0]
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_InitTick+0x60>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	0019      	movs	r1, r3
 8002dea:	23fa      	movs	r3, #250	; 0xfa
 8002dec:	0098      	lsls	r0, r3, #2
 8002dee:	f7fd f993 	bl	8000118 <__udivsi3>
 8002df2:	0003      	movs	r3, r0
 8002df4:	0019      	movs	r1, r3
 8002df6:	0020      	movs	r0, r4
 8002df8:	f7fd f98e 	bl	8000118 <__udivsi3>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f92f 	bl	8003062 <HAL_SYSTICK_Config>
 8002e04:	1e03      	subs	r3, r0, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00f      	b.n	8002e2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d80b      	bhi.n	8002e2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	2301      	movs	r3, #1
 8002e16:	425b      	negs	r3, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f8fc 	bl	8003018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_InitTick+0x64>)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b003      	add	sp, #12
 8002e32:	bd90      	pop	{r4, r7, pc}
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000008 	.word	0x20000008
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_IncTick+0x1c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_IncTick+0x20>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	18d2      	adds	r2, r2, r3
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_IncTick+0x20>)
 8002e52:	601a      	str	r2, [r3, #0]
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	20000008 	.word	0x20000008
 8002e60:	20000198 	.word	0x20000198

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <HAL_GetTick+0x10>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	20000198 	.word	0x20000198

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	001a      	movs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	f7ff ffe0 	bl	8002e64 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ed2:	d809      	bhi.n	8002ee8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	231f      	movs	r3, #31
 8002edc:	401a      	ands	r2, r3
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_EnableIRQ+0x30>)
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4091      	lsls	r1, r2
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]
  }
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	0002      	movs	r2, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b7f      	cmp	r3, #127	; 0x7f
 8002f08:	d828      	bhi.n	8002f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <__NVIC_SetPriority+0xd4>)
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	33c0      	adds	r3, #192	; 0xc0
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	589b      	ldr	r3, [r3, r2]
 8002f1a:	1dfa      	adds	r2, r7, #7
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	0011      	movs	r1, r2
 8002f20:	2203      	movs	r2, #3
 8002f22:	400a      	ands	r2, r1
 8002f24:	00d2      	lsls	r2, r2, #3
 8002f26:	21ff      	movs	r1, #255	; 0xff
 8002f28:	4091      	lsls	r1, r2
 8002f2a:	000a      	movs	r2, r1
 8002f2c:	43d2      	mvns	r2, r2
 8002f2e:	401a      	ands	r2, r3
 8002f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	22ff      	movs	r2, #255	; 0xff
 8002f38:	401a      	ands	r2, r3
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	2303      	movs	r3, #3
 8002f42:	4003      	ands	r3, r0
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f48:	481f      	ldr	r0, [pc, #124]	; (8002fc8 <__NVIC_SetPriority+0xd4>)
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	430a      	orrs	r2, r1
 8002f54:	33c0      	adds	r3, #192	; 0xc0
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f5a:	e031      	b.n	8002fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5c:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <__NVIC_SetPriority+0xd8>)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	0019      	movs	r1, r3
 8002f64:	230f      	movs	r3, #15
 8002f66:	400b      	ands	r3, r1
 8002f68:	3b08      	subs	r3, #8
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	3306      	adds	r3, #6
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	18d3      	adds	r3, r2, r3
 8002f72:	3304      	adds	r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1dfa      	adds	r2, r7, #7
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	400a      	ands	r2, r1
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	21ff      	movs	r1, #255	; 0xff
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	43d2      	mvns	r2, r2
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	22ff      	movs	r2, #255	; 0xff
 8002f94:	401a      	ands	r2, r3
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	4003      	ands	r3, r0
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa4:	4809      	ldr	r0, [pc, #36]	; (8002fcc <__NVIC_SetPriority+0xd8>)
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	001c      	movs	r4, r3
 8002fac:	230f      	movs	r3, #15
 8002fae:	4023      	ands	r3, r4
 8002fb0:	3b08      	subs	r3, #8
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	3306      	adds	r3, #6
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	18c3      	adds	r3, r0, r3
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	045b      	lsls	r3, r3, #17
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d301      	bcc.n	8002fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e010      	b.n	800300a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <SysTick_Config+0x44>)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	3a01      	subs	r2, #1
 8002fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	425b      	negs	r3, r3
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f7ff ff7c 	bl	8002ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <SysTick_Config+0x44>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <SysTick_Config+0x44>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	210f      	movs	r1, #15
 8003024:	187b      	adds	r3, r7, r1
 8003026:	1c02      	adds	r2, r0, #0
 8003028:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	187b      	adds	r3, r7, r1
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b25b      	sxtb	r3, r3
 8003032:	0011      	movs	r1, r2
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ff5d 	bl	8002ef4 <__NVIC_SetPriority>
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	0002      	movs	r2, r0
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b25b      	sxtb	r3, r3
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff ff33 	bl	8002ec0 <__NVIC_EnableIRQ>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ffaf 	bl	8002fd0 <SysTick_Config>
 8003072:	0003      	movs	r3, r0
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003092:	e149      	b.n	8003328 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4091      	lsls	r1, r2
 800309e:	000a      	movs	r2, r1
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d100      	bne.n	80030ac <HAL_GPIO_Init+0x30>
 80030aa:	e13a      	b.n	8003322 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d005      	beq.n	80030c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d130      	bne.n	8003126 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0013      	movs	r3, r2
 80030d4:	43da      	mvns	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	0013      	movs	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030fa:	2201      	movs	r2, #1
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	43da      	mvns	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	2201      	movs	r2, #1
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	4013      	ands	r3, r2
 800312e:	2b03      	cmp	r3, #3
 8003130:	d017      	beq.n	8003162 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	409a      	lsls	r2, r3
 8003140:	0013      	movs	r3, r2
 8003142:	43da      	mvns	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	0013      	movs	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	4013      	ands	r3, r2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d123      	bne.n	80031b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	0092      	lsls	r2, r2, #2
 8003178:	58d3      	ldr	r3, [r2, r3]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2207      	movs	r2, #7
 8003180:	4013      	ands	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	43da      	mvns	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2107      	movs	r1, #7
 800319a:	400b      	ands	r3, r1
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	409a      	lsls	r2, r3
 80031a0:	0013      	movs	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3208      	adds	r2, #8
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	6939      	ldr	r1, [r7, #16]
 80031b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	43da      	mvns	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2203      	movs	r2, #3
 80031d4:	401a      	ands	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	23c0      	movs	r3, #192	; 0xc0
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	4013      	ands	r3, r2
 80031f4:	d100      	bne.n	80031f8 <HAL_GPIO_Init+0x17c>
 80031f6:	e094      	b.n	8003322 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f8:	4b51      	ldr	r3, [pc, #324]	; (8003340 <HAL_GPIO_Init+0x2c4>)
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x2c4>)
 80031fe:	2101      	movs	r1, #1
 8003200:	430a      	orrs	r2, r1
 8003202:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003204:	4a4f      	ldr	r2, [pc, #316]	; (8003344 <HAL_GPIO_Init+0x2c8>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2203      	movs	r2, #3
 8003216:	4013      	ands	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	409a      	lsls	r2, r3
 800321e:	0013      	movs	r3, r2
 8003220:	43da      	mvns	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	23a0      	movs	r3, #160	; 0xa0
 800322c:	05db      	lsls	r3, r3, #23
 800322e:	429a      	cmp	r2, r3
 8003230:	d013      	beq.n	800325a <HAL_GPIO_Init+0x1de>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a44      	ldr	r2, [pc, #272]	; (8003348 <HAL_GPIO_Init+0x2cc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00d      	beq.n	8003256 <HAL_GPIO_Init+0x1da>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a43      	ldr	r2, [pc, #268]	; (800334c <HAL_GPIO_Init+0x2d0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <HAL_GPIO_Init+0x1d6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a42      	ldr	r2, [pc, #264]	; (8003350 <HAL_GPIO_Init+0x2d4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d101      	bne.n	800324e <HAL_GPIO_Init+0x1d2>
 800324a:	2305      	movs	r3, #5
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x1e0>
 800324e:	2306      	movs	r3, #6
 8003250:	e004      	b.n	800325c <HAL_GPIO_Init+0x1e0>
 8003252:	2302      	movs	r3, #2
 8003254:	e002      	b.n	800325c <HAL_GPIO_Init+0x1e0>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_GPIO_Init+0x1e0>
 800325a:	2300      	movs	r3, #0
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	2103      	movs	r1, #3
 8003260:	400a      	ands	r2, r1
 8003262:	0092      	lsls	r2, r2, #2
 8003264:	4093      	lsls	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800326c:	4935      	ldr	r1, [pc, #212]	; (8003344 <HAL_GPIO_Init+0x2c8>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3302      	adds	r3, #2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327a:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43da      	mvns	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	035b      	lsls	r3, r3, #13
 8003292:	4013      	ands	r3, r2
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800329e:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032a4:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	039b      	lsls	r3, r3, #14
 80032bc:	4013      	ands	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43da      	mvns	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4013      	ands	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	4013      	ands	r3, r2
 80032e8:	d003      	beq.n	80032f2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032f2:	4b18      	ldr	r3, [pc, #96]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43da      	mvns	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	025b      	lsls	r3, r3, #9
 8003310:	4013      	ands	r3, r2
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_GPIO_Init+0x2d8>)
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	40da      	lsrs	r2, r3
 8003330:	1e13      	subs	r3, r2, #0
 8003332:	d000      	beq.n	8003336 <HAL_GPIO_Init+0x2ba>
 8003334:	e6ae      	b.n	8003094 <HAL_GPIO_Init+0x18>
  }
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	40010000 	.word	0x40010000
 8003348:	50000400 	.word	0x50000400
 800334c:	50000800 	.word	0x50000800
 8003350:	50001c00 	.word	0x50001c00
 8003354:	40010400 	.word	0x40010400

08003358 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	0008      	movs	r0, r1
 8003362:	0011      	movs	r1, r2
 8003364:	1cbb      	adds	r3, r7, #2
 8003366:	1c02      	adds	r2, r0, #0
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	1c7b      	adds	r3, r7, #1
 800336c:	1c0a      	adds	r2, r1, #0
 800336e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003370:	1c7b      	adds	r3, r7, #1
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003378:	1cbb      	adds	r3, r7, #2
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003382:	1cbb      	adds	r3, r7, #2
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	000a      	movs	r2, r1
 800339c:	1cbb      	adds	r3, r7, #2
 800339e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a6:	1cbb      	adds	r3, r7, #2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	041a      	lsls	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	1cb9      	adds	r1, r7, #2
 80033b6:	8809      	ldrh	r1, [r1, #0]
 80033b8:	400b      	ands	r3, r1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e082      	b.n	80034e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2241      	movs	r2, #65	; 0x41
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fe f8f9 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2241      	movs	r2, #65	; 0x41
 80033fa:	2124      	movs	r1, #36	; 0x24
 80033fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	438a      	bics	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4934      	ldr	r1, [pc, #208]	; (80034e8 <HAL_I2C_Init+0x120>)
 8003418:	400a      	ands	r2, r1
 800341a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4931      	ldr	r1, [pc, #196]	; (80034ec <HAL_I2C_Init+0x124>)
 8003428:	400a      	ands	r2, r1
 800342a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d108      	bne.n	8003446 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	0209      	lsls	r1, r1, #8
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e007      	b.n	8003456 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2184      	movs	r1, #132	; 0x84
 8003450:	0209      	lsls	r1, r1, #8
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d104      	bne.n	8003468 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	491f      	ldr	r1, [pc, #124]	; (80034f0 <HAL_I2C_Init+0x128>)
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	491a      	ldr	r1, [pc, #104]	; (80034ec <HAL_I2C_Init+0x124>)
 8003484:	400a      	ands	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	431a      	orrs	r2, r3
 8003492:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69d9      	ldr	r1, [r3, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2241      	movs	r2, #65	; 0x41
 80034cc:	2120      	movs	r1, #32
 80034ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2242      	movs	r2, #66	; 0x42
 80034da:	2100      	movs	r1, #0
 80034dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	f0ffffff 	.word	0xf0ffffff
 80034ec:	ffff7fff 	.word	0xffff7fff
 80034f0:	02008000 	.word	0x02008000

080034f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	000c      	movs	r4, r1
 80034fe:	0010      	movs	r0, r2
 8003500:	0019      	movs	r1, r3
 8003502:	230a      	movs	r3, #10
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	1c22      	adds	r2, r4, #0
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	2308      	movs	r3, #8
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	1c02      	adds	r2, r0, #0
 8003510:	801a      	strh	r2, [r3, #0]
 8003512:	1dbb      	adds	r3, r7, #6
 8003514:	1c0a      	adds	r2, r1, #0
 8003516:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2241      	movs	r2, #65	; 0x41
 800351c:	5c9b      	ldrb	r3, [r3, r2]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	d000      	beq.n	8003526 <HAL_I2C_Mem_Write+0x32>
 8003524:	e10c      	b.n	8003740 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d004      	beq.n	8003536 <HAL_I2C_Mem_Write+0x42>
 800352c:	232c      	movs	r3, #44	; 0x2c
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0ff      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2240      	movs	r2, #64	; 0x40
 8003546:	5c9b      	ldrb	r3, [r3, r2]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Mem_Write+0x5c>
 800354c:	2302      	movs	r3, #2
 800354e:	e0f8      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003558:	f7ff fc84 	bl	8002e64 <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	0219      	lsls	r1, r3, #8
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2319      	movs	r3, #25
 800356c:	2201      	movs	r2, #1
 800356e:	f000 fb0b 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0e3      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2241      	movs	r2, #65	; 0x41
 800357e:	2121      	movs	r1, #33	; 0x21
 8003580:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2242      	movs	r2, #66	; 0x42
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	222c      	movs	r2, #44	; 0x2c
 800359a:	18ba      	adds	r2, r7, r2
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035a6:	1dbb      	adds	r3, r7, #6
 80035a8:	881c      	ldrh	r4, [r3, #0]
 80035aa:	2308      	movs	r3, #8
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	881a      	ldrh	r2, [r3, #0]
 80035b0:	230a      	movs	r3, #10
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	8819      	ldrh	r1, [r3, #0]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	0023      	movs	r3, r4
 80035c2:	f000 f9f9 	bl	80039b8 <I2C_RequestMemoryWrite>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2240      	movs	r2, #64	; 0x40
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0b5      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2bff      	cmp	r3, #255	; 0xff
 80035de:	d911      	bls.n	8003604 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	22ff      	movs	r2, #255	; 0xff
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	045c      	lsls	r4, r3, #17
 80035f0:	230a      	movs	r3, #10
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	0023      	movs	r3, r4
 80035fe:	f000 fc9b 	bl	8003f38 <I2C_TransferConfig>
 8003602:	e012      	b.n	800362a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	b2da      	uxtb	r2, r3
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	049c      	lsls	r4, r3, #18
 8003618:	230a      	movs	r3, #10
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	8819      	ldrh	r1, [r3, #0]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	2300      	movs	r3, #0
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	0023      	movs	r3, r4
 8003626:	f000 fc87 	bl	8003f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 faf7 	bl	8003c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e081      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d03a      	beq.n	80036ee <HAL_I2C_Mem_Write+0x1fa>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d136      	bne.n	80036ee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	0013      	movs	r3, r2
 800368a:	2200      	movs	r2, #0
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	f000 fa7b 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e053      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2bff      	cmp	r3, #255	; 0xff
 80036a2:	d911      	bls.n	80036c8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	045c      	lsls	r4, r3, #17
 80036b4:	230a      	movs	r3, #10
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	8819      	ldrh	r1, [r3, #0]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	2300      	movs	r3, #0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	0023      	movs	r3, r4
 80036c2:	f000 fc39 	bl	8003f38 <I2C_TransferConfig>
 80036c6:	e012      	b.n	80036ee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	049c      	lsls	r4, r3, #18
 80036dc:	230a      	movs	r3, #10
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	8819      	ldrh	r1, [r3, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0023      	movs	r3, r4
 80036ea:	f000 fc25 	bl	8003f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d198      	bne.n	800362a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	0018      	movs	r0, r3
 8003700:	f000 fad6 	bl	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003704:	1e03      	subs	r3, r0, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e01a      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	490b      	ldr	r1, [pc, #44]	; (800374c <HAL_I2C_Mem_Write+0x258>)
 8003720:	400a      	ands	r2, r1
 8003722:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2241      	movs	r2, #65	; 0x41
 8003728:	2120      	movs	r1, #32
 800372a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2242      	movs	r2, #66	; 0x42
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	0018      	movs	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	b007      	add	sp, #28
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	000c      	movs	r4, r1
 800375a:	0010      	movs	r0, r2
 800375c:	0019      	movs	r1, r3
 800375e:	230a      	movs	r3, #10
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	1c22      	adds	r2, r4, #0
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	2308      	movs	r3, #8
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	1c02      	adds	r2, r0, #0
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	1dbb      	adds	r3, r7, #6
 8003770:	1c0a      	adds	r2, r1, #0
 8003772:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2241      	movs	r2, #65	; 0x41
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	d000      	beq.n	8003782 <HAL_I2C_Mem_Read+0x32>
 8003780:	e110      	b.n	80039a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <HAL_I2C_Mem_Read+0x42>
 8003788:	232c      	movs	r3, #44	; 0x2c
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2280      	movs	r2, #128	; 0x80
 8003796:	0092      	lsls	r2, r2, #2
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e103      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2C_Mem_Read+0x5c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0fc      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	2101      	movs	r1, #1
 80037b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037b4:	f7ff fb56 	bl	8002e64 <HAL_GetTick>
 80037b8:	0003      	movs	r3, r0
 80037ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037bc:	2380      	movs	r3, #128	; 0x80
 80037be:	0219      	lsls	r1, r3, #8
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2319      	movs	r3, #25
 80037c8:	2201      	movs	r2, #1
 80037ca:	f000 f9dd 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0e7      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2241      	movs	r2, #65	; 0x41
 80037da:	2122      	movs	r1, #34	; 0x22
 80037dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2242      	movs	r2, #66	; 0x42
 80037e2:	2140      	movs	r1, #64	; 0x40
 80037e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	222c      	movs	r2, #44	; 0x2c
 80037f6:	18ba      	adds	r2, r7, r2
 80037f8:	8812      	ldrh	r2, [r2, #0]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	881c      	ldrh	r4, [r3, #0]
 8003806:	2308      	movs	r3, #8
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	230a      	movs	r3, #10
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	8819      	ldrh	r1, [r3, #0]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	0023      	movs	r3, r4
 800381e:	f000 f92f 	bl	8003a80 <I2C_RequestMemoryRead>
 8003822:	1e03      	subs	r3, r0, #0
 8003824:	d005      	beq.n	8003832 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0b9      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2bff      	cmp	r3, #255	; 0xff
 800383a:	d911      	bls.n	8003860 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	22ff      	movs	r2, #255	; 0xff
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	045c      	lsls	r4, r3, #17
 800384c:	230a      	movs	r3, #10
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	8819      	ldrh	r1, [r3, #0]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	4b56      	ldr	r3, [pc, #344]	; (80039b0 <HAL_I2C_Mem_Read+0x260>)
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	0023      	movs	r3, r4
 800385a:	f000 fb6d 	bl	8003f38 <I2C_TransferConfig>
 800385e:	e012      	b.n	8003886 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	b2da      	uxtb	r2, r3
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	049c      	lsls	r4, r3, #18
 8003874:	230a      	movs	r3, #10
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	8819      	ldrh	r1, [r3, #0]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_I2C_Mem_Read+0x260>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	0023      	movs	r3, r4
 8003882:	f000 fb59 	bl	8003f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	0013      	movs	r3, r2
 8003890:	2200      	movs	r2, #0
 8003892:	2104      	movs	r1, #4
 8003894:	f000 f978 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e082      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d03a      	beq.n	8003952 <HAL_I2C_Mem_Read+0x202>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d136      	bne.n	8003952 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	0013      	movs	r3, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	f000 f949 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e053      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2bff      	cmp	r3, #255	; 0xff
 8003906:	d911      	bls.n	800392c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	22ff      	movs	r2, #255	; 0xff
 800390c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	b2da      	uxtb	r2, r3
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	045c      	lsls	r4, r3, #17
 8003918:	230a      	movs	r3, #10
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	8819      	ldrh	r1, [r3, #0]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	2300      	movs	r3, #0
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	0023      	movs	r3, r4
 8003926:	f000 fb07 	bl	8003f38 <I2C_TransferConfig>
 800392a:	e012      	b.n	8003952 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	b2da      	uxtb	r2, r3
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	049c      	lsls	r4, r3, #18
 8003940:	230a      	movs	r3, #10
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	8819      	ldrh	r1, [r3, #0]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	2300      	movs	r3, #0
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	0023      	movs	r3, r4
 800394e:	f000 faf3 	bl	8003f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d194      	bne.n	8003886 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 f9a4 	bl	8003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e01a      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2220      	movs	r2, #32
 8003976:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	490c      	ldr	r1, [pc, #48]	; (80039b4 <HAL_I2C_Mem_Read+0x264>)
 8003984:	400a      	ands	r2, r1
 8003986:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2241      	movs	r2, #65	; 0x41
 800398c:	2120      	movs	r1, #32
 800398e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2242      	movs	r2, #66	; 0x42
 8003994:	2100      	movs	r1, #0
 8003996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b007      	add	sp, #28
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	80002400 	.word	0x80002400
 80039b4:	fe00e800 	.word	0xfe00e800

080039b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	000c      	movs	r4, r1
 80039c2:	0010      	movs	r0, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	250a      	movs	r5, #10
 80039c8:	197b      	adds	r3, r7, r5
 80039ca:	1c22      	adds	r2, r4, #0
 80039cc:	801a      	strh	r2, [r3, #0]
 80039ce:	2308      	movs	r3, #8
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	1c02      	adds	r2, r0, #0
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	1dbb      	adds	r3, r7, #6
 80039d8:	1c0a      	adds	r2, r1, #0
 80039da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039dc:	1dbb      	adds	r3, r7, #6
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	045c      	lsls	r4, r3, #17
 80039e6:	197b      	adds	r3, r7, r5
 80039e8:	8819      	ldrh	r1, [r3, #0]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <I2C_RequestMemoryWrite+0xc4>)
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	0023      	movs	r3, r4
 80039f2:	f000 faa1 	bl	8003f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	6a39      	ldr	r1, [r7, #32]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f911 	bl	8003c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e033      	b.n	8003a72 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a0a:	1dbb      	adds	r3, r7, #6
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a12:	2308      	movs	r3, #8
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a20:	e019      	b.n	8003a56 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a22:	2308      	movs	r3, #8
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f8f2 	bl	8003c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e014      	b.n	8003a72 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a48:	2308      	movs	r3, #8
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	0013      	movs	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	f000 f890 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	80002000 	.word	0x80002000

08003a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a80:	b5b0      	push	{r4, r5, r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	000c      	movs	r4, r1
 8003a8a:	0010      	movs	r0, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	250a      	movs	r5, #10
 8003a90:	197b      	adds	r3, r7, r5
 8003a92:	1c22      	adds	r2, r4, #0
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	2308      	movs	r3, #8
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	1c02      	adds	r2, r0, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	1dbb      	adds	r3, r7, #6
 8003aa0:	1c0a      	adds	r2, r1, #0
 8003aa2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003aa4:	1dbb      	adds	r3, r7, #6
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	197b      	adds	r3, r7, r5
 8003aac:	8819      	ldrh	r1, [r3, #0]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	4b23      	ldr	r3, [pc, #140]	; (8003b40 <I2C_RequestMemoryRead+0xc0>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f000 fa3f 	bl	8003f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	6a39      	ldr	r1, [r7, #32]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 f8af 	bl	8003c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e033      	b.n	8003b36 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ace:	1dbb      	adds	r3, r7, #6
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae4:	e019      	b.n	8003b1a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afa:	6a39      	ldr	r1, [r7, #32]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f890 	bl	8003c24 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b04:	1e03      	subs	r3, r0, #0
 8003b06:	d001      	beq.n	8003b0c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e014      	b.n	8003b36 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1a:	6a3a      	ldr	r2, [r7, #32]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	0013      	movs	r3, r2
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	f000 f82e 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	80002000 	.word	0x80002000

08003b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2202      	movs	r2, #2
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d103      	bne.n	8003b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d007      	beq.n	8003b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	619a      	str	r2, [r3, #24]
  }
}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	e030      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	d02d      	beq.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7ff f960 	bl	8002e64 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d122      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	425a      	negs	r2, r3
 8003bc6:	4153      	adcs	r3, r2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	001a      	movs	r2, r3
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d113      	bne.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	2220      	movs	r2, #32
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2241      	movs	r2, #65	; 0x41
 8003be4:	2120      	movs	r1, #32
 8003be6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2242      	movs	r2, #66	; 0x42
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e00f      	b.n	8003c1c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	425a      	negs	r2, r3
 8003c0c:	4153      	adcs	r3, r2
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	001a      	movs	r2, r3
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d0bf      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b004      	add	sp, #16
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c30:	e032      	b.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f87d 	bl	8003d38 <I2C_IsErrorOccurred>
 8003c3e:	1e03      	subs	r3, r0, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e030      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	d025      	beq.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7ff f90a 	bl	8002e64 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11a      	bne.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d013      	beq.n	8003c98 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	2220      	movs	r2, #32
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2241      	movs	r2, #65	; 0x41
 8003c80:	2120      	movs	r1, #32
 8003c82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2242      	movs	r2, #66	; 0x42
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	; 0x40
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d1c5      	bne.n	8003c32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cbc:	e02f      	b.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f837 	bl	8003d38 <I2C_IsErrorOccurred>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02d      	b.n	8003d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7ff f8c7 	bl	8002e64 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11a      	bne.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d013      	beq.n	8003d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2241      	movs	r2, #65	; 0x41
 8003d06:	2120      	movs	r1, #32
 8003d08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2242      	movs	r2, #66	; 0x42
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2240      	movs	r2, #64	; 0x40
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2220      	movs	r2, #32
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d1c8      	bne.n	8003cbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b08b      	sub	sp, #44	; 0x2c
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2327      	movs	r3, #39	; 0x27
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	4013      	ands	r3, r2
 8003d62:	d100      	bne.n	8003d66 <I2C_IsErrorOccurred+0x2e>
 8003d64:	e082      	b.n	8003e6c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d6e:	e060      	b.n	8003e32 <I2C_IsErrorOccurred+0xfa>
 8003d70:	2427      	movs	r4, #39	; 0x27
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	193a      	adds	r2, r7, r4
 8003d76:	7812      	ldrb	r2, [r2, #0]
 8003d78:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	d058      	beq.n	8003e32 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d80:	f7ff f870 	bl	8002e64 <HAL_GetTick>
 8003d84:	0002      	movs	r2, r0
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d306      	bcc.n	8003d9e <I2C_IsErrorOccurred+0x66>
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	193a      	adds	r2, r7, r4
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d149      	bne.n	8003e32 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	01db      	lsls	r3, r3, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003dac:	2013      	movs	r0, #19
 8003dae:	183b      	adds	r3, r7, r0
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	2142      	movs	r1, #66	; 0x42
 8003db4:	5c52      	ldrb	r2, [r2, r1]
 8003db6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d126      	bne.n	8003e1a <I2C_IsErrorOccurred+0xe2>
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	01db      	lsls	r3, r3, #7
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d021      	beq.n	8003e1a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003dd6:	183b      	adds	r3, r7, r0
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d01d      	beq.n	8003e1a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	01c9      	lsls	r1, r1, #7
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003df0:	f7ff f838 	bl	8002e64 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df8:	e00f      	b.n	8003e1a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dfa:	f7ff f833 	bl	8002e64 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b19      	cmp	r3, #25
 8003e06:	d908      	bls.n	8003e1a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e10:	2327      	movs	r3, #39	; 0x27
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]

              break;
 8003e18:	e00b      	b.n	8003e32 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2220      	movs	r2, #32
 8003e22:	4013      	ands	r3, r2
 8003e24:	2127      	movs	r1, #39	; 0x27
 8003e26:	187a      	adds	r2, r7, r1
 8003e28:	1879      	adds	r1, r7, r1
 8003e2a:	7809      	ldrb	r1, [r1, #0]
 8003e2c:	7011      	strb	r1, [r2, #0]
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d1e3      	bne.n	8003dfa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d004      	beq.n	8003e4a <I2C_IsErrorOccurred+0x112>
 8003e40:	2327      	movs	r3, #39	; 0x27
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d092      	beq.n	8003d70 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e4a:	2327      	movs	r3, #39	; 0x27
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	4313      	orrs	r3, r2
 8003e62:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e64:	2327      	movs	r3, #39	; 0x27
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d00c      	beq.n	8003e98 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2201      	movs	r2, #1
 8003e82:	4313      	orrs	r3, r2
 8003e84:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	0052      	lsls	r2, r2, #1
 8003e8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e90:	2327      	movs	r3, #39	; 0x27
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d00c      	beq.n	8003ebc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	00d2      	lsls	r2, r2, #3
 8003eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eb4:	2327      	movs	r3, #39	; 0x27
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d00c      	beq.n	8003ee0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ed8:	2327      	movs	r3, #39	; 0x27
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ee0:	2327      	movs	r3, #39	; 0x27
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff fe29 	bl	8003b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	490d      	ldr	r1, [pc, #52]	; (8003f34 <I2C_IsErrorOccurred+0x1fc>)
 8003efe:	400a      	ands	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2241      	movs	r2, #65	; 0x41
 8003f12:	2120      	movs	r1, #32
 8003f14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2242      	movs	r2, #66	; 0x42
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2240      	movs	r2, #64	; 0x40
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003f26:	2327      	movs	r3, #39	; 0x27
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	781b      	ldrb	r3, [r3, #0]
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b00b      	add	sp, #44	; 0x2c
 8003f32:	bd90      	pop	{r4, r7, pc}
 8003f34:	fe00e800 	.word	0xfe00e800

08003f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	0008      	movs	r0, r1
 8003f42:	0011      	movs	r1, r2
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	240a      	movs	r4, #10
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	1c02      	adds	r2, r0, #0
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	2009      	movs	r0, #9
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	1c0a      	adds	r2, r1, #0
 8003f54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	059b      	lsls	r3, r3, #22
 8003f5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f5e:	183b      	adds	r3, r7, r0
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	0419      	lsls	r1, r3, #16
 8003f64:	23ff      	movs	r3, #255	; 0xff
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	4313      	orrs	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f82:	0d51      	lsrs	r1, r2, #21
 8003f84:	2280      	movs	r2, #128	; 0x80
 8003f86:	00d2      	lsls	r2, r2, #3
 8003f88:	400a      	ands	r2, r1
 8003f8a:	4907      	ldr	r1, [pc, #28]	; (8003fa8 <I2C_TransferConfig+0x70>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	43d2      	mvns	r2, r2
 8003f90:	401a      	ands	r2, r3
 8003f92:	0011      	movs	r1, r2
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b007      	add	sp, #28
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	03ff63ff 	.word	0x03ff63ff

08003fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2241      	movs	r2, #65	; 0x41
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d138      	bne.n	8004034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	5c9b      	ldrb	r3, [r3, r2]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e032      	b.n	8004036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2240      	movs	r2, #64	; 0x40
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2241      	movs	r2, #65	; 0x41
 8003fdc:	2124      	movs	r1, #36	; 0x24
 8003fde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2101      	movs	r1, #1
 8003fec:	438a      	bics	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4911      	ldr	r1, [pc, #68]	; (8004040 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2101      	movs	r1, #1
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2241      	movs	r2, #65	; 0x41
 8004024:	2120      	movs	r1, #32
 8004026:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	ffffefff 	.word	0xffffefff

08004044 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2241      	movs	r2, #65	; 0x41
 8004052:	5c9b      	ldrb	r3, [r3, r2]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b20      	cmp	r3, #32
 8004058:	d139      	bne.n	80040ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2240      	movs	r2, #64	; 0x40
 800405e:	5c9b      	ldrb	r3, [r3, r2]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004064:	2302      	movs	r3, #2
 8004066:	e033      	b.n	80040d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	2101      	movs	r1, #1
 800406e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2241      	movs	r2, #65	; 0x41
 8004074:	2124      	movs	r1, #36	; 0x24
 8004076:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2101      	movs	r1, #1
 8004084:	438a      	bics	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004094:	4013      	ands	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2101      	movs	r1, #1
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2241      	movs	r2, #65	; 0x41
 80040be:	2120      	movs	r1, #32
 80040c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2240      	movs	r2, #64	; 0x40
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b004      	add	sp, #16
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	fffff0ff 	.word	0xfffff0ff

080040dc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	000a      	movs	r2, r1
 80040e6:	1cfb      	adds	r3, r7, #3
 80040e8:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_PWR_EnterSLEEPMode+0xa4>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_PWR_EnterSLEEPMode+0x40>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8004116:	491b      	ldr	r1, [pc, #108]	; (8004184 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8004118:	400a      	ands	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2203      	movs	r2, #3
 8004126:	4393      	bics	r3, r2
 8004128:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004138:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_PWR_EnterSLEEPMode+0xac>)
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_PWR_EnterSLEEPMode+0xac>)
 800413e:	2104      	movs	r1, #4
 8004140:	438a      	bics	r2, r1
 8004142:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004144:	1cfb      	adds	r3, r7, #3
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800414c:	bf30      	wfi
 800414e:	e002      	b.n	8004156 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004150:	bf40      	sev
    __WFE();
 8004152:	bf20      	wfe
    __WFE();
 8004154:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_PWR_EnterSLEEPMode+0x94>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_PWR_EnterSLEEPMode+0xa0>)
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	0089      	lsls	r1, r1, #2
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8004170:	46c0      	nop			; (mov r8, r8)

}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b006      	add	sp, #24
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	40007000 	.word	0x40007000
 8004180:	40010000 	.word	0x40010000
 8004184:	fffffdff 	.word	0xfffffdff
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f000 fb6c 	bl	8004878 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041a0:	4bc8      	ldr	r3, [pc, #800]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	220c      	movs	r2, #12
 80041a6:	4013      	ands	r3, r2
 80041a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041aa:	4bc6      	ldr	r3, [pc, #792]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	025b      	lsls	r3, r3, #9
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	4013      	ands	r3, r2
 80041be:	d100      	bne.n	80041c2 <HAL_RCC_OscConfig+0x36>
 80041c0:	e07d      	b.n	80042be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d007      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d112      	bne.n	80041f4 <HAL_RCC_OscConfig+0x68>
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	025b      	lsls	r3, r3, #9
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d10d      	bne.n	80041f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	4bba      	ldr	r3, [pc, #744]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	029b      	lsls	r3, r3, #10
 80041e0:	4013      	ands	r3, r2
 80041e2:	d100      	bne.n	80041e6 <HAL_RCC_OscConfig+0x5a>
 80041e4:	e06a      	b.n	80042bc <HAL_RCC_OscConfig+0x130>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d166      	bne.n	80042bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f000 fb42 	bl	8004878 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	025b      	lsls	r3, r3, #9
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_OscConfig+0x84>
 8004200:	4bb0      	ldr	r3, [pc, #704]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4baf      	ldr	r3, [pc, #700]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	0249      	lsls	r1, r1, #9
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e027      	b.n	8004260 <HAL_RCC_OscConfig+0xd4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	23a0      	movs	r3, #160	; 0xa0
 8004216:	02db      	lsls	r3, r3, #11
 8004218:	429a      	cmp	r2, r3
 800421a:	d10e      	bne.n	800423a <HAL_RCC_OscConfig+0xae>
 800421c:	4ba9      	ldr	r3, [pc, #676]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4ba8      	ldr	r3, [pc, #672]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	02c9      	lsls	r1, r1, #11
 8004226:	430a      	orrs	r2, r1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	4ba6      	ldr	r3, [pc, #664]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4ba5      	ldr	r3, [pc, #660]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	0249      	lsls	r1, r1, #9
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	e012      	b.n	8004260 <HAL_RCC_OscConfig+0xd4>
 800423a:	4ba2      	ldr	r3, [pc, #648]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4ba1      	ldr	r3, [pc, #644]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004240:	49a1      	ldr	r1, [pc, #644]	; (80044c8 <HAL_RCC_OscConfig+0x33c>)
 8004242:	400a      	ands	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	4b9f      	ldr	r3, [pc, #636]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	025b      	lsls	r3, r3, #9
 800424e:	4013      	ands	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4b9b      	ldr	r3, [pc, #620]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b9a      	ldr	r3, [pc, #616]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800425a:	499c      	ldr	r1, [pc, #624]	; (80044cc <HAL_RCC_OscConfig+0x340>)
 800425c:	400a      	ands	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d014      	beq.n	8004292 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004268:	f7fe fdfc 	bl	8002e64 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004272:	f7fe fdf7 	bl	8002e64 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b64      	cmp	r3, #100	; 0x64
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e2f9      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004284:	4b8f      	ldr	r3, [pc, #572]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	029b      	lsls	r3, r3, #10
 800428c:	4013      	ands	r3, r2
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0xe6>
 8004290:	e015      	b.n	80042be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fe fde7 	bl	8002e64 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800429c:	f7fe fde2 	bl	8002e64 <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e2e4      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ae:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	029b      	lsls	r3, r3, #10
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x110>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	4013      	ands	r3, r2
 80042c6:	d100      	bne.n	80042ca <HAL_RCC_OscConfig+0x13e>
 80042c8:	e099      	b.n	80043fe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2220      	movs	r2, #32
 80042d4:	4013      	ands	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042d8:	4b7a      	ldr	r3, [pc, #488]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b79      	ldr	r3, [pc, #484]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80042de:	2120      	movs	r1, #32
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	2220      	movs	r2, #32
 80042e8:	4393      	bics	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	d13e      	bne.n	8004376 <HAL_RCC_OscConfig+0x1ea>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d13b      	bne.n	8004376 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80042fe:	4b71      	ldr	r3, [pc, #452]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	d004      	beq.n	8004312 <HAL_RCC_OscConfig+0x186>
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e2b2      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_RCC_OscConfig+0x344>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	021a      	lsls	r2, r3, #8
 8004322:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2209      	movs	r2, #9
 800432e:	4393      	bics	r3, r2
 8004330:	0019      	movs	r1, r3
 8004332:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433a:	f000 fbeb 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 800433e:	0001      	movs	r1, r0
 8004340:	4b60      	ldr	r3, [pc, #384]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	220f      	movs	r2, #15
 8004348:	4013      	ands	r3, r2
 800434a:	4a62      	ldr	r2, [pc, #392]	; (80044d4 <HAL_RCC_OscConfig+0x348>)
 800434c:	5cd3      	ldrb	r3, [r2, r3]
 800434e:	000a      	movs	r2, r1
 8004350:	40da      	lsrs	r2, r3
 8004352:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <HAL_RCC_OscConfig+0x34c>)
 8004354:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004356:	4b61      	ldr	r3, [pc, #388]	; (80044dc <HAL_RCC_OscConfig+0x350>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2513      	movs	r5, #19
 800435c:	197c      	adds	r4, r7, r5
 800435e:	0018      	movs	r0, r3
 8004360:	f7fe fd3a 	bl	8002dd8 <HAL_InitTick>
 8004364:	0003      	movs	r3, r0
 8004366:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004368:	197b      	adds	r3, r7, r5
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d046      	beq.n	80043fe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004370:	197b      	adds	r3, r7, r5
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	e280      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	d027      	beq.n	80043cc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800437c:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2209      	movs	r2, #9
 8004382:	4393      	bics	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe fd69 	bl	8002e64 <HAL_GetTick>
 8004392:	0003      	movs	r3, r0
 8004394:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7fe fd64 	bl	8002e64 <HAL_GetTick>
 800439c:	0002      	movs	r2, r0
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e266      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2204      	movs	r2, #4
 80043b0:	4013      	ands	r3, r2
 80043b2:	d0f1      	beq.n	8004398 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b4:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a45      	ldr	r2, [pc, #276]	; (80044d0 <HAL_RCC_OscConfig+0x344>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	e018      	b.n	80043fe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043cc:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe fd44 	bl	8002e64 <HAL_GetTick>
 80043dc:	0003      	movs	r3, r0
 80043de:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fe fd3f 	bl	8002e64 <HAL_GetTick>
 80043e6:	0002      	movs	r2, r0
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e241      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2204      	movs	r2, #4
 80043fa:	4013      	ands	r3, r2
 80043fc:	d1f1      	bne.n	80043e2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	4013      	ands	r3, r2
 8004406:	d100      	bne.n	800440a <HAL_RCC_OscConfig+0x27e>
 8004408:	e0a1      	b.n	800454e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d140      	bne.n	8004492 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004410:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4013      	ands	r3, r2
 800441a:	d005      	beq.n	8004428 <HAL_RCC_OscConfig+0x29c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e227      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <HAL_RCC_OscConfig+0x354>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	0a19      	lsrs	r1, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	061a      	lsls	r2, r3, #24
 800444a:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	0b5b      	lsrs	r3, r3, #13
 8004456:	3301      	adds	r3, #1
 8004458:	2280      	movs	r2, #128	; 0x80
 800445a:	0212      	lsls	r2, r2, #8
 800445c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	210f      	movs	r1, #15
 8004466:	400b      	ands	r3, r1
 8004468:	491a      	ldr	r1, [pc, #104]	; (80044d4 <HAL_RCC_OscConfig+0x348>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_RCC_OscConfig+0x34c>)
 8004470:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCC_OscConfig+0x350>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2513      	movs	r5, #19
 8004478:	197c      	adds	r4, r7, r5
 800447a:	0018      	movs	r0, r3
 800447c:	f7fe fcac 	bl	8002dd8 <HAL_InitTick>
 8004480:	0003      	movs	r3, r0
 8004482:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004484:	197b      	adds	r3, r7, r5
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d060      	beq.n	800454e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800448c:	197b      	adds	r3, r7, r5
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	e1f2      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03f      	beq.n	800451a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0x338>)
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	0049      	lsls	r1, r1, #1
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fe fcdc 	bl	8002e64 <HAL_GetTick>
 80044ac:	0003      	movs	r3, r0
 80044ae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044b0:	e018      	b.n	80044e4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b2:	f7fe fcd7 	bl	8002e64 <HAL_GetTick>
 80044b6:	0002      	movs	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d911      	bls.n	80044e4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1d9      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
 80044c4:	40021000 	.word	0x40021000
 80044c8:	fffeffff 	.word	0xfffeffff
 80044cc:	fffbffff 	.word	0xfffbffff
 80044d0:	ffffe0ff 	.word	0xffffe0ff
 80044d4:	08006350 	.word	0x08006350
 80044d8:	20000000 	.word	0x20000000
 80044dc:	20000004 	.word	0x20000004
 80044e0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044e4:	4bc9      	ldr	r3, [pc, #804]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4013      	ands	r3, r2
 80044ee:	d0e0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f0:	4bc6      	ldr	r3, [pc, #792]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4ac6      	ldr	r2, [pc, #792]	; (8004810 <HAL_RCC_OscConfig+0x684>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1a      	ldr	r2, [r3, #32]
 80044fe:	4bc3      	ldr	r3, [pc, #780]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004504:	4bc1      	ldr	r3, [pc, #772]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	0a19      	lsrs	r1, r3, #8
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	061a      	lsls	r2, r3, #24
 8004512:	4bbe      	ldr	r3, [pc, #760]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
 8004518:	e019      	b.n	800454e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800451a:	4bbc      	ldr	r3, [pc, #752]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4bbb      	ldr	r3, [pc, #748]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004520:	49bc      	ldr	r1, [pc, #752]	; (8004814 <HAL_RCC_OscConfig+0x688>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe fc9d 	bl	8002e64 <HAL_GetTick>
 800452a:	0003      	movs	r3, r0
 800452c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004530:	f7fe fc98 	bl	8002e64 <HAL_GetTick>
 8004534:	0002      	movs	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e19a      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004542:	4bb2      	ldr	r3, [pc, #712]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4013      	ands	r3, r2
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2208      	movs	r2, #8
 8004554:	4013      	ands	r3, r2
 8004556:	d036      	beq.n	80045c6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d019      	beq.n	8004594 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004560:	4baa      	ldr	r3, [pc, #680]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004564:	4ba9      	ldr	r3, [pc, #676]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004566:	2101      	movs	r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456c:	f7fe fc7a 	bl	8002e64 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004576:	f7fe fc75 	bl	8002e64 <HAL_GetTick>
 800457a:	0002      	movs	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e177      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004588:	4ba0      	ldr	r3, [pc, #640]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	2202      	movs	r2, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d0f1      	beq.n	8004576 <HAL_RCC_OscConfig+0x3ea>
 8004592:	e018      	b.n	80045c6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004594:	4b9d      	ldr	r3, [pc, #628]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004598:	4b9c      	ldr	r3, [pc, #624]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800459a:	2101      	movs	r1, #1
 800459c:	438a      	bics	r2, r1
 800459e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a0:	f7fe fc60 	bl	8002e64 <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045aa:	f7fe fc5b 	bl	8002e64 <HAL_GetTick>
 80045ae:	0002      	movs	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e15d      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045bc:	4b93      	ldr	r3, [pc, #588]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	2202      	movs	r2, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	d1f1      	bne.n	80045aa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2204      	movs	r2, #4
 80045cc:	4013      	ands	r3, r2
 80045ce:	d100      	bne.n	80045d2 <HAL_RCC_OscConfig+0x446>
 80045d0:	e0ae      	b.n	8004730 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d2:	2023      	movs	r0, #35	; 0x23
 80045d4:	183b      	adds	r3, r7, r0
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	4b8c      	ldr	r3, [pc, #560]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80045dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	055b      	lsls	r3, r3, #21
 80045e2:	4013      	ands	r3, r2
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	4b89      	ldr	r3, [pc, #548]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	4b88      	ldr	r3, [pc, #544]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	0549      	lsls	r1, r1, #21
 80045f0:	430a      	orrs	r2, r1
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80045f4:	183b      	adds	r3, r7, r0
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0x68c>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4013      	ands	r3, r2
 8004604:	d11a      	bne.n	800463c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004606:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCC_OscConfig+0x68c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCC_OscConfig+0x68c>)
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	0049      	lsls	r1, r1, #1
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004614:	f7fe fc26 	bl	8002e64 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461e:	f7fe fc21 	bl	8002e64 <HAL_GetTick>
 8004622:	0002      	movs	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b64      	cmp	r3, #100	; 0x64
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e123      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	4b79      	ldr	r3, [pc, #484]	; (8004818 <HAL_RCC_OscConfig+0x68c>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4013      	ands	r3, r2
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	429a      	cmp	r2, r3
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x4cc>
 8004648:	4b70      	ldr	r3, [pc, #448]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800464a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800464c:	4b6f      	ldr	r3, [pc, #444]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	0049      	lsls	r1, r1, #1
 8004652:	430a      	orrs	r2, r1
 8004654:	651a      	str	r2, [r3, #80]	; 0x50
 8004656:	e031      	b.n	80046bc <HAL_RCC_OscConfig+0x530>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10c      	bne.n	800467a <HAL_RCC_OscConfig+0x4ee>
 8004660:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004664:	4b69      	ldr	r3, [pc, #420]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004666:	496b      	ldr	r1, [pc, #428]	; (8004814 <HAL_RCC_OscConfig+0x688>)
 8004668:	400a      	ands	r2, r1
 800466a:	651a      	str	r2, [r3, #80]	; 0x50
 800466c:	4b67      	ldr	r3, [pc, #412]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800466e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004670:	4b66      	ldr	r3, [pc, #408]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004672:	496a      	ldr	r1, [pc, #424]	; (800481c <HAL_RCC_OscConfig+0x690>)
 8004674:	400a      	ands	r2, r1
 8004676:	651a      	str	r2, [r3, #80]	; 0x50
 8004678:	e020      	b.n	80046bc <HAL_RCC_OscConfig+0x530>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	23a0      	movs	r3, #160	; 0xa0
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	429a      	cmp	r2, r3
 8004684:	d10e      	bne.n	80046a4 <HAL_RCC_OscConfig+0x518>
 8004686:	4b61      	ldr	r3, [pc, #388]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800468a:	4b60      	ldr	r3, [pc, #384]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	00c9      	lsls	r1, r1, #3
 8004690:	430a      	orrs	r2, r1
 8004692:	651a      	str	r2, [r3, #80]	; 0x50
 8004694:	4b5d      	ldr	r3, [pc, #372]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004698:	4b5c      	ldr	r3, [pc, #368]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	0049      	lsls	r1, r1, #1
 800469e:	430a      	orrs	r2, r1
 80046a0:	651a      	str	r2, [r3, #80]	; 0x50
 80046a2:	e00b      	b.n	80046bc <HAL_RCC_OscConfig+0x530>
 80046a4:	4b59      	ldr	r3, [pc, #356]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80046a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046a8:	4b58      	ldr	r3, [pc, #352]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80046aa:	495a      	ldr	r1, [pc, #360]	; (8004814 <HAL_RCC_OscConfig+0x688>)
 80046ac:	400a      	ands	r2, r1
 80046ae:	651a      	str	r2, [r3, #80]	; 0x50
 80046b0:	4b56      	ldr	r3, [pc, #344]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80046b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046b4:	4b55      	ldr	r3, [pc, #340]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80046b6:	4959      	ldr	r1, [pc, #356]	; (800481c <HAL_RCC_OscConfig+0x690>)
 80046b8:	400a      	ands	r2, r1
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c4:	f7fe fbce 	bl	8002e64 <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046cc:	e009      	b.n	80046e2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fe fbc9 	bl	8002e64 <HAL_GetTick>
 80046d2:	0002      	movs	r2, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	4a51      	ldr	r2, [pc, #324]	; (8004820 <HAL_RCC_OscConfig+0x694>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0ca      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e2:	4b4a      	ldr	r3, [pc, #296]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80046e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4013      	ands	r3, r2
 80046ec:	d0ef      	beq.n	80046ce <HAL_RCC_OscConfig+0x542>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f0:	f7fe fbb8 	bl	8002e64 <HAL_GetTick>
 80046f4:	0003      	movs	r3, r0
 80046f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046f8:	e009      	b.n	800470e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fe fbb3 	bl	8002e64 <HAL_GetTick>
 80046fe:	0002      	movs	r2, r0
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	4a46      	ldr	r2, [pc, #280]	; (8004820 <HAL_RCC_OscConfig+0x694>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0b4      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800470e:	4b3f      	ldr	r3, [pc, #252]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4013      	ands	r3, r2
 8004718:	d1ef      	bne.n	80046fa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800471a:	2323      	movs	r3, #35	; 0x23
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004728:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800472a:	493e      	ldr	r1, [pc, #248]	; (8004824 <HAL_RCC_OscConfig+0x698>)
 800472c:	400a      	ands	r2, r1
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d100      	bne.n	800473a <HAL_RCC_OscConfig+0x5ae>
 8004738:	e09d      	b.n	8004876 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d100      	bne.n	8004742 <HAL_RCC_OscConfig+0x5b6>
 8004740:	e076      	b.n	8004830 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b02      	cmp	r3, #2
 8004748:	d145      	bne.n	80047d6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004750:	4935      	ldr	r1, [pc, #212]	; (8004828 <HAL_RCC_OscConfig+0x69c>)
 8004752:	400a      	ands	r2, r1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fe fb85 	bl	8002e64 <HAL_GetTick>
 800475a:	0003      	movs	r3, r0
 800475c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004760:	f7fe fb80 	bl	8002e64 <HAL_GetTick>
 8004764:	0002      	movs	r2, r0
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e082      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004772:	4b26      	ldr	r3, [pc, #152]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	049b      	lsls	r3, r3, #18
 800477a:	4013      	ands	r3, r2
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4a2a      	ldr	r2, [pc, #168]	; (800482c <HAL_RCC_OscConfig+0x6a0>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	431a      	orrs	r2, r3
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_RCC_OscConfig+0x680>)
 800479a:	430a      	orrs	r2, r1
 800479c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479e:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	0449      	lsls	r1, r1, #17
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe fb5a 	bl	8002e64 <HAL_GetTick>
 80047b0:	0003      	movs	r3, r0
 80047b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe fb55 	bl	8002e64 <HAL_GetTick>
 80047ba:	0002      	movs	r2, r0
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e057      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047c8:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	049b      	lsls	r3, r3, #18
 80047d0:	4013      	ands	r3, r2
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x62a>
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <HAL_RCC_OscConfig+0x680>)
 80047dc:	4912      	ldr	r1, [pc, #72]	; (8004828 <HAL_RCC_OscConfig+0x69c>)
 80047de:	400a      	ands	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fe fb3f 	bl	8002e64 <HAL_GetTick>
 80047e6:	0003      	movs	r3, r0
 80047e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fe fb3a 	bl	8002e64 <HAL_GetTick>
 80047f0:	0002      	movs	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e03c      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047fe:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_OscConfig+0x680>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	049b      	lsls	r3, r3, #18
 8004806:	4013      	ands	r3, r2
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x660>
 800480a:	e034      	b.n	8004876 <HAL_RCC_OscConfig+0x6ea>
 800480c:	40021000 	.word	0x40021000
 8004810:	ffff1fff 	.word	0xffff1fff
 8004814:	fffffeff 	.word	0xfffffeff
 8004818:	40007000 	.word	0x40007000
 800481c:	fffffbff 	.word	0xfffffbff
 8004820:	00001388 	.word	0x00001388
 8004824:	efffffff 	.word	0xefffffff
 8004828:	feffffff 	.word	0xfeffffff
 800482c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <HAL_RCC_OscConfig+0x6f4>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	025b      	lsls	r3, r3, #9
 8004848:	401a      	ands	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	429a      	cmp	r2, r3
 8004850:	d10f      	bne.n	8004872 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	23f0      	movs	r3, #240	; 0xf0
 8004856:	039b      	lsls	r3, r3, #14
 8004858:	401a      	ands	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	23c0      	movs	r3, #192	; 0xc0
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	401a      	ands	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	b00a      	add	sp, #40	; 0x28
 800487e:	bdb0      	pop	{r4, r5, r7, pc}
 8004880:	40021000 	.word	0x40021000

08004884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b5b0      	push	{r4, r5, r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e128      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b96      	ldr	r3, [pc, #600]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2201      	movs	r2, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d91e      	bls.n	80048e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b93      	ldr	r3, [pc, #588]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2201      	movs	r2, #1
 80048ac:	4393      	bics	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	4b90      	ldr	r3, [pc, #576]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048b8:	f7fe fad4 	bl	8002e64 <HAL_GetTick>
 80048bc:	0003      	movs	r3, r0
 80048be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c0:	e009      	b.n	80048d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c2:	f7fe facf 	bl	8002e64 <HAL_GetTick>
 80048c6:	0002      	movs	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	4a8a      	ldr	r2, [pc, #552]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e109      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b87      	ldr	r3, [pc, #540]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d1ee      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2202      	movs	r2, #2
 80048ea:	4013      	ands	r3, r2
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ee:	4b83      	ldr	r3, [pc, #524]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	22f0      	movs	r2, #240	; 0xf0
 80048f4:	4393      	bics	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	4b7f      	ldr	r3, [pc, #508]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 80048fe:	430a      	orrs	r2, r1
 8004900:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
 800490a:	d100      	bne.n	800490e <HAL_RCC_ClockConfig+0x8a>
 800490c:	e089      	b.n	8004a22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004916:	4b79      	ldr	r3, [pc, #484]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	029b      	lsls	r3, r3, #10
 800491e:	4013      	ands	r3, r2
 8004920:	d120      	bne.n	8004964 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0e1      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800492e:	4b73      	ldr	r3, [pc, #460]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	049b      	lsls	r3, r3, #18
 8004936:	4013      	ands	r3, r2
 8004938:	d114      	bne.n	8004964 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0d5      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004946:	4b6d      	ldr	r3, [pc, #436]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2204      	movs	r2, #4
 800494c:	4013      	ands	r3, r2
 800494e:	d109      	bne.n	8004964 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0ca      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004954:	4b69      	ldr	r3, [pc, #420]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4013      	ands	r3, r2
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0c2      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004964:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2203      	movs	r2, #3
 800496a:	4393      	bics	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4b62      	ldr	r3, [pc, #392]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004978:	f7fe fa74 	bl	8002e64 <HAL_GetTick>
 800497c:	0003      	movs	r3, r0
 800497e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d111      	bne.n	80049ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004988:	e009      	b.n	800499e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498a:	f7fe fa6b 	bl	8002e64 <HAL_GetTick>
 800498e:	0002      	movs	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	4a58      	ldr	r2, [pc, #352]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0a5      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800499e:	4b57      	ldr	r3, [pc, #348]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	220c      	movs	r2, #12
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d1ef      	bne.n	800498a <HAL_RCC_ClockConfig+0x106>
 80049aa:	e03a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d111      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049b4:	e009      	b.n	80049ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b6:	f7fe fa55 	bl	8002e64 <HAL_GetTick>
 80049ba:	0002      	movs	r2, r0
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	4a4d      	ldr	r2, [pc, #308]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e08f      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ca:	4b4c      	ldr	r3, [pc, #304]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	220c      	movs	r2, #12
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	d1ef      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x132>
 80049d6:	e024      	b.n	8004a22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d11b      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e0:	e009      	b.n	80049f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e2:	f7fe fa3f 	bl	8002e64 <HAL_GetTick>
 80049e6:	0002      	movs	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	4a42      	ldr	r2, [pc, #264]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e079      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	220c      	movs	r2, #12
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d1ef      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x15e>
 8004a02:	e00e      	b.n	8004a22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fe fa2e 	bl	8002e64 <HAL_GetTick>
 8004a08:	0002      	movs	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e068      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a18:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	220c      	movs	r2, #12
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a22:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2201      	movs	r2, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d21e      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a30:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4393      	bics	r3, r2
 8004a38:	0019      	movs	r1, r3
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a42:	f7fe fa0f 	bl	8002e64 <HAL_GetTick>
 8004a46:	0003      	movs	r3, r0
 8004a48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	e009      	b.n	8004a60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4c:	f7fe fa0a 	bl	8002e64 <HAL_GetTick>
 8004a50:	0002      	movs	r2, r0
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <HAL_RCC_ClockConfig+0x274>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e044      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a60:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCC_ClockConfig+0x270>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2204      	movs	r2, #4
 8004a74:	4013      	ands	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <HAL_RCC_ClockConfig+0x27c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2208      	movs	r2, #8
 8004a92:	4013      	ands	r3, r2
 8004a94:	d00a      	beq.n	8004aac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a96:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <HAL_RCC_ClockConfig+0x280>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00da      	lsls	r2, r3, #3
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aac:	f000 f832 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004ab0:	0001      	movs	r1, r0
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCC_ClockConfig+0x278>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	220f      	movs	r2, #15
 8004aba:	4013      	ands	r3, r2
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <HAL_RCC_ClockConfig+0x284>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	000a      	movs	r2, r1
 8004ac2:	40da      	lsrs	r2, r3
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_ClockConfig+0x288>)
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ac8:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_RCC_ClockConfig+0x28c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	250b      	movs	r5, #11
 8004ace:	197c      	adds	r4, r7, r5
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7fe f981 	bl	8002dd8 <HAL_InitTick>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ada:	197b      	adds	r3, r7, r5
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ae2:	197b      	adds	r3, r7, r5
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	0018      	movs	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b004      	add	sp, #16
 8004af0:	bdb0      	pop	{r4, r5, r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	40022000 	.word	0x40022000
 8004af8:	00001388 	.word	0x00001388
 8004afc:	40021000 	.word	0x40021000
 8004b00:	fffff8ff 	.word	0xfffff8ff
 8004b04:	ffffc7ff 	.word	0xffffc7ff
 8004b08:	08006350 	.word	0x08006350
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	20000004 	.word	0x20000004

08004b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	b08e      	sub	sp, #56	; 0x38
 8004b18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b1a:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b22:	230c      	movs	r3, #12
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d014      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x40>
 8004b2a:	d900      	bls.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1a>
 8004b2c:	e07b      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x112>
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d002      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x24>
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b36:	e076      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b38:	4b44      	ldr	r3, [pc, #272]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d002      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004b42:	4b43      	ldr	r3, [pc, #268]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004b46:	e07c      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b4c:	e079      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b4e:	4b42      	ldr	r3, [pc, #264]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x144>)
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b52:	e076      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	0c9a      	lsrs	r2, r3, #18
 8004b58:	230f      	movs	r3, #15
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x148>)
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	0d9a      	lsrs	r2, r3, #22
 8004b66:	2303      	movs	r3, #3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x138>)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	2380      	movs	r3, #128	; 0x80
 8004b74:	025b      	lsls	r3, r3, #9
 8004b76:	4013      	ands	r3, r2
 8004b78:	d01a      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	4a35      	ldr	r2, [pc, #212]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x144>)
 8004b84:	2300      	movs	r3, #0
 8004b86:	69b8      	ldr	r0, [r7, #24]
 8004b88:	69f9      	ldr	r1, [r7, #28]
 8004b8a:	f7fb fbab 	bl	80002e4 <__aeabi_lmul>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	000b      	movs	r3, r1
 8004b92:	0010      	movs	r0, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f7fb fb7f 	bl	80002a4 <__aeabi_uldivmod>
 8004ba6:	0002      	movs	r2, r0
 8004ba8:	000b      	movs	r3, r1
 8004baa:	0013      	movs	r3, r2
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
 8004bae:	e037      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x138>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d01a      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	4a23      	ldr	r2, [pc, #140]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	68b8      	ldr	r0, [r7, #8]
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	f7fb fb8b 	bl	80002e4 <__aeabi_lmul>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	000b      	movs	r3, r1
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	603b      	str	r3, [r7, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f7fb fb5f 	bl	80002a4 <__aeabi_uldivmod>
 8004be6:	0002      	movs	r2, r0
 8004be8:	000b      	movs	r3, r1
 8004bea:	0013      	movs	r3, r2
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
 8004bee:	e017      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	0019      	movs	r1, r3
 8004bf8:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x140>)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f7fb fb72 	bl	80002e4 <__aeabi_lmul>
 8004c00:	0002      	movs	r2, r0
 8004c02:	000b      	movs	r3, r1
 8004c04:	0010      	movs	r0, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	001c      	movs	r4, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	001d      	movs	r5, r3
 8004c10:	0022      	movs	r2, r4
 8004c12:	002b      	movs	r3, r5
 8004c14:	f7fb fb46 	bl	80002a4 <__aeabi_uldivmod>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	000b      	movs	r3, r1
 8004c1c:	0013      	movs	r3, r2
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c24:	e00d      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x138>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	0b5b      	lsrs	r3, r3, #13
 8004c2c:	2207      	movs	r2, #7
 8004c2e:	4013      	ands	r3, r2
 8004c30:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	3301      	adds	r3, #1
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	0212      	lsls	r2, r2, #8
 8004c3a:	409a      	lsls	r2, r3
 8004c3c:	0013      	movs	r3, r2
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c40:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b00e      	add	sp, #56	; 0x38
 8004c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	003d0900 	.word	0x003d0900
 8004c54:	00f42400 	.word	0x00f42400
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	08006368 	.word	0x08006368

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	20000000 	.word	0x20000000

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff2 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c7c:	0001      	movs	r1, r0
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	2207      	movs	r2, #7
 8004c86:	4013      	ands	r3, r2
 8004c88:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c8a:	5cd3      	ldrb	r3, [r2, r3]
 8004c8c:	40d9      	lsrs	r1, r3
 8004c8e:	000b      	movs	r3, r1
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	08006360 	.word	0x08006360

08004ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca4:	f7ff ffdc 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004ca8:	0001      	movs	r1, r0
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	0adb      	lsrs	r3, r3, #11
 8004cb0:	2207      	movs	r2, #7
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	40d9      	lsrs	r1, r3
 8004cba:	000b      	movs	r3, r1
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	08006360 	.word	0x08006360

08004ccc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004cd4:	2017      	movs	r0, #23
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d100      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004ce6:	e0c7      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce8:	4b84      	ldr	r3, [pc, #528]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	055b      	lsls	r3, r3, #21
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf4:	4b81      	ldr	r3, [pc, #516]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf8:	4b80      	ldr	r3, [pc, #512]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	0549      	lsls	r1, r1, #21
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004d02:	183b      	adds	r3, r7, r0
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	4b7d      	ldr	r3, [pc, #500]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4013      	ands	r3, r2
 8004d12:	d11a      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d14:	4b7a      	ldr	r3, [pc, #488]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b79      	ldr	r3, [pc, #484]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	0049      	lsls	r1, r1, #1
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d22:	f7fe f89f 	bl	8002e64 <HAL_GetTick>
 8004d26:	0003      	movs	r3, r0
 8004d28:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2a:	e008      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2c:	f7fe f89a 	bl	8002e64 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0d9      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3e:	4b70      	ldr	r3, [pc, #448]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d4a:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	23c0      	movs	r3, #192	; 0xc0
 8004d50:	039b      	lsls	r3, r3, #14
 8004d52:	4013      	ands	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	23c0      	movs	r3, #192	; 0xc0
 8004d5c:	039b      	lsls	r3, r3, #14
 8004d5e:	4013      	ands	r3, r2
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d013      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	23c0      	movs	r3, #192	; 0xc0
 8004d6c:	029b      	lsls	r3, r3, #10
 8004d6e:	401a      	ands	r2, r3
 8004d70:	23c0      	movs	r3, #192	; 0xc0
 8004d72:	029b      	lsls	r3, r3, #10
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d10a      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d78:	4b60      	ldr	r3, [pc, #384]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	029b      	lsls	r3, r3, #10
 8004d80:	401a      	ands	r2, r3
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d101      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0b1      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d8e:	4b5b      	ldr	r3, [pc, #364]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d92:	23c0      	movs	r3, #192	; 0xc0
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	4013      	ands	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d03b      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	23c0      	movs	r3, #192	; 0xc0
 8004da6:	029b      	lsls	r3, r3, #10
 8004da8:	4013      	ands	r3, r2
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d033      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2220      	movs	r2, #32
 8004db6:	4013      	ands	r3, r2
 8004db8:	d02e      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004dba:	4b50      	ldr	r3, [pc, #320]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	4a51      	ldr	r2, [pc, #324]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dc4:	4b4d      	ldr	r3, [pc, #308]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc8:	4b4c      	ldr	r3, [pc, #304]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	0309      	lsls	r1, r1, #12
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd2:	4b4a      	ldr	r3, [pc, #296]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd6:	4b49      	ldr	r3, [pc, #292]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004dd8:	494b      	ldr	r1, [pc, #300]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004dde:	4b47      	ldr	r3, [pc, #284]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4013      	ands	r3, r2
 8004dec:	d014      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fe f839 	bl	8002e64 <HAL_GetTick>
 8004df2:	0003      	movs	r3, r0
 8004df4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004df6:	e009      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fe f834 	bl	8002e64 <HAL_GetTick>
 8004dfc:	0002      	movs	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	4a42      	ldr	r2, [pc, #264]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e072      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e0c:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4013      	ands	r3, r2
 8004e16:	d0ef      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	23c0      	movs	r3, #192	; 0xc0
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	23c0      	movs	r3, #192	; 0xc0
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004e34:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a35      	ldr	r2, [pc, #212]	; (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	23c0      	movs	r3, #192	; 0xc0
 8004e44:	039b      	lsls	r3, r3, #14
 8004e46:	401a      	ands	r2, r3
 8004e48:	4b2c      	ldr	r3, [pc, #176]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	23c0      	movs	r3, #192	; 0xc0
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	4b27      	ldr	r3, [pc, #156]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e62:	2317      	movs	r3, #23
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e70:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e72:	4928      	ldr	r1, [pc, #160]	; (8004f14 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	220c      	movs	r2, #12
 8004e88:	4393      	bics	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004edc:	4b07      	ldr	r3, [pc, #28]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee0:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	4b04      	ldr	r3, [pc, #16]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b006      	add	sp, #24
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40007000 	.word	0x40007000
 8004f04:	fffcffff 	.word	0xfffcffff
 8004f08:	fff7ffff 	.word	0xfff7ffff
 8004f0c:	00001388 	.word	0x00001388
 8004f10:	ffcfffff 	.word	0xffcfffff
 8004f14:	efffffff 	.word	0xefffffff
 8004f18:	fffff3ff 	.word	0xfffff3ff
 8004f1c:	ffffcfff 	.word	0xffffcfff
 8004f20:	fff3ffff 	.word	0xfff3ffff

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e032      	b.n	8004f9c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2239      	movs	r2, #57	; 0x39
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2238      	movs	r2, #56	; 0x38
 8004f46:	2100      	movs	r1, #0
 8004f48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f7fc fccb 	bl	80018e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2239      	movs	r2, #57	; 0x39
 8004f56:	2102      	movs	r1, #2
 8004f58:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	0019      	movs	r1, r3
 8004f64:	0010      	movs	r0, r2
 8004f66:	f000 fa45 	bl	80053f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	223e      	movs	r2, #62	; 0x3e
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	223a      	movs	r2, #58	; 0x3a
 8004f76:	2101      	movs	r1, #1
 8004f78:	5499      	strb	r1, [r3, r2]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	223b      	movs	r2, #59	; 0x3b
 8004f7e:	2101      	movs	r1, #1
 8004f80:	5499      	strb	r1, [r3, r2]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	223c      	movs	r2, #60	; 0x3c
 8004f86:	2101      	movs	r1, #1
 8004f88:	5499      	strb	r1, [r3, r2]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	223d      	movs	r2, #61	; 0x3d
 8004f8e:	2101      	movs	r1, #1
 8004f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2239      	movs	r2, #57	; 0x39
 8004f96:	2101      	movs	r1, #1
 8004f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2239      	movs	r2, #57	; 0x39
 8004fb0:	5c9b      	ldrb	r3, [r3, r2]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e036      	b.n	800502a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2239      	movs	r2, #57	; 0x39
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2101      	movs	r1, #1
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	05db      	lsls	r3, r3, #23
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x50>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <HAL_TIM_Base_Start_IT+0x90>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x50>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <HAL_TIM_Base_Start_IT+0x94>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d111      	bne.n	8005018 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2207      	movs	r2, #7
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d010      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2101      	movs	r1, #1
 8005012:	430a      	orrs	r2, r1
 8005014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e007      	b.n	8005028 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	40010800 	.word	0x40010800
 8005038:	40011400 	.word	0x40011400

0800503c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2202      	movs	r2, #2
 800504c:	4013      	ands	r3, r2
 800504e:	2b02      	cmp	r3, #2
 8005050:	d124      	bne.n	800509c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2202      	movs	r2, #2
 800505a:	4013      	ands	r3, r2
 800505c:	2b02      	cmp	r3, #2
 800505e:	d11d      	bne.n	800509c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2203      	movs	r2, #3
 8005066:	4252      	negs	r2, r2
 8005068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2203      	movs	r2, #3
 8005078:	4013      	ands	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	0018      	movs	r0, r3
 8005080:	f000 f9a0 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8005084:	e007      	b.n	8005096 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 f993 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0018      	movs	r0, r3
 8005092:	f000 f99f 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2204      	movs	r2, #4
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d125      	bne.n	80050f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2204      	movs	r2, #4
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d11e      	bne.n	80050f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2205      	movs	r2, #5
 80050be:	4252      	negs	r2, r2
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	23c0      	movs	r3, #192	; 0xc0
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4013      	ands	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f973 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 80050de:	e007      	b.n	80050f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	0018      	movs	r0, r3
 80050e4:	f000 f966 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f972 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2208      	movs	r2, #8
 80050fe:	4013      	ands	r3, r2
 8005100:	2b08      	cmp	r3, #8
 8005102:	d124      	bne.n	800514e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2208      	movs	r2, #8
 800510c:	4013      	ands	r3, r2
 800510e:	2b08      	cmp	r3, #8
 8005110:	d11d      	bne.n	800514e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2209      	movs	r2, #9
 8005118:	4252      	negs	r2, r2
 800511a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2204      	movs	r2, #4
 8005120:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	2203      	movs	r2, #3
 800512a:	4013      	ands	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 f947 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8005136:	e007      	b.n	8005148 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0018      	movs	r0, r3
 800513c:	f000 f93a 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f000 f946 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2210      	movs	r2, #16
 8005156:	4013      	ands	r3, r2
 8005158:	2b10      	cmp	r3, #16
 800515a:	d125      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2210      	movs	r2, #16
 8005164:	4013      	ands	r3, r2
 8005166:	2b10      	cmp	r3, #16
 8005168:	d11e      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2211      	movs	r2, #17
 8005170:	4252      	negs	r2, r2
 8005172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2208      	movs	r2, #8
 8005178:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	23c0      	movs	r3, #192	; 0xc0
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4013      	ands	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f91a 	bl	80053c4 <HAL_TIM_IC_CaptureCallback>
 8005190:	e007      	b.n	80051a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0018      	movs	r0, r3
 8005196:	f000 f90d 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0018      	movs	r0, r3
 800519e:	f000 f919 	bl	80053d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d10f      	bne.n	80051d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	4013      	ands	r3, r2
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d108      	bne.n	80051d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2202      	movs	r2, #2
 80051ca:	4252      	negs	r2, r2
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7fc fba9 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2240      	movs	r2, #64	; 0x40
 80051de:	4013      	ands	r3, r2
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d10f      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2240      	movs	r2, #64	; 0x40
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d108      	bne.n	8005204 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2241      	movs	r2, #65	; 0x41
 80051f8:	4252      	negs	r2, r2
 80051fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f8f0 	bl	80053e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b002      	add	sp, #8
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005216:	230f      	movs	r3, #15
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2238      	movs	r2, #56	; 0x38
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIM_ConfigClockSource+0x20>
 8005228:	2302      	movs	r3, #2
 800522a:	e0bc      	b.n	80053a6 <HAL_TIM_ConfigClockSource+0x19a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2238      	movs	r2, #56	; 0x38
 8005230:	2101      	movs	r1, #1
 8005232:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2239      	movs	r2, #57	; 0x39
 8005238:	2102      	movs	r1, #2
 800523a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2277      	movs	r2, #119	; 0x77
 8005248:	4393      	bics	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4a58      	ldr	r2, [pc, #352]	; (80053b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005250:	4013      	ands	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2280      	movs	r2, #128	; 0x80
 8005262:	0192      	lsls	r2, r2, #6
 8005264:	4293      	cmp	r3, r2
 8005266:	d040      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0xde>
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	0192      	lsls	r2, r2, #6
 800526c:	4293      	cmp	r3, r2
 800526e:	d900      	bls.n	8005272 <HAL_TIM_ConfigClockSource+0x66>
 8005270:	e088      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 8005272:	2280      	movs	r2, #128	; 0x80
 8005274:	0152      	lsls	r2, r2, #5
 8005276:	4293      	cmp	r3, r2
 8005278:	d100      	bne.n	800527c <HAL_TIM_ConfigClockSource+0x70>
 800527a:	e088      	b.n	800538e <HAL_TIM_ConfigClockSource+0x182>
 800527c:	2280      	movs	r2, #128	; 0x80
 800527e:	0152      	lsls	r2, r2, #5
 8005280:	4293      	cmp	r3, r2
 8005282:	d900      	bls.n	8005286 <HAL_TIM_ConfigClockSource+0x7a>
 8005284:	e07e      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 8005286:	2b70      	cmp	r3, #112	; 0x70
 8005288:	d018      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xb0>
 800528a:	d900      	bls.n	800528e <HAL_TIM_ConfigClockSource+0x82>
 800528c:	e07a      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 800528e:	2b60      	cmp	r3, #96	; 0x60
 8005290:	d04f      	beq.n	8005332 <HAL_TIM_ConfigClockSource+0x126>
 8005292:	d900      	bls.n	8005296 <HAL_TIM_ConfigClockSource+0x8a>
 8005294:	e076      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 8005296:	2b50      	cmp	r3, #80	; 0x50
 8005298:	d03b      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x106>
 800529a:	d900      	bls.n	800529e <HAL_TIM_ConfigClockSource+0x92>
 800529c:	e072      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d057      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x146>
 80052a2:	d900      	bls.n	80052a6 <HAL_TIM_ConfigClockSource+0x9a>
 80052a4:	e06e      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	d063      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x166>
 80052aa:	d86b      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d060      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x166>
 80052b0:	d868      	bhi.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d05d      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x166>
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d05b      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x166>
 80052ba:	e063      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f000 f960 	bl	8005590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2277      	movs	r2, #119	; 0x77
 80052dc:	4313      	orrs	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
      break;
 80052e8:	e052      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f000 f949 	bl	8005590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	01c9      	lsls	r1, r1, #7
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
      break;
 8005310:	e03e      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	001a      	movs	r2, r3
 8005320:	f000 f8bc 	bl	800549c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2150      	movs	r1, #80	; 0x50
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f916 	bl	800555c <TIM_ITRx_SetConfig>
      break;
 8005330:	e02e      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6818      	ldr	r0, [r3, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	001a      	movs	r2, r3
 8005340:	f000 f8da 	bl	80054f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2160      	movs	r1, #96	; 0x60
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f906 	bl	800555c <TIM_ITRx_SetConfig>
      break;
 8005350:	e01e      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	001a      	movs	r2, r3
 8005360:	f000 f89c 	bl	800549c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2140      	movs	r1, #64	; 0x40
 800536a:	0018      	movs	r0, r3
 800536c:	f000 f8f6 	bl	800555c <TIM_ITRx_SetConfig>
      break;
 8005370:	e00e      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	0019      	movs	r1, r3
 800537c:	0010      	movs	r0, r2
 800537e:	f000 f8ed 	bl	800555c <TIM_ITRx_SetConfig>
      break;
 8005382:	e005      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005384:	230f      	movs	r3, #15
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800538e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2239      	movs	r2, #57	; 0x39
 8005394:	2101      	movs	r1, #1
 8005396:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2238      	movs	r2, #56	; 0x38
 800539c:	2100      	movs	r1, #0
 800539e:	5499      	strb	r1, [r3, r2]

  return status;
 80053a0:	230f      	movs	r3, #15
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	781b      	ldrb	r3, [r3, #0]
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b004      	add	sp, #16
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	ffff00ff 	.word	0xffff00ff

080053b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b002      	add	sp, #8
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b002      	add	sp, #8
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	05db      	lsls	r3, r3, #23
 800540a:	429a      	cmp	r2, r3
 800540c:	d007      	beq.n	800541e <TIM_Base_SetConfig+0x2a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <TIM_Base_SetConfig+0x9c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_Base_SetConfig+0x2a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <TIM_Base_SetConfig+0xa0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2270      	movs	r2, #112	; 0x70
 8005422:	4393      	bics	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	05db      	lsls	r3, r3, #23
 8005436:	429a      	cmp	r2, r3
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0x56>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <TIM_Base_SetConfig+0x9c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0x56>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <TIM_Base_SetConfig+0xa0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a12      	ldr	r2, [pc, #72]	; (8005498 <TIM_Base_SetConfig+0xa4>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2280      	movs	r2, #128	; 0x80
 8005460:	4393      	bics	r3, r2
 8005462:	001a      	movs	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	615a      	str	r2, [r3, #20]
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40010800 	.word	0x40010800
 8005494:	40011400 	.word	0x40011400
 8005498:	fffffcff 	.word	0xfffffcff

0800549c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	2201      	movs	r2, #1
 80054b4:	4393      	bics	r3, r2
 80054b6:	001a      	movs	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	22f0      	movs	r2, #240	; 0xf0
 80054c6:	4393      	bics	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	220a      	movs	r2, #10
 80054d8:	4393      	bics	r3, r2
 80054da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	621a      	str	r2, [r3, #32]
}
 80054f0:	46c0      	nop			; (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b006      	add	sp, #24
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	2210      	movs	r2, #16
 800550a:	4393      	bics	r3, r2
 800550c:	001a      	movs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <TIM_TI2_ConfigInputStage+0x60>)
 8005522:	4013      	ands	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	22a0      	movs	r2, #160	; 0xa0
 8005534:	4393      	bics	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b006      	add	sp, #24
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	ffff0fff 	.word	0xffff0fff

0800555c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2270      	movs	r2, #112	; 0x70
 8005570:	4393      	bics	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	2207      	movs	r2, #7
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	609a      	str	r2, [r3, #8]
}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	46bd      	mov	sp, r7
 800558a:	b004      	add	sp, #16
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4a09      	ldr	r2, [pc, #36]	; (80055cc <TIM_ETR_SetConfig+0x3c>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b006      	add	sp, #24
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	ffff00ff 	.word	0xffff00ff

080055d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2238      	movs	r2, #56	; 0x38
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e042      	b.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2238      	movs	r2, #56	; 0x38
 80055ec:	2101      	movs	r1, #1
 80055ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2239      	movs	r2, #57	; 0x39
 80055f4:	2102      	movs	r1, #2
 80055f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2270      	movs	r2, #112	; 0x70
 800560c:	4393      	bics	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	05db      	lsls	r3, r3, #23
 800562a:	429a      	cmp	r2, r3
 800562c:	d009      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0f      	ldr	r2, [pc, #60]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10c      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	4393      	bics	r3, r2
 8005648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2239      	movs	r2, #57	; 0x39
 8005660:	2101      	movs	r1, #1
 8005662:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2238      	movs	r2, #56	; 0x38
 8005668:	2100      	movs	r1, #0
 800566a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b004      	add	sp, #16
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	40010800 	.word	0x40010800
 800567c:	40011400 	.word	0x40011400

08005680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e044      	b.n	800571c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2278      	movs	r2, #120	; 0x78
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fc f995 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2224      	movs	r2, #36	; 0x24
 80056ae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2101      	movs	r1, #1
 80056bc:	438a      	bics	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f8d0 	bl	8005868 <UART_SetConfig>
 80056c8:	0003      	movs	r3, r0
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e024      	b.n	800571c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 fb0d 	bl	8005cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	490d      	ldr	r1, [pc, #52]	; (8005724 <HAL_UART_Init+0xa4>)
 80056ee:	400a      	ands	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	212a      	movs	r1, #42	; 0x2a
 80056fe:	438a      	bics	r2, r1
 8005700:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2101      	movs	r1, #1
 800570e:	430a      	orrs	r2, r1
 8005710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f000 fba5 	bl	8005e64 <UART_CheckIdleState>
 800571a:	0003      	movs	r3, r0
}
 800571c:	0018      	movs	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}
 8005724:	ffffb7ff 	.word	0xffffb7ff

08005728 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	1dbb      	adds	r3, r7, #6
 8005736:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573c:	2b20      	cmp	r3, #32
 800573e:	d000      	beq.n	8005742 <HAL_UART_Transmit+0x1a>
 8005740:	e08c      	b.n	800585c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_UART_Transmit+0x28>
 8005748:	1dbb      	adds	r3, r7, #6
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e084      	b.n	800585e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	015b      	lsls	r3, r3, #5
 800575c:	429a      	cmp	r2, r3
 800575e:	d109      	bne.n	8005774 <HAL_UART_Transmit+0x4c>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2201      	movs	r2, #1
 800576c:	4013      	ands	r3, r2
 800576e:	d001      	beq.n	8005774 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e074      	b.n	800585e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2284      	movs	r2, #132	; 0x84
 8005778:	2100      	movs	r1, #0
 800577a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2221      	movs	r2, #33	; 0x21
 8005780:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005782:	f7fd fb6f 	bl	8002e64 <HAL_GetTick>
 8005786:	0003      	movs	r3, r0
 8005788:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1dba      	adds	r2, r7, #6
 800578e:	2150      	movs	r1, #80	; 0x50
 8005790:	8812      	ldrh	r2, [r2, #0]
 8005792:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	1dba      	adds	r2, r7, #6
 8005798:	2152      	movs	r1, #82	; 0x52
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	015b      	lsls	r3, r3, #5
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d108      	bne.n	80057bc <HAL_UART_Transmit+0x94>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	e003      	b.n	80057c4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057c4:	e02f      	b.n	8005826 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	0013      	movs	r3, r2
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	f000 fbee 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 80057d8:	1e03      	subs	r3, r0, #0
 80057da:	d004      	beq.n	80057e6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e03b      	b.n	800585e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	001a      	movs	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	05d2      	lsls	r2, r2, #23
 80057f8:	0dd2      	lsrs	r2, r2, #23
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	3302      	adds	r3, #2
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e007      	b.n	8005814 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	3301      	adds	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2252      	movs	r2, #82	; 0x52
 8005818:	5a9b      	ldrh	r3, [r3, r2]
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b299      	uxth	r1, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2252      	movs	r2, #82	; 0x52
 8005824:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2252      	movs	r2, #82	; 0x52
 800582a:	5a9b      	ldrh	r3, [r3, r2]
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1c9      	bne.n	80057c6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	0013      	movs	r3, r2
 800583c:	2200      	movs	r2, #0
 800583e:	2140      	movs	r1, #64	; 0x40
 8005840:	f000 fbb8 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005844:	1e03      	subs	r3, r0, #0
 8005846:	d004      	beq.n	8005852 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e005      	b.n	800585e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	0018      	movs	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	b008      	add	sp, #32
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af00      	add	r7, sp, #0
 800586e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005870:	231a      	movs	r3, #26
 8005872:	2218      	movs	r2, #24
 8005874:	189b      	adds	r3, r3, r2
 8005876:	19db      	adds	r3, r3, r7
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	431a      	orrs	r2, r3
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	431a      	orrs	r2, r3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	4313      	orrs	r3, r2
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4ab4      	ldr	r2, [pc, #720]	; (8005b6c <UART_SetConfig+0x304>)
 800589c:	4013      	ands	r3, r2
 800589e:	0019      	movs	r1, r3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4aaf      	ldr	r2, [pc, #700]	; (8005b70 <UART_SetConfig+0x308>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	0019      	movs	r1, r3
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4aa9      	ldr	r2, [pc, #676]	; (8005b74 <UART_SetConfig+0x30c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058d8:	4313      	orrs	r3, r2
 80058da:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	4aa5      	ldr	r2, [pc, #660]	; (8005b78 <UART_SetConfig+0x310>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	0019      	movs	r1, r3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4aa1      	ldr	r2, [pc, #644]	; (8005b7c <UART_SetConfig+0x314>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d131      	bne.n	8005960 <UART_SetConfig+0xf8>
 80058fc:	4ba0      	ldr	r3, [pc, #640]	; (8005b80 <UART_SetConfig+0x318>)
 80058fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005900:	220c      	movs	r2, #12
 8005902:	4013      	ands	r3, r2
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d01d      	beq.n	8005944 <UART_SetConfig+0xdc>
 8005908:	d823      	bhi.n	8005952 <UART_SetConfig+0xea>
 800590a:	2b08      	cmp	r3, #8
 800590c:	d00c      	beq.n	8005928 <UART_SetConfig+0xc0>
 800590e:	d820      	bhi.n	8005952 <UART_SetConfig+0xea>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <UART_SetConfig+0xb2>
 8005914:	2b04      	cmp	r3, #4
 8005916:	d00e      	beq.n	8005936 <UART_SetConfig+0xce>
 8005918:	e01b      	b.n	8005952 <UART_SetConfig+0xea>
 800591a:	231b      	movs	r3, #27
 800591c:	2218      	movs	r2, #24
 800591e:	189b      	adds	r3, r3, r2
 8005920:	19db      	adds	r3, r3, r7
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e065      	b.n	80059f4 <UART_SetConfig+0x18c>
 8005928:	231b      	movs	r3, #27
 800592a:	2218      	movs	r2, #24
 800592c:	189b      	adds	r3, r3, r2
 800592e:	19db      	adds	r3, r3, r7
 8005930:	2202      	movs	r2, #2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e05e      	b.n	80059f4 <UART_SetConfig+0x18c>
 8005936:	231b      	movs	r3, #27
 8005938:	2218      	movs	r2, #24
 800593a:	189b      	adds	r3, r3, r2
 800593c:	19db      	adds	r3, r3, r7
 800593e:	2204      	movs	r2, #4
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	e057      	b.n	80059f4 <UART_SetConfig+0x18c>
 8005944:	231b      	movs	r3, #27
 8005946:	2218      	movs	r2, #24
 8005948:	189b      	adds	r3, r3, r2
 800594a:	19db      	adds	r3, r3, r7
 800594c:	2208      	movs	r2, #8
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e050      	b.n	80059f4 <UART_SetConfig+0x18c>
 8005952:	231b      	movs	r3, #27
 8005954:	2218      	movs	r2, #24
 8005956:	189b      	adds	r3, r3, r2
 8005958:	19db      	adds	r3, r3, r7
 800595a:	2210      	movs	r2, #16
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e049      	b.n	80059f4 <UART_SetConfig+0x18c>
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a83      	ldr	r2, [pc, #524]	; (8005b74 <UART_SetConfig+0x30c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d13e      	bne.n	80059e8 <UART_SetConfig+0x180>
 800596a:	4b85      	ldr	r3, [pc, #532]	; (8005b80 <UART_SetConfig+0x318>)
 800596c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800596e:	23c0      	movs	r3, #192	; 0xc0
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	4013      	ands	r3, r2
 8005974:	22c0      	movs	r2, #192	; 0xc0
 8005976:	0112      	lsls	r2, r2, #4
 8005978:	4293      	cmp	r3, r2
 800597a:	d027      	beq.n	80059cc <UART_SetConfig+0x164>
 800597c:	22c0      	movs	r2, #192	; 0xc0
 800597e:	0112      	lsls	r2, r2, #4
 8005980:	4293      	cmp	r3, r2
 8005982:	d82a      	bhi.n	80059da <UART_SetConfig+0x172>
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	0112      	lsls	r2, r2, #4
 8005988:	4293      	cmp	r3, r2
 800598a:	d011      	beq.n	80059b0 <UART_SetConfig+0x148>
 800598c:	2280      	movs	r2, #128	; 0x80
 800598e:	0112      	lsls	r2, r2, #4
 8005990:	4293      	cmp	r3, r2
 8005992:	d822      	bhi.n	80059da <UART_SetConfig+0x172>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <UART_SetConfig+0x13a>
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	00d2      	lsls	r2, r2, #3
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <UART_SetConfig+0x156>
 80059a0:	e01b      	b.n	80059da <UART_SetConfig+0x172>
 80059a2:	231b      	movs	r3, #27
 80059a4:	2218      	movs	r2, #24
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	19db      	adds	r3, r3, r7
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e021      	b.n	80059f4 <UART_SetConfig+0x18c>
 80059b0:	231b      	movs	r3, #27
 80059b2:	2218      	movs	r2, #24
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	2202      	movs	r2, #2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e01a      	b.n	80059f4 <UART_SetConfig+0x18c>
 80059be:	231b      	movs	r3, #27
 80059c0:	2218      	movs	r2, #24
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2204      	movs	r2, #4
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e013      	b.n	80059f4 <UART_SetConfig+0x18c>
 80059cc:	231b      	movs	r3, #27
 80059ce:	2218      	movs	r2, #24
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2208      	movs	r2, #8
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e00c      	b.n	80059f4 <UART_SetConfig+0x18c>
 80059da:	231b      	movs	r3, #27
 80059dc:	2218      	movs	r2, #24
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	19db      	adds	r3, r3, r7
 80059e2:	2210      	movs	r2, #16
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e005      	b.n	80059f4 <UART_SetConfig+0x18c>
 80059e8:	231b      	movs	r3, #27
 80059ea:	2218      	movs	r2, #24
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	19db      	adds	r3, r3, r7
 80059f0:	2210      	movs	r2, #16
 80059f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a5e      	ldr	r2, [pc, #376]	; (8005b74 <UART_SetConfig+0x30c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d000      	beq.n	8005a00 <UART_SetConfig+0x198>
 80059fe:	e084      	b.n	8005b0a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a00:	231b      	movs	r3, #27
 8005a02:	2218      	movs	r2, #24
 8005a04:	189b      	adds	r3, r3, r2
 8005a06:	19db      	adds	r3, r3, r7
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d01d      	beq.n	8005a4a <UART_SetConfig+0x1e2>
 8005a0e:	dc20      	bgt.n	8005a52 <UART_SetConfig+0x1ea>
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d015      	beq.n	8005a40 <UART_SetConfig+0x1d8>
 8005a14:	dc1d      	bgt.n	8005a52 <UART_SetConfig+0x1ea>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <UART_SetConfig+0x1b8>
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d005      	beq.n	8005a2a <UART_SetConfig+0x1c2>
 8005a1e:	e018      	b.n	8005a52 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a20:	f7ff f928 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8005a24:	0003      	movs	r3, r0
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a28:	e01c      	b.n	8005a64 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a2a:	4b55      	ldr	r3, [pc, #340]	; (8005b80 <UART_SetConfig+0x318>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2210      	movs	r2, #16
 8005a30:	4013      	ands	r3, r2
 8005a32:	d002      	beq.n	8005a3a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a34:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <UART_SetConfig+0x31c>)
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a38:	e014      	b.n	8005a64 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8005a3a:	4b53      	ldr	r3, [pc, #332]	; (8005b88 <UART_SetConfig+0x320>)
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a3e:	e011      	b.n	8005a64 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a40:	f7ff f868 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8005a44:	0003      	movs	r3, r0
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a48:	e00c      	b.n	8005a64 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a50:	e008      	b.n	8005a64 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a56:	231a      	movs	r3, #26
 8005a58:	2218      	movs	r2, #24
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	19db      	adds	r3, r3, r7
 8005a5e:	2201      	movs	r2, #1
 8005a60:	701a      	strb	r2, [r3, #0]
        break;
 8005a62:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d100      	bne.n	8005a6c <UART_SetConfig+0x204>
 8005a6a:	e12f      	b.n	8005ccc <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	0013      	movs	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	189b      	adds	r3, r3, r2
 8005a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d305      	bcc.n	8005a88 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d906      	bls.n	8005a96 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8005a88:	231a      	movs	r3, #26
 8005a8a:	2218      	movs	r2, #24
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	19db      	adds	r3, r3, r7
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e11a      	b.n	8005ccc <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	6939      	ldr	r1, [r7, #16]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	000b      	movs	r3, r1
 8005aa4:	0e1b      	lsrs	r3, r3, #24
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	0205      	lsls	r5, r0, #8
 8005aaa:	431d      	orrs	r5, r3
 8005aac:	000b      	movs	r3, r1
 8005aae:	021c      	lsls	r4, r3, #8
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68b8      	ldr	r0, [r7, #8]
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	1900      	adds	r0, r0, r4
 8005ac2:	4169      	adcs	r1, r5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	2300      	movs	r3, #0
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f7fa fbe7 	bl	80002a4 <__aeabi_uldivmod>
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	000b      	movs	r3, r1
 8005ada:	0013      	movs	r3, r2
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae0:	23c0      	movs	r3, #192	; 0xc0
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d309      	bcc.n	8005afc <UART_SetConfig+0x294>
 8005ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	035b      	lsls	r3, r3, #13
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d204      	bcs.n	8005afc <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	e0e7      	b.n	8005ccc <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8005afc:	231a      	movs	r3, #26
 8005afe:	2218      	movs	r2, #24
 8005b00:	189b      	adds	r3, r3, r2
 8005b02:	19db      	adds	r3, r3, r7
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e0e0      	b.n	8005ccc <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d000      	beq.n	8005b18 <UART_SetConfig+0x2b0>
 8005b16:	e082      	b.n	8005c1e <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8005b18:	231b      	movs	r3, #27
 8005b1a:	2218      	movs	r2, #24
 8005b1c:	189b      	adds	r3, r3, r2
 8005b1e:	19db      	adds	r3, r3, r7
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d834      	bhi.n	8005b90 <UART_SetConfig+0x328>
 8005b26:	009a      	lsls	r2, r3, #2
 8005b28:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <UART_SetConfig+0x324>)
 8005b2a:	18d3      	adds	r3, r2, r3
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7ff f8a0 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8005b34:	0003      	movs	r3, r0
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b38:	e033      	b.n	8005ba2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b3a:	f7ff f8b1 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b42:	e02e      	b.n	8005ba2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <UART_SetConfig+0x318>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2210      	movs	r2, #16
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	d002      	beq.n	8005b54 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <UART_SetConfig+0x31c>)
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b52:	e026      	b.n	8005ba2 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8005b54:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <UART_SetConfig+0x320>)
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b58:	e023      	b.n	8005ba2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5a:	f7fe ffdb 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8005b5e:	0003      	movs	r3, r0
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b62:	e01e      	b.n	8005ba2 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b6a:	e01a      	b.n	8005ba2 <UART_SetConfig+0x33a>
 8005b6c:	efff69f3 	.word	0xefff69f3
 8005b70:	ffffcfff 	.word	0xffffcfff
 8005b74:	40004800 	.word	0x40004800
 8005b78:	fffff4ff 	.word	0xfffff4ff
 8005b7c:	40004400 	.word	0x40004400
 8005b80:	40021000 	.word	0x40021000
 8005b84:	003d0900 	.word	0x003d0900
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	08006374 	.word	0x08006374
      default:
        pclk = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b94:	231a      	movs	r3, #26
 8005b96:	2218      	movs	r2, #24
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	19db      	adds	r3, r3, r7
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
        break;
 8005ba0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d100      	bne.n	8005baa <UART_SetConfig+0x342>
 8005ba8:	e090      	b.n	8005ccc <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	005a      	lsls	r2, r3, #1
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	18d2      	adds	r2, r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	0019      	movs	r1, r3
 8005bbc:	0010      	movs	r0, r2
 8005bbe:	f7fa faab 	bl	8000118 <__udivsi3>
 8005bc2:	0003      	movs	r3, r0
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2b0f      	cmp	r3, #15
 8005bca:	d921      	bls.n	8005c10 <UART_SetConfig+0x3a8>
 8005bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	025b      	lsls	r3, r3, #9
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d21c      	bcs.n	8005c10 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	200e      	movs	r0, #14
 8005bdc:	2418      	movs	r4, #24
 8005bde:	1903      	adds	r3, r0, r4
 8005be0:	19db      	adds	r3, r3, r7
 8005be2:	210f      	movs	r1, #15
 8005be4:	438a      	bics	r2, r1
 8005be6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2207      	movs	r2, #7
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	1903      	adds	r3, r0, r4
 8005bf6:	19db      	adds	r3, r3, r7
 8005bf8:	1902      	adds	r2, r0, r4
 8005bfa:	19d2      	adds	r2, r2, r7
 8005bfc:	8812      	ldrh	r2, [r2, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	1902      	adds	r2, r0, r4
 8005c08:	19d2      	adds	r2, r2, r7
 8005c0a:	8812      	ldrh	r2, [r2, #0]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e05d      	b.n	8005ccc <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005c10:	231a      	movs	r3, #26
 8005c12:	2218      	movs	r2, #24
 8005c14:	189b      	adds	r3, r3, r2
 8005c16:	19db      	adds	r3, r3, r7
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e056      	b.n	8005ccc <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1e:	231b      	movs	r3, #27
 8005c20:	2218      	movs	r2, #24
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	19db      	adds	r3, r3, r7
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d822      	bhi.n	8005c72 <UART_SetConfig+0x40a>
 8005c2c:	009a      	lsls	r2, r3, #2
 8005c2e:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <UART_SetConfig+0x484>)
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7ff f81d 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c3e:	e021      	b.n	8005c84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c40:	f7ff f82e 	bl	8004ca0 <HAL_RCC_GetPCLK2Freq>
 8005c44:	0003      	movs	r3, r0
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c48:	e01c      	b.n	8005c84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c4a:	4b29      	ldr	r3, [pc, #164]	; (8005cf0 <UART_SetConfig+0x488>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2210      	movs	r2, #16
 8005c50:	4013      	ands	r3, r2
 8005c52:	d002      	beq.n	8005c5a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c54:	4b27      	ldr	r3, [pc, #156]	; (8005cf4 <UART_SetConfig+0x48c>)
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c58:	e014      	b.n	8005c84 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8005c5a:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <UART_SetConfig+0x490>)
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c5e:	e011      	b.n	8005c84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c60:	f7fe ff58 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8005c64:	0003      	movs	r3, r0
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c68:	e00c      	b.n	8005c84 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	2380      	movs	r3, #128	; 0x80
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c70:	e008      	b.n	8005c84 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c76:	231a      	movs	r3, #26
 8005c78:	2218      	movs	r2, #24
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	19db      	adds	r3, r3, r7
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
        break;
 8005c82:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d020      	beq.n	8005ccc <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	085a      	lsrs	r2, r3, #1
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	18d2      	adds	r2, r2, r3
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	0019      	movs	r1, r3
 8005c9a:	0010      	movs	r0, r2
 8005c9c:	f7fa fa3c 	bl	8000118 <__udivsi3>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	d90a      	bls.n	8005cc0 <UART_SetConfig+0x458>
 8005caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	025b      	lsls	r3, r3, #9
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d205      	bcs.n	8005cc0 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	e005      	b.n	8005ccc <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc0:	231a      	movs	r3, #26
 8005cc2:	2218      	movs	r2, #24
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	19db      	adds	r3, r3, r7
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005cd8:	231a      	movs	r3, #26
 8005cda:	2218      	movs	r2, #24
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	19db      	adds	r3, r3, r7
 8005ce0:	781b      	ldrb	r3, [r3, #0]
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b00e      	add	sp, #56	; 0x38
 8005ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	08006398 	.word	0x08006398
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	003d0900 	.word	0x003d0900
 8005cf8:	00f42400 	.word	0x00f42400

08005cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2201      	movs	r2, #1
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d00b      	beq.n	8005d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a4a      	ldr	r2, [pc, #296]	; (8005e40 <UART_AdvFeatureConfig+0x144>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4a43      	ldr	r2, [pc, #268]	; (8005e44 <UART_AdvFeatureConfig+0x148>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	4a3b      	ldr	r2, [pc, #236]	; (8005e48 <UART_AdvFeatureConfig+0x14c>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	0019      	movs	r1, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2208      	movs	r2, #8
 8005d70:	4013      	ands	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4a34      	ldr	r2, [pc, #208]	; (8005e4c <UART_AdvFeatureConfig+0x150>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2210      	movs	r2, #16
 8005d92:	4013      	ands	r3, r2
 8005d94:	d00b      	beq.n	8005dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a2c      	ldr	r2, [pc, #176]	; (8005e50 <UART_AdvFeatureConfig+0x154>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	0019      	movs	r1, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	2220      	movs	r2, #32
 8005db4:	4013      	ands	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4a25      	ldr	r2, [pc, #148]	; (8005e54 <UART_AdvFeatureConfig+0x158>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2240      	movs	r2, #64	; 0x40
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <UART_AdvFeatureConfig+0x15c>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	0019      	movs	r1, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	035b      	lsls	r3, r3, #13
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d10b      	bne.n	8005e16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <UART_AdvFeatureConfig+0x160>)
 8005e06:	4013      	ands	r3, r2
 8005e08:	0019      	movs	r1, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4a0e      	ldr	r2, [pc, #56]	; (8005e60 <UART_AdvFeatureConfig+0x164>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	0019      	movs	r1, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	fffdffff 	.word	0xfffdffff
 8005e44:	fffeffff 	.word	0xfffeffff
 8005e48:	fffbffff 	.word	0xfffbffff
 8005e4c:	ffff7fff 	.word	0xffff7fff
 8005e50:	ffffefff 	.word	0xffffefff
 8005e54:	ffffdfff 	.word	0xffffdfff
 8005e58:	ffefffff 	.word	0xffefffff
 8005e5c:	ff9fffff 	.word	0xff9fffff
 8005e60:	fff7ffff 	.word	0xfff7ffff

08005e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b092      	sub	sp, #72	; 0x48
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2284      	movs	r2, #132	; 0x84
 8005e70:	2100      	movs	r1, #0
 8005e72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e74:	f7fc fff6 	bl	8002e64 <HAL_GetTick>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2208      	movs	r2, #8
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d12c      	bne.n	8005ee4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	0391      	lsls	r1, r2, #14
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4a46      	ldr	r2, [pc, #280]	; (8005fac <UART_CheckIdleState+0x148>)
 8005e94:	9200      	str	r2, [sp, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f000 f88c 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005e9c:	1e03      	subs	r3, r0, #0
 8005e9e:	d021      	beq.n	8005ee4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ea8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eaa:	2301      	movs	r3, #1
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	f383 8810 	msr	PRIMASK, r3
}
 8005eb4:	46c0      	nop			; (mov r8, r8)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	f383 8810 	msr	PRIMASK, r3
}
 8005ed0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2278      	movs	r2, #120	; 0x78
 8005edc:	2100      	movs	r1, #0
 8005ede:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e05f      	b.n	8005fa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d146      	bne.n	8005f80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef4:	2280      	movs	r2, #128	; 0x80
 8005ef6:	03d1      	lsls	r1, r2, #15
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4a2c      	ldr	r2, [pc, #176]	; (8005fac <UART_CheckIdleState+0x148>)
 8005efc:	9200      	str	r2, [sp, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f000 f858 	bl	8005fb4 <UART_WaitOnFlagUntilTimeout>
 8005f04:	1e03      	subs	r3, r0, #0
 8005f06:	d03b      	beq.n	8005f80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f08:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	2301      	movs	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f383 8810 	msr	PRIMASK, r3
}
 8005f1c:	46c0      	nop			; (mov r8, r8)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4921      	ldr	r1, [pc, #132]	; (8005fb0 <UART_CheckIdleState+0x14c>)
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f383 8810 	msr	PRIMASK, r3
}
 8005f38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30
 8005f44:	2301      	movs	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f383 8810 	msr	PRIMASK, r3
}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	438a      	bics	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	f383 8810 	msr	PRIMASK, r3
}
 8005f6a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2280      	movs	r2, #128	; 0x80
 8005f70:	2120      	movs	r1, #32
 8005f72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2278      	movs	r2, #120	; 0x78
 8005f78:	2100      	movs	r1, #0
 8005f7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e011      	b.n	8005fa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	2120      	movs	r1, #32
 8005f8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2278      	movs	r2, #120	; 0x78
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b010      	add	sp, #64	; 0x40
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	01ffffff 	.word	0x01ffffff
 8005fb0:	fffffedf 	.word	0xfffffedf

08005fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	1dfb      	adds	r3, r7, #7
 8005fc2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc4:	e04b      	b.n	800605e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	d048      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fcc:	f7fc ff4a 	bl	8002e64 <HAL_GetTick>
 8005fd0:	0002      	movs	r2, r0
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d302      	bcc.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e04b      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2204      	movs	r2, #4
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d035      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d111      	bne.n	8006024 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f83c 	bl	8006088 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2284      	movs	r2, #132	; 0x84
 8006014:	2108      	movs	r1, #8
 8006016:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2278      	movs	r2, #120	; 0x78
 800601c:	2100      	movs	r1, #0
 800601e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e02c      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69da      	ldr	r2, [r3, #28]
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	401a      	ands	r2, r3
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	429a      	cmp	r2, r3
 8006036:	d112      	bne.n	800605e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	0112      	lsls	r2, r2, #4
 8006040:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 f81f 	bl	8006088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2284      	movs	r2, #132	; 0x84
 800604e:	2120      	movs	r1, #32
 8006050:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2278      	movs	r2, #120	; 0x78
 8006056:	2100      	movs	r1, #0
 8006058:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e00f      	b.n	800607e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	4013      	ands	r3, r2
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	425a      	negs	r2, r3
 800606e:	4153      	adcs	r3, r2
 8006070:	b2db      	uxtb	r3, r3
 8006072:	001a      	movs	r2, r3
 8006074:	1dfb      	adds	r3, r7, #7
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d0a4      	beq.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	0018      	movs	r0, r3
 8006080:	46bd      	mov	sp, r7
 8006082:	b004      	add	sp, #16
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08e      	sub	sp, #56	; 0x38
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006090:	f3ef 8310 	mrs	r3, PRIMASK
 8006094:	617b      	str	r3, [r7, #20]
  return(result);
 8006096:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	2301      	movs	r3, #1
 800609c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f383 8810 	msr	PRIMASK, r3
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4926      	ldr	r1, [pc, #152]	; (800614c <UART_EndRxTransfer+0xc4>)
 80060b2:	400a      	ands	r2, r1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f383 8810 	msr	PRIMASK, r3
}
 80060c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060c2:	f3ef 8310 	mrs	r3, PRIMASK
 80060c6:	623b      	str	r3, [r7, #32]
  return(result);
 80060c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
 80060cc:	2301      	movs	r3, #1
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	f383 8810 	msr	PRIMASK, r3
}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2101      	movs	r1, #1
 80060e4:	438a      	bics	r2, r1
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d118      	bne.n	800612e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006100:	60bb      	str	r3, [r7, #8]
  return(result);
 8006102:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006106:	2301      	movs	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f383 8810 	msr	PRIMASK, r3
}
 8006110:	46c0      	nop			; (mov r8, r8)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2110      	movs	r1, #16
 800611e:	438a      	bics	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f383 8810 	msr	PRIMASK, r3
}
 800612c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2280      	movs	r2, #128	; 0x80
 8006132:	2120      	movs	r1, #32
 8006134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	b00e      	add	sp, #56	; 0x38
 8006148:	bd80      	pop	{r7, pc}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	fffffedf 	.word	0xfffffedf

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	2600      	movs	r6, #0
 8006154:	4d0c      	ldr	r5, [pc, #48]	; (8006188 <__libc_init_array+0x38>)
 8006156:	4c0d      	ldr	r4, [pc, #52]	; (800618c <__libc_init_array+0x3c>)
 8006158:	1b64      	subs	r4, r4, r5
 800615a:	10a4      	asrs	r4, r4, #2
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	2600      	movs	r6, #0
 8006162:	f000 f821 	bl	80061a8 <_init>
 8006166:	4d0a      	ldr	r5, [pc, #40]	; (8006190 <__libc_init_array+0x40>)
 8006168:	4c0a      	ldr	r4, [pc, #40]	; (8006194 <__libc_init_array+0x44>)
 800616a:	1b64      	subs	r4, r4, r5
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	00b3      	lsls	r3, r6, #2
 8006176:	58eb      	ldr	r3, [r5, r3]
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	00b3      	lsls	r3, r6, #2
 8006180:	58eb      	ldr	r3, [r5, r3]
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	080063c4 	.word	0x080063c4
 800618c:	080063c4 	.word	0x080063c4
 8006190:	080063c4 	.word	0x080063c4
 8006194:	080063c8 	.word	0x080063c8

08006198 <memset>:
 8006198:	0003      	movs	r3, r0
 800619a:	1882      	adds	r2, r0, r2
 800619c:	4293      	cmp	r3, r2
 800619e:	d100      	bne.n	80061a2 <memset+0xa>
 80061a0:	4770      	bx	lr
 80061a2:	7019      	strb	r1, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	e7f9      	b.n	800619c <memset+0x4>

080061a8 <_init>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr

080061b4 <_fini>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr
