
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003348  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a8  080034a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034b0  080034b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  080034c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080034c4  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010039  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ea  00000000  00000000  0003006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001143d  00000000  00000000  00033fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001233c  00000000  00000000  0004541d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006dfc4  00000000  00000000  00057759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c571d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c8  00000000  00000000  000c5770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033f0 	.word	0x080033f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080033f0 	.word	0x080033f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8d8 	bl	80004a0 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8d3 	bl	80004a0 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzsi2>:
 8000464:	211c      	movs	r1, #28
 8000466:	2301      	movs	r3, #1
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0xe>
 800046e:	0c00      	lsrs	r0, r0, #16
 8000470:	3910      	subs	r1, #16
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	4298      	cmp	r0, r3
 8000476:	d301      	bcc.n	800047c <__clzsi2+0x18>
 8000478:	0a00      	lsrs	r0, r0, #8
 800047a:	3908      	subs	r1, #8
 800047c:	091b      	lsrs	r3, r3, #4
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0x22>
 8000482:	0900      	lsrs	r0, r0, #4
 8000484:	3904      	subs	r1, #4
 8000486:	a202      	add	r2, pc, #8	; (adr r2, 8000490 <__clzsi2+0x2c>)
 8000488:	5c10      	ldrb	r0, [r2, r0]
 800048a:	1840      	adds	r0, r0, r1
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	02020304 	.word	0x02020304
 8000494:	01010101 	.word	0x01010101
	...

080004a0 <__clzdi2>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	2900      	cmp	r1, #0
 80004a4:	d103      	bne.n	80004ae <__clzdi2+0xe>
 80004a6:	f7ff ffdd 	bl	8000464 <__clzsi2>
 80004aa:	3020      	adds	r0, #32
 80004ac:	e002      	b.n	80004b4 <__clzdi2+0x14>
 80004ae:	0008      	movs	r0, r1
 80004b0:	f7ff ffd8 	bl	8000464 <__clzsi2>
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b089      	sub	sp, #36	; 0x24
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	240c      	movs	r4, #12
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2314      	movs	r3, #20
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f002 ff89 	bl	80033e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_GPIO_Init+0x98>)
 80004d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <MX_GPIO_Init+0x98>)
 80004d4:	2104      	movs	r1, #4
 80004d6:	430a      	orrs	r2, r1
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_GPIO_Init+0x98>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	2204      	movs	r2, #4
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_GPIO_Init+0x98>)
 80004e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <MX_GPIO_Init+0x98>)
 80004ec:	2101      	movs	r1, #1
 80004ee:	430a      	orrs	r2, r1
 80004f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_GPIO_Init+0x98>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	2201      	movs	r2, #1
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_GPIO_Init+0x98>)
 8000500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_GPIO_Init+0x98>)
 8000504:	2102      	movs	r1, #2
 8000506:	430a      	orrs	r2, r1
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_GPIO_Init+0x98>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	2202      	movs	r2, #2
 8000510:	4013      	ands	r3, r2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_GPIO_Init+0x9c>)
 8000518:	2200      	movs	r2, #0
 800051a:	2108      	movs	r1, #8
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fd9b 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2208      	movs	r2, #8
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800053c:	187b      	adds	r3, r7, r1
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <MX_GPIO_Init+0x9c>)
 8000540:	0019      	movs	r1, r3
 8000542:	0010      	movs	r0, r2
 8000544:	f000 fc1a 	bl	8000d7c <HAL_GPIO_Init>

}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b009      	add	sp, #36	; 0x24
 800054e:	bd90      	pop	{r4, r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C1_Init+0x74>)
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fd97 	bl	80010c8 <HAL_I2C_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 f8fb 	bl	8000798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C1_Init+0x74>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fe24 	bl	80011f4 <HAL_I2CEx_ConfigAnalogFilter>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 f8f2 	bl	8000798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MX_I2C1_Init+0x74>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fe67 	bl	800128c <HAL_I2CEx_ConfigDigitalFilter>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f8e9 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40005400 	.word	0x40005400
 80005d4:	00300f38 	.word	0x00300f38

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	; 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f002 fef8 	bl	80033e0 <memset>
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <HAL_I2C_MspInit+0x80>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d12a      	bne.n	8000650 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_I2C_MspInit+0x84>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	00d2      	lsls	r2, r2, #3
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	0021      	movs	r1, r4
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2212      	movs	r2, #18
 8000620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2203      	movs	r2, #3
 800062c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	187a      	adds	r2, r7, r1
 8000636:	23a0      	movs	r3, #160	; 0xa0
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fb9d 	bl	8000d7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0389      	lsls	r1, r1, #14
 800064c:	430a      	orrs	r2, r1
 800064e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b009      	add	sp, #36	; 0x24
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fa18 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f820 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f7ff ff24 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000670:	f000 f972 	bl	8000958 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8000674:	f000 f8d4 	bl	8000820 <MX_TIM21_Init>
  MX_I2C1_Init();
 8000678:	f7ff ff6e 	bl	8000558 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim21);
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0x44>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fdb4 	bl	80021ec <HAL_TIM_Base_Start_IT>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <main+0x48>)
 8000686:	2108      	movs	r1, #8
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fd02 	bl	8001092 <HAL_GPIO_TogglePin>

	  HAL_Delay(2000);
 800068e:	23fa      	movs	r3, #250	; 0xfa
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fa70 	bl	8000b78 <HAL_Delay>
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8000698:	2102      	movs	r1, #2
 800069a:	2000      	movs	r0, #0
 800069c:	f000 fe42 	bl	8001324 <HAL_PWR_EnterSLEEPMode>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006a0:	e7f0      	b.n	8000684 <main+0x24>
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	50000400 	.word	0x50000400

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b099      	sub	sp, #100	; 0x64
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	242c      	movs	r4, #44	; 0x2c
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2334      	movs	r3, #52	; 0x34
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f002 fe8f 	bl	80033e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	2318      	movs	r3, #24
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f002 fe87 	bl	80033e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	2318      	movs	r3, #24
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 fe80 	bl	80033e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemClock_Config+0xe4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <SystemClock_Config+0xe8>)
 80006e6:	401a      	ands	r2, r3
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <SystemClock_Config+0xe4>)
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	0109      	lsls	r1, r1, #4
 80006ee:	430a      	orrs	r2, r1
 80006f0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	0021      	movs	r1, r4
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2210      	movs	r2, #16
 8000704:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	02d2      	lsls	r2, r2, #11
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	03d2      	lsls	r2, r2, #15
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	187b      	adds	r3, r7, r1
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fe55 	bl	80013d4 <HAL_RCC_OscConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800072e:	f000 f833 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	2118      	movs	r1, #24
 8000734:	187b      	adds	r3, r7, r1
 8000736:	220f      	movs	r2, #15
 8000738:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2203      	movs	r2, #3
 800073e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2101      	movs	r1, #1
 8000756:	0018      	movs	r0, r3
 8000758:	f001 f9b8 	bl	8001acc <HAL_RCC_ClockConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000760:	f000 f81a 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000764:	003b      	movs	r3, r7
 8000766:	220a      	movs	r2, #10
 8000768:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800076a:	003b      	movs	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	003b      	movs	r3, r7
 8000778:	0018      	movs	r0, r3
 800077a:	f001 fbcb 	bl	8001f14 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000782:	f000 f809 	bl	8000798 <Error_Handler>
  }
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b019      	add	sp, #100	; 0x64
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40007000 	.word	0x40007000
 8000794:	ffffe7ff 	.word	0xffffe7ff

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_MspInit+0x24>)
 80007aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x24>)
 80007ae:	2101      	movs	r1, #1
 80007b0:	430a      	orrs	r2, r1
 80007b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <HAL_MspInit+0x24>)
 80007b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_MspInit+0x24>)
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	0549      	lsls	r1, r1, #21
 80007be:	430a      	orrs	r2, r1
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f9a6 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <TIM21_IRQHandler+0x14>)
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fd3e 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	2000007c 	.word	0x2000007c

08000814 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	2308      	movs	r3, #8
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	2310      	movs	r3, #16
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f002 fdd5 	bl	80033e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	003b      	movs	r3, r7
 8000838:	0018      	movs	r0, r3
 800083a:	2308      	movs	r3, #8
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f002 fdce 	bl	80033e0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_TIM21_Init+0xa4>)
 8000846:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <MX_TIM21_Init+0xa8>)
 8000848:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM21_Init+0xa4>)
 800084c:	22fa      	movs	r2, #250	; 0xfa
 800084e:	01d2      	lsls	r2, r2, #7
 8000850:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_TIM21_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_TIM21_Init+0xa4>)
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_TIM21_Init+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_TIM21_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM21_Init+0xa4>)
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fc7c 	bl	800216c <HAL_TIM_Base_Init>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_TIM21_Init+0x5c>
  {
    Error_Handler();
 8000878:	f7ff ff8e 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	2108      	movs	r1, #8
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0152      	lsls	r2, r2, #5
 8000884:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000886:	187a      	adds	r2, r7, r1
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_TIM21_Init+0xa4>)
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fde1 	bl	8002454 <HAL_TIM_ConfigClockSource>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8000896:	f7ff ff7f 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	003b      	movs	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80008a6:	003a      	movs	r2, r7
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_TIM21_Init+0xa4>)
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 ffb3 	bl	8002818 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80008b6:	f7ff ff6f 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b006      	add	sp, #24
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	2000007c 	.word	0x2000007c
 80008c8:	40010800 	.word	0x40010800

080008cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_TIM_Base_MspInit+0x38>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d10d      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_TIM_Base_MspInit+0x3c>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_TIM_Base_MspInit+0x3c>)
 80008e4:	2104      	movs	r1, #4
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2014      	movs	r0, #20
 80008f0:	f000 fa12 	bl	8000d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80008f4:	2014      	movs	r0, #20
 80008f6:	f000 fa24 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40010800 	.word	0x40010800
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	b091      	sub	sp, #68	; 0x44
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint8_t data[50] = "Hello group 8\n\r";
 8000914:	240c      	movs	r4, #12
 8000916:	1939      	adds	r1, r7, r4
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800091a:	000b      	movs	r3, r1
 800091c:	ca61      	ldmia	r2!, {r0, r5, r6}
 800091e:	c361      	stmia	r3!, {r0, r5, r6}
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	000b      	movs	r3, r1
 8000926:	3310      	adds	r3, #16
 8000928:	2222      	movs	r2, #34	; 0x22
 800092a:	2100      	movs	r1, #0
 800092c:	0018      	movs	r0, r3
 800092e:	f002 fd57 	bl	80033e0 <memset>

	HAL_UART_Transmit(&huart2, data, strlen((char*)data), 100);
 8000932:	193b      	adds	r3, r7, r4
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fbe7 	bl	8000108 <strlen>
 800093a:	0003      	movs	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	1939      	adds	r1, r7, r4
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	f002 f814 	bl	8002970 <HAL_UART_Transmit>
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b011      	add	sp, #68	; 0x44
 800094e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000950:	08003408 	.word	0x08003408
 8000954:	200000bc 	.word	0x200000bc

08000958 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <MX_USART2_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000964:	22e1      	movs	r2, #225	; 0xe1
 8000966:	0252      	lsls	r2, r2, #9
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x58>)
 800099c:	0018      	movs	r0, r3
 800099e:	f001 ff93 	bl	80028c8 <HAL_UART_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f7ff fef7 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000bc 	.word	0x200000bc
 80009b4:	40004400 	.word	0x40004400

080009b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	240c      	movs	r4, #12
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f002 fd08 	bl	80033e0 <memset>
  if(uartHandle->Instance==USART2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x80>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d129      	bne.n	8000a2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0289      	lsls	r1, r1, #10
 80009e4:	430a      	orrs	r2, r1
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	430a      	orrs	r2, r1
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x84>)
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a00:	0021      	movs	r1, r4
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_UART_MspInit+0x88>)
 8000a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2203      	movs	r2, #3
 8000a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	187a      	adds	r2, r7, r1
 8000a22:	23a0      	movs	r3, #160	; 0xa0
 8000a24:	05db      	lsls	r3, r3, #23
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 f9a7 	bl	8000d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b009      	add	sp, #36	; 0x24
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	00008004 	.word	0x00008004

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a46:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a48:	f7ff fee4 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 fc91 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fdf3 	bl	8000660 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
   ldr   r0, =_estack
 8000a7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a88:	080034b8 	.word	0x080034b8
  ldr r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a90:	20000148 	.word	0x20000148

08000a94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_COMP_IRQHandler>
	...

08000a98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <HAL_Init+0x3c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Init+0x3c>)
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 f811 	bl	8000ad8 <HAL_InitTick>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e001      	b.n	8000ac6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac2:	f7ff fe6f 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x5c>)
 8000ae2:	681c      	ldr	r4, [r3, #0]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0x60>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	0019      	movs	r1, r3
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	0098      	lsls	r0, r3, #2
 8000aee:	f7ff fb13 	bl	8000118 <__udivsi3>
 8000af2:	0003      	movs	r3, r0
 8000af4:	0019      	movs	r1, r3
 8000af6:	0020      	movs	r0, r4
 8000af8:	f7ff fb0e 	bl	8000118 <__udivsi3>
 8000afc:	0003      	movs	r3, r0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f92f 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00f      	b.n	8000b2c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d80b      	bhi.n	8000b2a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2301      	movs	r3, #1
 8000b16:	425b      	negs	r3, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f8fc 	bl	8000d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_InitTick+0x64>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	001a      	movs	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	18d2      	adds	r2, r2, r3
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000144 	.word	0x20000144

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000144 	.word	0x20000144

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	0003      	movs	r3, r0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	001a      	movs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	189b      	adds	r3, r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd2:	d809      	bhi.n	8000be8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	231f      	movs	r3, #31
 8000bdc:	401a      	ands	r2, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_EnableIRQ+0x30>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	4091      	lsls	r1, r2
 8000be4:	000a      	movs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
  }
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b7f      	cmp	r3, #127	; 0x7f
 8000c08:	d828      	bhi.n	8000c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	589b      	ldr	r3, [r3, r2]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	430a      	orrs	r2, r1
 8000c54:	33c0      	adds	r3, #192	; 0xc0
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c5a:	e031      	b.n	8000cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0019      	movs	r1, r3
 8000c64:	230f      	movs	r3, #15
 8000c66:	400b      	ands	r3, r1
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	3304      	adds	r3, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	400a      	ands	r2, r1
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	21ff      	movs	r1, #255	; 0xff
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	401a      	ands	r2, r3
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	4003      	ands	r3, r0
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	001c      	movs	r4, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	4023      	ands	r3, r4
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	3306      	adds	r3, #6
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	18c3      	adds	r3, r0, r3
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	045b      	lsls	r3, r3, #17
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d301      	bcc.n	8000ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e010      	b.n	8000d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <SysTick_Config+0x44>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	3a01      	subs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff7c 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x44>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x44>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	210f      	movs	r1, #15
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	1c02      	adds	r2, r0, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	0002      	movs	r2, r0
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffaf 	bl	8000cd0 <SysTick_Config>
 8000d72:	0003      	movs	r3, r0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d92:	e149      	b.n	8001028 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	000a      	movs	r2, r1
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <HAL_GPIO_Init+0x30>
 8000daa:	e13a      	b.n	8001022 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	2201      	movs	r2, #1
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d017      	beq.n	8000e62 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d123      	bne.n	8000eb6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	58d3      	ldr	r3, [r2, r3]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2207      	movs	r2, #7
 8000e80:	4013      	ands	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2107      	movs	r1, #7
 8000e9a:	400b      	ands	r3, r1
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	6939      	ldr	r1, [r7, #16]
 8000eb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	029b      	lsls	r3, r3, #10
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d100      	bne.n	8000ef8 <HAL_GPIO_Init+0x17c>
 8000ef6:	e094      	b.n	8001022 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	4b51      	ldr	r3, [pc, #324]	; (8001040 <HAL_GPIO_Init+0x2c4>)
 8000efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <HAL_GPIO_Init+0x2c4>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_GPIO_Init+0x2c8>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	589b      	ldr	r3, [r3, r2]
 8000f10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1de>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a44      	ldr	r2, [pc, #272]	; (8001048 <HAL_GPIO_Init+0x2cc>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1da>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a43      	ldr	r2, [pc, #268]	; (800104c <HAL_GPIO_Init+0x2d0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1d6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a42      	ldr	r2, [pc, #264]	; (8001050 <HAL_GPIO_Init+0x2d4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1d2>
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	2103      	movs	r1, #3
 8000f60:	400a      	ands	r2, r1
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	; (8001044 <HAL_GPIO_Init+0x2c8>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	035b      	lsls	r3, r3, #13
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	039b      	lsls	r3, r3, #14
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	029b      	lsls	r3, r3, #10
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	025b      	lsls	r3, r3, #9
 8001010:	4013      	ands	r3, r2
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	40da      	lsrs	r2, r3
 8001030:	1e13      	subs	r3, r2, #0
 8001032:	d000      	beq.n	8001036 <HAL_GPIO_Init+0x2ba>
 8001034:	e6ae      	b.n	8000d94 <HAL_GPIO_Init+0x18>
  }
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b006      	add	sp, #24
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	50000400 	.word	0x50000400
 800104c:	50000800 	.word	0x50000800
 8001050:	50001c00 	.word	0x50001c00
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	0008      	movs	r0, r1
 8001062:	0011      	movs	r1, r2
 8001064:	1cbb      	adds	r3, r7, #2
 8001066:	1c02      	adds	r2, r0, #0
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	1c7b      	adds	r3, r7, #1
 800106c:	1c0a      	adds	r2, r1, #0
 800106e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001070:	1c7b      	adds	r3, r7, #1
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001078:	1cbb      	adds	r3, r7, #2
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001082:	1cbb      	adds	r3, r7, #2
 8001084:	881a      	ldrh	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	000a      	movs	r2, r1
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4013      	ands	r3, r2
 80010ae:	041a      	lsls	r2, r3, #16
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	1cb9      	adds	r1, r7, #2
 80010b6:	8809      	ldrh	r1, [r1, #0]
 80010b8:	400b      	ands	r3, r1
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b004      	add	sp, #16
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e082      	b.n	80011e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2241      	movs	r2, #65	; 0x41
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d107      	bne.n	80010f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fa71 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2241      	movs	r2, #65	; 0x41
 80010fa:	2124      	movs	r1, #36	; 0x24
 80010fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4934      	ldr	r1, [pc, #208]	; (80011e8 <HAL_I2C_Init+0x120>)
 8001118:	400a      	ands	r2, r1
 800111a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4931      	ldr	r1, [pc, #196]	; (80011ec <HAL_I2C_Init+0x124>)
 8001128:	400a      	ands	r2, r1
 800112a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2180      	movs	r1, #128	; 0x80
 800113e:	0209      	lsls	r1, r1, #8
 8001140:	430a      	orrs	r2, r1
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e007      	b.n	8001156 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2184      	movs	r1, #132	; 0x84
 8001150:	0209      	lsls	r1, r1, #8
 8001152:	430a      	orrs	r2, r1
 8001154:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d104      	bne.n	8001168 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	491f      	ldr	r1, [pc, #124]	; (80011f0 <HAL_I2C_Init+0x128>)
 8001174:	430a      	orrs	r2, r1
 8001176:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	491a      	ldr	r1, [pc, #104]	; (80011ec <HAL_I2C_Init+0x124>)
 8001184:	400a      	ands	r2, r1
 8001186:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	431a      	orrs	r2, r3
 8001192:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69d9      	ldr	r1, [r3, #28]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1a      	ldr	r2, [r3, #32]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2241      	movs	r2, #65	; 0x41
 80011cc:	2120      	movs	r1, #32
 80011ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2242      	movs	r2, #66	; 0x42
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	f0ffffff 	.word	0xf0ffffff
 80011ec:	ffff7fff 	.word	0xffff7fff
 80011f0:	02008000 	.word	0x02008000

080011f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2241      	movs	r2, #65	; 0x41
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b20      	cmp	r3, #32
 8001208:	d138      	bne.n	800127c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2240      	movs	r2, #64	; 0x40
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001214:	2302      	movs	r3, #2
 8001216:	e032      	b.n	800127e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2240      	movs	r2, #64	; 0x40
 800121c:	2101      	movs	r1, #1
 800121e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2241      	movs	r2, #65	; 0x41
 8001224:	2124      	movs	r1, #36	; 0x24
 8001226:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	438a      	bics	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4911      	ldr	r1, [pc, #68]	; (8001288 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2241      	movs	r2, #65	; 0x41
 800126c:	2120      	movs	r1, #32
 800126e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e000      	b.n	800127e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800127c:	2302      	movs	r3, #2
  }
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	ffffefff 	.word	0xffffefff

0800128c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2241      	movs	r2, #65	; 0x41
 800129a:	5c9b      	ldrb	r3, [r3, r2]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b20      	cmp	r3, #32
 80012a0:	d139      	bne.n	8001316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2240      	movs	r2, #64	; 0x40
 80012a6:	5c9b      	ldrb	r3, [r3, r2]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012ac:	2302      	movs	r3, #2
 80012ae:	e033      	b.n	8001318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2240      	movs	r2, #64	; 0x40
 80012b4:	2101      	movs	r1, #1
 80012b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2241      	movs	r2, #65	; 0x41
 80012bc:	2124      	movs	r1, #36	; 0x24
 80012be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2101      	movs	r1, #1
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2241      	movs	r2, #65	; 0x41
 8001306:	2120      	movs	r1, #32
 8001308:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	2100      	movs	r1, #0
 8001310:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001316:	2302      	movs	r3, #2
  }
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b004      	add	sp, #16
 800131e:	bd80      	pop	{r7, pc}
 8001320:	fffff0ff 	.word	0xfffff0ff

08001324 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	000a      	movs	r2, r1
 800132e:	1cfb      	adds	r3, r7, #3
 8001330:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	2201      	movs	r2, #1
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d008      	beq.n	8001364 <HAL_PWR_EnterSLEEPMode+0x40>
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800135e:	491b      	ldr	r1, [pc, #108]	; (80013cc <HAL_PWR_EnterSLEEPMode+0xa8>)
 8001360:	400a      	ands	r2, r1
 8001362:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2203      	movs	r2, #3
 800136e:	4393      	bics	r3, r2
 8001370:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4313      	orrs	r3, r2
 8001378:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8001386:	2104      	movs	r1, #4
 8001388:	438a      	bics	r2, r1
 800138a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800138c:	1cfb      	adds	r3, r7, #3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001394:	bf30      	wfi
 8001396:	e002      	b.n	800139e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001398:	bf40      	sev
    __WFE();
 800139a:	bf20      	wfe
    __WFE();
 800139c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <HAL_PWR_EnterSLEEPMode+0x94>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0089      	lsls	r1, r1, #2
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80013b8:	46c0      	nop			; (mov r8, r8)

}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b006      	add	sp, #24
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	40007000 	.word	0x40007000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	fffffdff 	.word	0xfffffdff
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f000 fb6c 	bl	8001ac0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e8:	4bc8      	ldr	r3, [pc, #800]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	220c      	movs	r2, #12
 80013ee:	4013      	ands	r3, r2
 80013f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f2:	4bc6      	ldr	r3, [pc, #792]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x36>
 8001408:	e07d      	b.n	8001506 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d007      	beq.n	8001420 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x68>
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	025b      	lsls	r3, r3, #9
 800141c:	429a      	cmp	r2, r3
 800141e:	d10d      	bne.n	800143c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4bba      	ldr	r3, [pc, #744]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x5a>
 800142c:	e06a      	b.n	8001504 <HAL_RCC_OscConfig+0x130>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d166      	bne.n	8001504 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 fb42 	bl	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	025b      	lsls	r3, r3, #9
 8001444:	429a      	cmp	r2, r3
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x84>
 8001448:	4bb0      	ldr	r3, [pc, #704]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4baf      	ldr	r3, [pc, #700]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0249      	lsls	r1, r1, #9
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e027      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	02db      	lsls	r3, r3, #11
 8001460:	429a      	cmp	r2, r3
 8001462:	d10e      	bne.n	8001482 <HAL_RCC_OscConfig+0xae>
 8001464:	4ba9      	ldr	r3, [pc, #676]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4ba8      	ldr	r3, [pc, #672]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	02c9      	lsls	r1, r1, #11
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	4ba6      	ldr	r3, [pc, #664]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4ba5      	ldr	r3, [pc, #660]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	0249      	lsls	r1, r1, #9
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e012      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 8001482:	4ba2      	ldr	r3, [pc, #648]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4ba1      	ldr	r3, [pc, #644]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001488:	49a1      	ldr	r1, [pc, #644]	; (8001710 <HAL_RCC_OscConfig+0x33c>)
 800148a:	400a      	ands	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	4b9f      	ldr	r3, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4b9b      	ldr	r3, [pc, #620]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b9a      	ldr	r3, [pc, #616]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80014a2:	499c      	ldr	r1, [pc, #624]	; (8001714 <HAL_RCC_OscConfig+0x340>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d014      	beq.n	80014da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb58 	bl	8000b64 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ba:	f7ff fb53 	bl	8000b64 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e2f9      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014cc:	4b8f      	ldr	r3, [pc, #572]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	029b      	lsls	r3, r3, #10
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0xe6>
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb43 	bl	8000b64 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fb3e 	bl	8000b64 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e2e4      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f6:	4b85      	ldr	r3, [pc, #532]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	029b      	lsls	r3, r3, #10
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x110>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2202      	movs	r2, #2
 800150c:	4013      	ands	r3, r2
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x13e>
 8001510:	e099      	b.n	8001646 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	2220      	movs	r2, #32
 800151c:	4013      	ands	r3, r2
 800151e:	d009      	beq.n	8001534 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001520:	4b7a      	ldr	r3, [pc, #488]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b79      	ldr	r3, [pc, #484]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001526:	2120      	movs	r1, #32
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	2220      	movs	r2, #32
 8001530:	4393      	bics	r3, r2
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d13e      	bne.n	80015be <HAL_RCC_OscConfig+0x1ea>
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d13b      	bne.n	80015be <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001546:	4b71      	ldr	r3, [pc, #452]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	d004      	beq.n	800155a <HAL_RCC_OscConfig+0x186>
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e2b2      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b6c      	ldr	r3, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a6e      	ldr	r2, [pc, #440]	; (8001718 <HAL_RCC_OscConfig+0x344>)
 8001560:	4013      	ands	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	021a      	lsls	r2, r3, #8
 800156a:	4b68      	ldr	r3, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2209      	movs	r2, #9
 8001576:	4393      	bics	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	4b64      	ldr	r3, [pc, #400]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800157c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001582:	f000 fbeb 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001586:	0001      	movs	r1, r0
 8001588:	4b60      	ldr	r3, [pc, #384]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	220f      	movs	r2, #15
 8001590:	4013      	ands	r3, r2
 8001592:	4a62      	ldr	r2, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x348>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	000a      	movs	r2, r1
 8001598:	40da      	lsrs	r2, r3
 800159a:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_OscConfig+0x34c>)
 800159c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800159e:	4b61      	ldr	r3, [pc, #388]	; (8001724 <HAL_RCC_OscConfig+0x350>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2513      	movs	r5, #19
 80015a4:	197c      	adds	r4, r7, r5
 80015a6:	0018      	movs	r0, r3
 80015a8:	f7ff fa96 	bl	8000ad8 <HAL_InitTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015b0:	197b      	adds	r3, r7, r5
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d046      	beq.n	8001646 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80015b8:	197b      	adds	r3, r7, r5
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	e280      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d027      	beq.n	8001614 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2209      	movs	r2, #9
 80015ca:	4393      	bics	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fac5 	bl	8000b64 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fac0 	bl	8000b64 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e266      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f2:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2204      	movs	r2, #4
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f1      	beq.n	80015e0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_RCC_OscConfig+0x344>)
 8001602:	4013      	ands	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	021a      	lsls	r2, r3, #8
 800160c:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	e018      	b.n	8001646 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001614:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800161a:	2101      	movs	r1, #1
 800161c:	438a      	bics	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff faa0 	bl	8000b64 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fa9b 	bl	8000b64 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e241      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d1f1      	bne.n	800162a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2210      	movs	r2, #16
 800164c:	4013      	ands	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x27e>
 8001650:	e0a1      	b.n	8001796 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d140      	bne.n	80016da <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <HAL_RCC_OscConfig+0x338>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x29c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e227      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <HAL_RCC_OscConfig+0x354>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1a      	ldr	r2, [r3, #32]
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	0a19      	lsrs	r1, r3, #8
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	061a      	lsls	r2, r3, #24
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <HAL_RCC_OscConfig+0x338>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	0b5b      	lsrs	r3, r3, #13
 800169e:	3301      	adds	r3, #1
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0212      	lsls	r2, r2, #8
 80016a4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	210f      	movs	r1, #15
 80016ae:	400b      	ands	r3, r1
 80016b0:	491a      	ldr	r1, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x348>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x34c>)
 80016b8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_RCC_OscConfig+0x350>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2513      	movs	r5, #19
 80016c0:	197c      	adds	r4, r7, r5
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff fa08 	bl	8000ad8 <HAL_InitTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016cc:	197b      	adds	r3, r7, r5
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d060      	beq.n	8001796 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80016d4:	197b      	adds	r3, r7, r5
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	e1f2      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03f      	beq.n	8001762 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_OscConfig+0x338>)
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	0049      	lsls	r1, r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa38 	bl	8000b64 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f8:	e018      	b.n	800172c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016fa:	f7ff fa33 	bl	8000b64 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d911      	bls.n	800172c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e1d9      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
 800170c:	40021000 	.word	0x40021000
 8001710:	fffeffff 	.word	0xfffeffff
 8001714:	fffbffff 	.word	0xfffbffff
 8001718:	ffffe0ff 	.word	0xffffe0ff
 800171c:	0800343c 	.word	0x0800343c
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004
 8001728:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800172c:	4bc9      	ldr	r3, [pc, #804]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0e0      	beq.n	80016fa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001738:	4bc6      	ldr	r3, [pc, #792]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4ac6      	ldr	r2, [pc, #792]	; (8001a58 <HAL_RCC_OscConfig+0x684>)
 800173e:	4013      	ands	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1a      	ldr	r2, [r3, #32]
 8001746:	4bc3      	ldr	r3, [pc, #780]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4bc1      	ldr	r3, [pc, #772]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	0a19      	lsrs	r1, r3, #8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	061a      	lsls	r2, r3, #24
 800175a:	4bbe      	ldr	r3, [pc, #760]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800175c:	430a      	orrs	r2, r1
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	e019      	b.n	8001796 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001762:	4bbc      	ldr	r3, [pc, #752]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4bbb      	ldr	r3, [pc, #748]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001768:	49bc      	ldr	r1, [pc, #752]	; (8001a5c <HAL_RCC_OscConfig+0x688>)
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff f9f9 	bl	8000b64 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001778:	f7ff f9f4 	bl	8000b64 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e19a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800178a:	4bb2      	ldr	r3, [pc, #712]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2208      	movs	r2, #8
 800179c:	4013      	ands	r3, r2
 800179e:	d036      	beq.n	800180e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d019      	beq.n	80017dc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a8:	4baa      	ldr	r3, [pc, #680]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ac:	4ba9      	ldr	r3, [pc, #676]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f9d6 	bl	8000b64 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff f9d1 	bl	8000b64 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e177      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d0:	4ba0      	ldr	r3, [pc, #640]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80017d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d0f1      	beq.n	80017be <HAL_RCC_OscConfig+0x3ea>
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017dc:	4b9d      	ldr	r3, [pc, #628]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80017de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e0:	4b9c      	ldr	r3, [pc, #624]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f9bc 	bl	8000b64 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff f9b7 	bl	8000b64 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e15d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001804:	4b93      	ldr	r3, [pc, #588]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d1f1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2204      	movs	r2, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x446>
 8001818:	e0ae      	b.n	8001978 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2023      	movs	r0, #35	; 0x23
 800181c:	183b      	adds	r3, r7, r0
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b8c      	ldr	r3, [pc, #560]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	055b      	lsls	r3, r3, #21
 800182a:	4013      	ands	r3, r2
 800182c:	d109      	bne.n	8001842 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b89      	ldr	r3, [pc, #548]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001832:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0549      	lsls	r1, r1, #21
 8001838:	430a      	orrs	r2, r1
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800183c:	183b      	adds	r3, r7, r0
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b87      	ldr	r3, [pc, #540]	; (8001a60 <HAL_RCC_OscConfig+0x68c>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4013      	ands	r3, r2
 800184c:	d11a      	bne.n	8001884 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b84      	ldr	r3, [pc, #528]	; (8001a60 <HAL_RCC_OscConfig+0x68c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b83      	ldr	r3, [pc, #524]	; (8001a60 <HAL_RCC_OscConfig+0x68c>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0049      	lsls	r1, r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185c:	f7ff f982 	bl	8000b64 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff f97d 	bl	8000b64 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e123      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <HAL_RCC_OscConfig+0x68c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4cc>
 8001890:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001894:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0049      	lsls	r1, r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	651a      	str	r2, [r3, #80]	; 0x50
 800189e:	e031      	b.n	8001904 <HAL_RCC_OscConfig+0x530>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4ee>
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ac:	4b69      	ldr	r3, [pc, #420]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018ae:	496b      	ldr	r1, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x688>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	651a      	str	r2, [r3, #80]	; 0x50
 80018b4:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018ba:	496a      	ldr	r1, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x690>)
 80018bc:	400a      	ands	r2, r1
 80018be:	651a      	str	r2, [r3, #80]	; 0x50
 80018c0:	e020      	b.n	8001904 <HAL_RCC_OscConfig+0x530>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	23a0      	movs	r3, #160	; 0xa0
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d10e      	bne.n	80018ec <HAL_RCC_OscConfig+0x518>
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d2:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	00c9      	lsls	r1, r1, #3
 80018d8:	430a      	orrs	r2, r1
 80018da:	651a      	str	r2, [r3, #80]	; 0x50
 80018dc:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e0:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0049      	lsls	r1, r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x530>
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f0:	4b58      	ldr	r3, [pc, #352]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018f2:	495a      	ldr	r1, [pc, #360]	; (8001a5c <HAL_RCC_OscConfig+0x688>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	651a      	str	r2, [r3, #80]	; 0x50
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fc:	4b55      	ldr	r3, [pc, #340]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80018fe:	4959      	ldr	r1, [pc, #356]	; (8001a64 <HAL_RCC_OscConfig+0x690>)
 8001900:	400a      	ands	r2, r1
 8001902:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff f92a 	bl	8000b64 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f925 	bl	8000b64 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_RCC_OscConfig+0x694>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0ca      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800192a:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800192c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d0ef      	beq.n	8001916 <HAL_RCC_OscConfig+0x542>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff f914 	bl	8000b64 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f90f 	bl	8000b64 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a46      	ldr	r2, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x694>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0b4      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001962:	2323      	movs	r3, #35	; 0x23
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 800196e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001972:	493e      	ldr	r1, [pc, #248]	; (8001a6c <HAL_RCC_OscConfig+0x698>)
 8001974:	400a      	ands	r2, r1
 8001976:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b00      	cmp	r3, #0
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x5ae>
 8001980:	e09d      	b.n	8001abe <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d100      	bne.n	800198a <HAL_RCC_OscConfig+0x5b6>
 8001988:	e076      	b.n	8001a78 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b02      	cmp	r3, #2
 8001990:	d145      	bne.n	8001a1e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x69c>)
 800199a:	400a      	ands	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f8e1 	bl	8000b64 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f8dc 	bl	8000b64 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e082      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	049b      	lsls	r3, r3, #18
 80019c2:	4013      	ands	r3, r2
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x6a0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	431a      	orrs	r2, r3
 80019e0:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80019e2:	430a      	orrs	r2, r1
 80019e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	0449      	lsls	r1, r1, #17
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8b6 	bl	8000b64 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff f8b1 	bl	8000b64 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e057      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	049b      	lsls	r3, r3, #18
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x62a>
 8001a1c:	e04f      	b.n	8001abe <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001a24:	4912      	ldr	r1, [pc, #72]	; (8001a70 <HAL_RCC_OscConfig+0x69c>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f89b 	bl	8000b64 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f896 	bl	8000b64 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e03c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_OscConfig+0x680>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	049b      	lsls	r3, r3, #18
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x660>
 8001a52:	e034      	b.n	8001abe <HAL_RCC_OscConfig+0x6ea>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	ffff1fff 	.word	0xffff1fff
 8001a5c:	fffffeff 	.word	0xfffffeff
 8001a60:	40007000 	.word	0x40007000
 8001a64:	fffffbff 	.word	0xfffffbff
 8001a68:	00001388 	.word	0x00001388
 8001a6c:	efffffff 	.word	0xefffffff
 8001a70:	feffffff 	.word	0xfeffffff
 8001a74:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x6f4>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	025b      	lsls	r3, r3, #9
 8001a90:	401a      	ands	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d10f      	bne.n	8001aba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	23f0      	movs	r3, #240	; 0xf0
 8001a9e:	039b      	lsls	r3, r3, #14
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b00a      	add	sp, #40	; 0x28
 8001ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac8:	40021000 	.word	0x40021000

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e128      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d91e      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b93      	ldr	r3, [pc, #588]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	4b90      	ldr	r3, [pc, #576]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b00:	f7ff f830 	bl	8000b64 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b08:	e009      	b.n	8001b1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7ff f82b 	bl	8000b64 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	4a8a      	ldr	r2, [pc, #552]	; (8001d40 <HAL_RCC_ClockConfig+0x274>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e109      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b36:	4b83      	ldr	r3, [pc, #524]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	22f0      	movs	r2, #240	; 0xf0
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4013      	ands	r3, r2
 8001b52:	d100      	bne.n	8001b56 <HAL_RCC_ClockConfig+0x8a>
 8001b54:	e089      	b.n	8001c6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b5e:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	4013      	ands	r3, r2
 8001b68:	d120      	bne.n	8001bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0e1      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	049b      	lsls	r3, r3, #18
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d114      	bne.n	8001bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0d5      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2204      	movs	r2, #4
 8001b94:	4013      	ands	r3, r2
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0ca      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b9c:	4b69      	ldr	r3, [pc, #420]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0c2      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bac:	4b65      	ldr	r3, [pc, #404]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7fe ffd0 	bl	8000b64 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d111      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd0:	e009      	b.n	8001be6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd2:	f7fe ffc7 	bl	8000b64 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	4a58      	ldr	r2, [pc, #352]	; (8001d40 <HAL_RCC_ClockConfig+0x274>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0a5      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be6:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	220c      	movs	r2, #12
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d1ef      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0x106>
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfe:	f7fe ffb1 	bl	8000b64 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_RCC_ClockConfig+0x274>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e08f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	220c      	movs	r2, #12
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d1ef      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x132>
 8001c1e:	e024      	b.n	8001c6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d11b      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7fe ff9b 	bl	8000b64 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	4a42      	ldr	r2, [pc, #264]	; (8001d40 <HAL_RCC_ClockConfig+0x274>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e079      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	220c      	movs	r2, #12
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d1ef      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x15e>
 8001c4a:	e00e      	b.n	8001c6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7fe ff8a 	bl	8000b64 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_RCC_ClockConfig+0x274>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e068      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	220c      	movs	r2, #12
 8001c66:	4013      	ands	r3, r2
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d21e      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4393      	bics	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c8a:	f7fe ff6b 	bl	8000b64 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7fe ff66 	bl	8000b64 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_RCC_ClockConfig+0x274>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e044      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_ClockConfig+0x270>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x27c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	0019      	movs	r1, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_RCC_ClockConfig+0x280>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	0019      	movs	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00da      	lsls	r2, r3, #3
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cf4:	f000 f832 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001cf8:	0001      	movs	r1, r0
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x278>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	220f      	movs	r2, #15
 8001d02:	4013      	ands	r3, r2
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x284>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	000a      	movs	r2, r1
 8001d0a:	40da      	lsrs	r2, r3
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_RCC_ClockConfig+0x288>)
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_ClockConfig+0x28c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	250b      	movs	r5, #11
 8001d16:	197c      	adds	r4, r7, r5
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7fe fedd 	bl	8000ad8 <HAL_InitTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d22:	197b      	adds	r3, r7, r5
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d2a:	197b      	adds	r3, r7, r5
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	00001388 	.word	0x00001388
 8001d44:	40021000 	.word	0x40021000
 8001d48:	fffff8ff 	.word	0xfffff8ff
 8001d4c:	ffffc7ff 	.word	0xffffc7ff
 8001d50:	0800343c 	.word	0x0800343c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d62:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d014      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d72:	d900      	bls.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d74:	e07b      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x112>
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x24>
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7e:	e076      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d80:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2210      	movs	r2, #16
 8001d86:	4013      	ands	r3, r2
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d8a:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d8e:	e07c      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d90:	4b42      	ldr	r3, [pc, #264]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d94:	e079      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d96:	4b42      	ldr	r3, [pc, #264]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d9a:	e076      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	0c9a      	lsrs	r2, r3, #18
 8001da0:	230f      	movs	r3, #15
 8001da2:	401a      	ands	r2, r3
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001da6:	5c9b      	ldrb	r3, [r3, r2]
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	0d9a      	lsrs	r2, r3, #22
 8001dae:	2303      	movs	r3, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	3301      	adds	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db6:	4b37      	ldr	r3, [pc, #220]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d01a      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	4a35      	ldr	r2, [pc, #212]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	69b8      	ldr	r0, [r7, #24]
 8001dd0:	69f9      	ldr	r1, [r7, #28]
 8001dd2:	f7fe fa4d 	bl	8000270 <__aeabi_lmul>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	000b      	movs	r3, r1
 8001dda:	0010      	movs	r0, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f7fe fa21 	bl	8000230 <__aeabi_uldivmod>
 8001dee:	0002      	movs	r2, r0
 8001df0:	000b      	movs	r3, r1
 8001df2:	0013      	movs	r3, r2
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	e037      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d01a      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	f7fe fa2d 	bl	8000270 <__aeabi_lmul>
 8001e16:	0002      	movs	r2, r0
 8001e18:	000b      	movs	r3, r1
 8001e1a:	0010      	movs	r0, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f7fe fa01 	bl	8000230 <__aeabi_uldivmod>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	000b      	movs	r3, r1
 8001e32:	0013      	movs	r3, r2
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
 8001e36:	e017      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x140>)
 8001e42:	2300      	movs	r3, #0
 8001e44:	f7fe fa14 	bl	8000270 <__aeabi_lmul>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	000b      	movs	r3, r1
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	001c      	movs	r4, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	001d      	movs	r5, r3
 8001e58:	0022      	movs	r2, r4
 8001e5a:	002b      	movs	r3, r5
 8001e5c:	f7fe f9e8 	bl	8000230 <__aeabi_uldivmod>
 8001e60:	0002      	movs	r2, r0
 8001e62:	000b      	movs	r3, r1
 8001e64:	0013      	movs	r3, r2
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e6c:	e00d      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	2207      	movs	r2, #7
 8001e76:	4013      	ands	r3, r2
 8001e78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	0212      	lsls	r2, r2, #8
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e88:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b00e      	add	sp, #56	; 0x38
 8001e92:	bdb0      	pop	{r4, r5, r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	003d0900 	.word	0x003d0900
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	08003454 	.word	0x08003454

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b02      	ldr	r3, [pc, #8]	; (8001eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	20000000 	.word	0x20000000

08001ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec0:	f7ff fff2 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec4:	0001      	movs	r1, r0
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	2207      	movs	r2, #7
 8001ece:	4013      	ands	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	40d9      	lsrs	r1, r3
 8001ed6:	000b      	movs	r3, r1
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	0800344c 	.word	0x0800344c

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eec:	f7ff ffdc 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ef0:	0001      	movs	r1, r0
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	0adb      	lsrs	r3, r3, #11
 8001ef8:	2207      	movs	r2, #7
 8001efa:	4013      	ands	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	000b      	movs	r3, r1
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	0800344c 	.word	0x0800344c

08001f14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f1c:	2017      	movs	r0, #23
 8001f1e:	183b      	adds	r3, r7, r0
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f2e:	e0c7      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f30:	4b84      	ldr	r3, [pc, #528]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	055b      	lsls	r3, r3, #21
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f40:	4b80      	ldr	r3, [pc, #512]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0549      	lsls	r1, r1, #21
 8001f46:	430a      	orrs	r2, r1
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f4a:	183b      	adds	r3, r7, r0
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b7d      	ldr	r3, [pc, #500]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d11a      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	0049      	lsls	r1, r1, #1
 8001f66:	430a      	orrs	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fdfb 	bl	8000b64 <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f72:	e008      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f74:	f7fe fdf6 	bl	8000b64 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e0d9      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f92:	4b6c      	ldr	r3, [pc, #432]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	23c0      	movs	r3, #192	; 0xc0
 8001f98:	039b      	lsls	r3, r3, #14
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	039b      	lsls	r3, r3, #14
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d013      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	23c0      	movs	r3, #192	; 0xc0
 8001fb4:	029b      	lsls	r3, r3, #10
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	23c0      	movs	r3, #192	; 0xc0
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	401a      	ands	r2, r3
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0b1      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fda:	23c0      	movs	r3, #192	; 0xc0
 8001fdc:	029b      	lsls	r3, r3, #10
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03b      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	23c0      	movs	r3, #192	; 0xc0
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d033      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	4013      	ands	r3, r2
 8002000:	d02e      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002002:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	4a51      	ldr	r2, [pc, #324]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800200e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002010:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	0309      	lsls	r1, r1, #12
 8002016:	430a      	orrs	r2, r1
 8002018:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800201c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002020:	494b      	ldr	r1, [pc, #300]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002022:	400a      	ands	r2, r1
 8002024:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d014      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe fd95 	bl	8000b64 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7fe fd90 	bl	8000b64 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	4a42      	ldr	r2, [pc, #264]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e072      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4013      	ands	r3, r2
 800205e:	d0ef      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2220      	movs	r2, #32
 8002066:	4013      	ands	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	23c0      	movs	r3, #192	; 0xc0
 8002070:	029b      	lsls	r3, r3, #10
 8002072:	401a      	ands	r2, r3
 8002074:	23c0      	movs	r3, #192	; 0xc0
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	429a      	cmp	r2, r3
 800207a:	d10c      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	23c0      	movs	r3, #192	; 0xc0
 800208c:	039b      	lsls	r3, r3, #14
 800208e:	401a      	ands	r2, r3
 8002090:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002098:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	23c0      	movs	r3, #192	; 0xc0
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	401a      	ands	r2, r3
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ba:	4928      	ldr	r1, [pc, #160]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020bc:	400a      	ands	r2, r1
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	220c      	movs	r2, #12
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2208      	movs	r2, #8
 8002102:	4013      	ands	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002116:	430a      	orrs	r2, r1
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	4013      	ands	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002134:	430a      	orrs	r2, r1
 8002136:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b006      	add	sp, #24
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	fffcffff 	.word	0xfffcffff
 8002150:	fff7ffff 	.word	0xfff7ffff
 8002154:	00001388 	.word	0x00001388
 8002158:	ffcfffff 	.word	0xffcfffff
 800215c:	efffffff 	.word	0xefffffff
 8002160:	fffff3ff 	.word	0xfffff3ff
 8002164:	ffffcfff 	.word	0xffffcfff
 8002168:	fff3ffff 	.word	0xfff3ffff

0800216c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e032      	b.n	80021e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2239      	movs	r2, #57	; 0x39
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2238      	movs	r2, #56	; 0x38
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	0018      	movs	r0, r3
 8002196:	f7fe fb99 	bl	80008cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2239      	movs	r2, #57	; 0x39
 800219e:	2102      	movs	r1, #2
 80021a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3304      	adds	r3, #4
 80021aa:	0019      	movs	r1, r3
 80021ac:	0010      	movs	r0, r2
 80021ae:	f000 fa45 	bl	800263c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	223e      	movs	r2, #62	; 0x3e
 80021b6:	2101      	movs	r1, #1
 80021b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	223a      	movs	r2, #58	; 0x3a
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	223b      	movs	r2, #59	; 0x3b
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223c      	movs	r2, #60	; 0x3c
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	223d      	movs	r2, #61	; 0x3d
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2239      	movs	r2, #57	; 0x39
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2239      	movs	r2, #57	; 0x39
 80021f8:	5c9b      	ldrb	r3, [r3, r2]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d001      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e036      	b.n	8002272 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2239      	movs	r2, #57	; 0x39
 8002208:	2102      	movs	r1, #2
 800220a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	05db      	lsls	r3, r3, #23
 8002224:	429a      	cmp	r2, r3
 8002226:	d009      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x50>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <HAL_TIM_Base_Start_IT+0x90>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x50>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <HAL_TIM_Base_Start_IT+0x94>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2207      	movs	r2, #7
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d010      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	e007      	b.n	8002270 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b004      	add	sp, #16
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	40010800 	.word	0x40010800
 8002280:	40011400 	.word	0x40011400

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2202      	movs	r2, #2
 8002294:	4013      	ands	r3, r2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d124      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2202      	movs	r2, #2
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11d      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2203      	movs	r2, #3
 80022ae:	4252      	negs	r2, r2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2203      	movs	r2, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f9a0 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80022cc:	e007      	b.n	80022de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 f993 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f99f 	bl	800261c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d125      	bne.n	800233e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2204      	movs	r2, #4
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d11e      	bne.n	800233e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2205      	movs	r2, #5
 8002306:	4252      	negs	r2, r2
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	23c0      	movs	r3, #192	; 0xc0
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	f000 f973 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 8002326:	e007      	b.n	8002338 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0018      	movs	r0, r3
 800232c:	f000 f966 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	0018      	movs	r0, r3
 8002334:	f000 f972 	bl	800261c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2208      	movs	r2, #8
 8002346:	4013      	ands	r3, r2
 8002348:	2b08      	cmp	r3, #8
 800234a:	d124      	bne.n	8002396 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2208      	movs	r2, #8
 8002354:	4013      	ands	r3, r2
 8002356:	2b08      	cmp	r3, #8
 8002358:	d11d      	bne.n	8002396 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2209      	movs	r2, #9
 8002360:	4252      	negs	r2, r2
 8002362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2204      	movs	r2, #4
 8002368:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2203      	movs	r2, #3
 8002372:	4013      	ands	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f947 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 800237e:	e007      	b.n	8002390 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f93a 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f946 	bl	800261c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2210      	movs	r2, #16
 800239e:	4013      	ands	r3, r2
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d125      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2210      	movs	r2, #16
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d11e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2211      	movs	r2, #17
 80023b8:	4252      	negs	r2, r2
 80023ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2208      	movs	r2, #8
 80023c0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	23c0      	movs	r3, #192	; 0xc0
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4013      	ands	r3, r2
 80023ce:	d004      	beq.n	80023da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 f91a 	bl	800260c <HAL_TIM_IC_CaptureCallback>
 80023d8:	e007      	b.n	80023ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 f90d 	bl	80025fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 f919 	bl	800261c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2201      	movs	r2, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10f      	bne.n	800241e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	4013      	ands	r3, r2
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2202      	movs	r2, #2
 8002412:	4252      	negs	r2, r2
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f7fe fa77 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	4013      	ands	r3, r2
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d10f      	bne.n	800244c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	4013      	ands	r3, r2
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d108      	bne.n	800244c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2241      	movs	r2, #65	; 0x41
 8002440:	4252      	negs	r2, r2
 8002442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f8f0 	bl	800262c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2238      	movs	r2, #56	; 0x38
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_TIM_ConfigClockSource+0x20>
 8002470:	2302      	movs	r3, #2
 8002472:	e0bc      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x19a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2238      	movs	r2, #56	; 0x38
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2239      	movs	r2, #57	; 0x39
 8002480:	2102      	movs	r1, #2
 8002482:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2277      	movs	r2, #119	; 0x77
 8002490:	4393      	bics	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	0192      	lsls	r2, r2, #6
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d040      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0xde>
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0192      	lsls	r2, r2, #6
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d900      	bls.n	80024ba <HAL_TIM_ConfigClockSource+0x66>
 80024b8:	e088      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	0152      	lsls	r2, r2, #5
 80024be:	4293      	cmp	r3, r2
 80024c0:	d100      	bne.n	80024c4 <HAL_TIM_ConfigClockSource+0x70>
 80024c2:	e088      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0x182>
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	0152      	lsls	r2, r2, #5
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d900      	bls.n	80024ce <HAL_TIM_ConfigClockSource+0x7a>
 80024cc:	e07e      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024ce:	2b70      	cmp	r3, #112	; 0x70
 80024d0:	d018      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0xb0>
 80024d2:	d900      	bls.n	80024d6 <HAL_TIM_ConfigClockSource+0x82>
 80024d4:	e07a      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024d6:	2b60      	cmp	r3, #96	; 0x60
 80024d8:	d04f      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x126>
 80024da:	d900      	bls.n	80024de <HAL_TIM_ConfigClockSource+0x8a>
 80024dc:	e076      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024de:	2b50      	cmp	r3, #80	; 0x50
 80024e0:	d03b      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x106>
 80024e2:	d900      	bls.n	80024e6 <HAL_TIM_ConfigClockSource+0x92>
 80024e4:	e072      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d057      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x146>
 80024ea:	d900      	bls.n	80024ee <HAL_TIM_ConfigClockSource+0x9a>
 80024ec:	e06e      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024ee:	2b30      	cmp	r3, #48	; 0x30
 80024f0:	d063      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x166>
 80024f2:	d86b      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d060      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x166>
 80024f8:	d868      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d05d      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x166>
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d05b      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x166>
 8002502:	e063      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f960 	bl	80027d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2277      	movs	r2, #119	; 0x77
 8002524:	4313      	orrs	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	609a      	str	r2, [r3, #8]
      break;
 8002530:	e052      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f000 f949 	bl	80027d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	01c9      	lsls	r1, r1, #7
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
      break;
 8002558:	e03e      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	001a      	movs	r2, r3
 8002568:	f000 f8bc 	bl	80026e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2150      	movs	r1, #80	; 0x50
 8002572:	0018      	movs	r0, r3
 8002574:	f000 f916 	bl	80027a4 <TIM_ITRx_SetConfig>
      break;
 8002578:	e02e      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	001a      	movs	r2, r3
 8002588:	f000 f8da 	bl	8002740 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2160      	movs	r1, #96	; 0x60
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f906 	bl	80027a4 <TIM_ITRx_SetConfig>
      break;
 8002598:	e01e      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	001a      	movs	r2, r3
 80025a8:	f000 f89c 	bl	80026e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2140      	movs	r1, #64	; 0x40
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 f8f6 	bl	80027a4 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e00e      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0019      	movs	r1, r3
 80025c4:	0010      	movs	r0, r2
 80025c6:	f000 f8ed 	bl	80027a4 <TIM_ITRx_SetConfig>
      break;
 80025ca:	e005      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80025cc:	230f      	movs	r3, #15
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
      break;
 80025d4:	e000      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80025d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2239      	movs	r2, #57	; 0x39
 80025dc:	2101      	movs	r1, #1
 80025de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2238      	movs	r2, #56	; 0x38
 80025e4:	2100      	movs	r1, #0
 80025e6:	5499      	strb	r1, [r3, r2]

  return status;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	ffff00ff 	.word	0xffff00ff

080025fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	05db      	lsls	r3, r3, #23
 8002652:	429a      	cmp	r2, r3
 8002654:	d007      	beq.n	8002666 <TIM_Base_SetConfig+0x2a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <TIM_Base_SetConfig+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <TIM_Base_SetConfig+0x2a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <TIM_Base_SetConfig+0xa0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d108      	bne.n	8002678 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2270      	movs	r2, #112	; 0x70
 800266a:	4393      	bics	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	05db      	lsls	r3, r3, #23
 800267e:	429a      	cmp	r2, r3
 8002680:	d007      	beq.n	8002692 <TIM_Base_SetConfig+0x56>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <TIM_Base_SetConfig+0x9c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <TIM_Base_SetConfig+0x56>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <TIM_Base_SetConfig+0xa0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <TIM_Base_SetConfig+0xa4>)
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	4393      	bics	r3, r2
 80026aa:	001a      	movs	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	615a      	str	r2, [r3, #20]
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b004      	add	sp, #16
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40010800 	.word	0x40010800
 80026dc:	40011400 	.word	0x40011400
 80026e0:	fffffcff 	.word	0xfffffcff

080026e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	2201      	movs	r2, #1
 80026fc:	4393      	bics	r3, r2
 80026fe:	001a      	movs	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	22f0      	movs	r2, #240	; 0xf0
 800270e:	4393      	bics	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	220a      	movs	r2, #10
 8002720:	4393      	bics	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	621a      	str	r2, [r3, #32]
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b006      	add	sp, #24
 800273e:	bd80      	pop	{r7, pc}

08002740 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	2210      	movs	r2, #16
 8002752:	4393      	bics	r3, r2
 8002754:	001a      	movs	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <TIM_TI2_ConfigInputStage+0x60>)
 800276a:	4013      	ands	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	031b      	lsls	r3, r3, #12
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	22a0      	movs	r2, #160	; 0xa0
 800277c:	4393      	bics	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	ffff0fff 	.word	0xffff0fff

080027a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2270      	movs	r2, #112	; 0x70
 80027b8:	4393      	bics	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	2207      	movs	r2, #7
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <TIM_ETR_SetConfig+0x3c>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	021a      	lsls	r2, r3, #8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b006      	add	sp, #24
 8002812:	bd80      	pop	{r7, pc}
 8002814:	ffff00ff 	.word	0xffff00ff

08002818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2238      	movs	r2, #56	; 0x38
 8002826:	5c9b      	ldrb	r3, [r3, r2]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800282c:	2302      	movs	r3, #2
 800282e:	e042      	b.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2238      	movs	r2, #56	; 0x38
 8002834:	2101      	movs	r1, #1
 8002836:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2239      	movs	r2, #57	; 0x39
 800283c:	2102      	movs	r1, #2
 800283e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2270      	movs	r2, #112	; 0x70
 8002854:	4393      	bics	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	05db      	lsls	r3, r3, #23
 8002872:	429a      	cmp	r2, r3
 8002874:	d009      	beq.n	800288a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d10c      	bne.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2280      	movs	r2, #128	; 0x80
 800288e:	4393      	bics	r3, r2
 8002890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	4313      	orrs	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2239      	movs	r2, #57	; 0x39
 80028a8:	2101      	movs	r1, #1
 80028aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2238      	movs	r2, #56	; 0x38
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40011400 	.word	0x40011400

080028c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e044      	b.n	8002964 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2278      	movs	r2, #120	; 0x78
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fe f863 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2224      	movs	r2, #36	; 0x24
 80028f6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2101      	movs	r1, #1
 8002904:	438a      	bics	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f8d0 	bl	8002ab0 <UART_SetConfig>
 8002910:	0003      	movs	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e024      	b.n	8002964 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fb0d 	bl	8002f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	490d      	ldr	r1, [pc, #52]	; (800296c <HAL_UART_Init+0xa4>)
 8002936:	400a      	ands	r2, r1
 8002938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	212a      	movs	r1, #42	; 0x2a
 8002946:	438a      	bics	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fba5 	bl	80030ac <UART_CheckIdleState>
 8002962:	0003      	movs	r3, r0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	ffffb7ff 	.word	0xffffb7ff

08002970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	1dbb      	adds	r3, r7, #6
 800297e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002984:	2b20      	cmp	r3, #32
 8002986:	d000      	beq.n	800298a <HAL_UART_Transmit+0x1a>
 8002988:	e08c      	b.n	8002aa4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_UART_Transmit+0x28>
 8002990:	1dbb      	adds	r3, r7, #6
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e084      	b.n	8002aa6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	015b      	lsls	r3, r3, #5
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d109      	bne.n	80029bc <HAL_UART_Transmit+0x4c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d001      	beq.n	80029bc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e074      	b.n	8002aa6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2284      	movs	r2, #132	; 0x84
 80029c0:	2100      	movs	r1, #0
 80029c2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2221      	movs	r2, #33	; 0x21
 80029c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ca:	f7fe f8cb 	bl	8000b64 <HAL_GetTick>
 80029ce:	0003      	movs	r3, r0
 80029d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1dba      	adds	r2, r7, #6
 80029d6:	2150      	movs	r1, #80	; 0x50
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1dba      	adds	r2, r7, #6
 80029e0:	2152      	movs	r1, #82	; 0x52
 80029e2:	8812      	ldrh	r2, [r2, #0]
 80029e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	015b      	lsls	r3, r3, #5
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d108      	bne.n	8002a04 <HAL_UART_Transmit+0x94>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e003      	b.n	8002a0c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a0c:	e02f      	b.n	8002a6e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	0013      	movs	r3, r2
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	f000 fbee 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e03b      	b.n	8002aa6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	05d2      	lsls	r2, r2, #23
 8002a40:	0dd2      	lsrs	r2, r2, #23
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	3302      	adds	r3, #2
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	e007      	b.n	8002a5c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2252      	movs	r2, #82	; 0x52
 8002a60:	5a9b      	ldrh	r3, [r3, r2]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b299      	uxth	r1, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2252      	movs	r2, #82	; 0x52
 8002a6c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2252      	movs	r2, #82	; 0x52
 8002a72:	5a9b      	ldrh	r3, [r3, r2]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1c9      	bne.n	8002a0e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	0013      	movs	r3, r2
 8002a84:	2200      	movs	r2, #0
 8002a86:	2140      	movs	r1, #64	; 0x40
 8002a88:	f000 fbb8 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e005      	b.n	8002aa6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b008      	add	sp, #32
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b08e      	sub	sp, #56	; 0x38
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ab8:	231a      	movs	r3, #26
 8002aba:	2218      	movs	r2, #24
 8002abc:	189b      	adds	r3, r3, r2
 8002abe:	19db      	adds	r3, r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4ab4      	ldr	r2, [pc, #720]	; (8002db4 <UART_SetConfig+0x304>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4aaf      	ldr	r2, [pc, #700]	; (8002db8 <UART_SetConfig+0x308>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4aa9      	ldr	r2, [pc, #676]	; (8002dbc <UART_SetConfig+0x30c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b20:	4313      	orrs	r3, r2
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4aa5      	ldr	r2, [pc, #660]	; (8002dc0 <UART_SetConfig+0x310>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4aa1      	ldr	r2, [pc, #644]	; (8002dc4 <UART_SetConfig+0x314>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d131      	bne.n	8002ba8 <UART_SetConfig+0xf8>
 8002b44:	4ba0      	ldr	r3, [pc, #640]	; (8002dc8 <UART_SetConfig+0x318>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	220c      	movs	r2, #12
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b0c      	cmp	r3, #12
 8002b4e:	d01d      	beq.n	8002b8c <UART_SetConfig+0xdc>
 8002b50:	d823      	bhi.n	8002b9a <UART_SetConfig+0xea>
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d00c      	beq.n	8002b70 <UART_SetConfig+0xc0>
 8002b56:	d820      	bhi.n	8002b9a <UART_SetConfig+0xea>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <UART_SetConfig+0xb2>
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d00e      	beq.n	8002b7e <UART_SetConfig+0xce>
 8002b60:	e01b      	b.n	8002b9a <UART_SetConfig+0xea>
 8002b62:	231b      	movs	r3, #27
 8002b64:	2218      	movs	r2, #24
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	19db      	adds	r3, r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e065      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b70:	231b      	movs	r3, #27
 8002b72:	2218      	movs	r2, #24
 8002b74:	189b      	adds	r3, r3, r2
 8002b76:	19db      	adds	r3, r3, r7
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e05e      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b7e:	231b      	movs	r3, #27
 8002b80:	2218      	movs	r2, #24
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	19db      	adds	r3, r3, r7
 8002b86:	2204      	movs	r2, #4
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e057      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b8c:	231b      	movs	r3, #27
 8002b8e:	2218      	movs	r2, #24
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	19db      	adds	r3, r3, r7
 8002b94:	2208      	movs	r2, #8
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e050      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002b9a:	231b      	movs	r3, #27
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e049      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a83      	ldr	r2, [pc, #524]	; (8002dbc <UART_SetConfig+0x30c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d13e      	bne.n	8002c30 <UART_SetConfig+0x180>
 8002bb2:	4b85      	ldr	r3, [pc, #532]	; (8002dc8 <UART_SetConfig+0x318>)
 8002bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bb6:	23c0      	movs	r3, #192	; 0xc0
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	22c0      	movs	r2, #192	; 0xc0
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d027      	beq.n	8002c14 <UART_SetConfig+0x164>
 8002bc4:	22c0      	movs	r2, #192	; 0xc0
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d82a      	bhi.n	8002c22 <UART_SetConfig+0x172>
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d011      	beq.n	8002bf8 <UART_SetConfig+0x148>
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d822      	bhi.n	8002c22 <UART_SetConfig+0x172>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <UART_SetConfig+0x13a>
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	00d2      	lsls	r2, r2, #3
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <UART_SetConfig+0x156>
 8002be8:	e01b      	b.n	8002c22 <UART_SetConfig+0x172>
 8002bea:	231b      	movs	r3, #27
 8002bec:	2218      	movs	r2, #24
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	19db      	adds	r3, r3, r7
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e021      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002bf8:	231b      	movs	r3, #27
 8002bfa:	2218      	movs	r2, #24
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	19db      	adds	r3, r3, r7
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e01a      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2218      	movs	r2, #24
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	2204      	movs	r2, #4
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e013      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c14:	231b      	movs	r3, #27
 8002c16:	2218      	movs	r2, #24
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	19db      	adds	r3, r3, r7
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e00c      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c22:	231b      	movs	r3, #27
 8002c24:	2218      	movs	r2, #24
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	19db      	adds	r3, r3, r7
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e005      	b.n	8002c3c <UART_SetConfig+0x18c>
 8002c30:	231b      	movs	r3, #27
 8002c32:	2218      	movs	r2, #24
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	2210      	movs	r2, #16
 8002c3a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5e      	ldr	r2, [pc, #376]	; (8002dbc <UART_SetConfig+0x30c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d000      	beq.n	8002c48 <UART_SetConfig+0x198>
 8002c46:	e084      	b.n	8002d52 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c48:	231b      	movs	r3, #27
 8002c4a:	2218      	movs	r2, #24
 8002c4c:	189b      	adds	r3, r3, r2
 8002c4e:	19db      	adds	r3, r3, r7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d01d      	beq.n	8002c92 <UART_SetConfig+0x1e2>
 8002c56:	dc20      	bgt.n	8002c9a <UART_SetConfig+0x1ea>
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d015      	beq.n	8002c88 <UART_SetConfig+0x1d8>
 8002c5c:	dc1d      	bgt.n	8002c9a <UART_SetConfig+0x1ea>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <UART_SetConfig+0x1b8>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d005      	beq.n	8002c72 <UART_SetConfig+0x1c2>
 8002c66:	e018      	b.n	8002c9a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7ff f928 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c70:	e01c      	b.n	8002cac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c72:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <UART_SetConfig+0x318>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2210      	movs	r2, #16
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <UART_SetConfig+0x31c>)
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c80:	e014      	b.n	8002cac <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002c82:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <UART_SetConfig+0x320>)
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c86:	e011      	b.n	8002cac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c88:	f7ff f868 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c90:	e00c      	b.n	8002cac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c98:	e008      	b.n	8002cac <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c9e:	231a      	movs	r3, #26
 8002ca0:	2218      	movs	r2, #24
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
        break;
 8002caa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d100      	bne.n	8002cb4 <UART_SetConfig+0x204>
 8002cb2:	e12f      	b.n	8002f14 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	0013      	movs	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d305      	bcc.n	8002cd0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d906      	bls.n	8002cde <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002cd0:	231a      	movs	r3, #26
 8002cd2:	2218      	movs	r2, #24
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e11a      	b.n	8002f14 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	6939      	ldr	r1, [r7, #16]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	000b      	movs	r3, r1
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	0010      	movs	r0, r2
 8002cf0:	0205      	lsls	r5, r0, #8
 8002cf2:	431d      	orrs	r5, r3
 8002cf4:	000b      	movs	r3, r1
 8002cf6:	021c      	lsls	r4, r3, #8
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68b8      	ldr	r0, [r7, #8]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	1900      	adds	r0, r0, r4
 8002d0a:	4169      	adcs	r1, r5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f7fd fa89 	bl	8000230 <__aeabi_uldivmod>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	000b      	movs	r3, r1
 8002d22:	0013      	movs	r3, r2
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d28:	23c0      	movs	r3, #192	; 0xc0
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d309      	bcc.n	8002d44 <UART_SetConfig+0x294>
 8002d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	035b      	lsls	r3, r3, #13
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d204      	bcs.n	8002d44 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e0e7      	b.n	8002f14 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002d44:	231a      	movs	r3, #26
 8002d46:	2218      	movs	r2, #24
 8002d48:	189b      	adds	r3, r3, r2
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
 8002d50:	e0e0      	b.n	8002f14 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d000      	beq.n	8002d60 <UART_SetConfig+0x2b0>
 8002d5e:	e082      	b.n	8002e66 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002d60:	231b      	movs	r3, #27
 8002d62:	2218      	movs	r2, #24
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d834      	bhi.n	8002dd8 <UART_SetConfig+0x328>
 8002d6e:	009a      	lsls	r2, r3, #2
 8002d70:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <UART_SetConfig+0x324>)
 8002d72:	18d3      	adds	r3, r2, r3
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d78:	f7ff f8a0 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d80:	e033      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d82:	f7ff f8b1 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 8002d86:	0003      	movs	r3, r0
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d8a:	e02e      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <UART_SetConfig+0x318>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2210      	movs	r2, #16
 8002d92:	4013      	ands	r3, r2
 8002d94:	d002      	beq.n	8002d9c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <UART_SetConfig+0x31c>)
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d9a:	e026      	b.n	8002dea <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <UART_SetConfig+0x320>)
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da0:	e023      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da2:	f7fe ffdb 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8002da6:	0003      	movs	r3, r0
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002daa:	e01e      	b.n	8002dea <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002db2:	e01a      	b.n	8002dea <UART_SetConfig+0x33a>
 8002db4:	efff69f3 	.word	0xefff69f3
 8002db8:	ffffcfff 	.word	0xffffcfff
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	fffff4ff 	.word	0xfffff4ff
 8002dc4:	40004400 	.word	0x40004400
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	003d0900 	.word	0x003d0900
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	08003460 	.word	0x08003460
      default:
        pclk = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ddc:	231a      	movs	r3, #26
 8002dde:	2218      	movs	r2, #24
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	19db      	adds	r3, r3, r7
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
        break;
 8002de8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d100      	bne.n	8002df2 <UART_SetConfig+0x342>
 8002df0:	e090      	b.n	8002f14 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	005a      	lsls	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	18d2      	adds	r2, r2, r3
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0019      	movs	r1, r3
 8002e04:	0010      	movs	r0, r2
 8002e06:	f7fd f987 	bl	8000118 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d921      	bls.n	8002e58 <UART_SetConfig+0x3a8>
 8002e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	025b      	lsls	r3, r3, #9
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d21c      	bcs.n	8002e58 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	200e      	movs	r0, #14
 8002e24:	2418      	movs	r4, #24
 8002e26:	1903      	adds	r3, r0, r4
 8002e28:	19db      	adds	r3, r3, r7
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2207      	movs	r2, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b299      	uxth	r1, r3
 8002e3c:	1903      	adds	r3, r0, r4
 8002e3e:	19db      	adds	r3, r3, r7
 8002e40:	1902      	adds	r2, r0, r4
 8002e42:	19d2      	adds	r2, r2, r7
 8002e44:	8812      	ldrh	r2, [r2, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	1902      	adds	r2, r0, r4
 8002e50:	19d2      	adds	r2, r2, r7
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	e05d      	b.n	8002f14 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002e58:	231a      	movs	r3, #26
 8002e5a:	2218      	movs	r2, #24
 8002e5c:	189b      	adds	r3, r3, r2
 8002e5e:	19db      	adds	r3, r3, r7
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e056      	b.n	8002f14 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e66:	231b      	movs	r3, #27
 8002e68:	2218      	movs	r2, #24
 8002e6a:	189b      	adds	r3, r3, r2
 8002e6c:	19db      	adds	r3, r3, r7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d822      	bhi.n	8002eba <UART_SetConfig+0x40a>
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <UART_SetConfig+0x484>)
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7e:	f7ff f81d 	bl	8001ebc <HAL_RCC_GetPCLK1Freq>
 8002e82:	0003      	movs	r3, r0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e86:	e021      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e88:	f7ff f82e 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e90:	e01c      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <UART_SetConfig+0x488>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d002      	beq.n	8002ea2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <UART_SetConfig+0x48c>)
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ea0:	e014      	b.n	8002ecc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <UART_SetConfig+0x490>)
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea6:	e011      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea8:	f7fe ff58 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8002eac:	0003      	movs	r3, r0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eb0:	e00c      	b.n	8002ecc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eb8:	e008      	b.n	8002ecc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ebe:	231a      	movs	r3, #26
 8002ec0:	2218      	movs	r2, #24
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	19db      	adds	r3, r3, r7
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
        break;
 8002eca:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	085a      	lsrs	r2, r3, #1
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	18d2      	adds	r2, r2, r3
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	f7fd f918 	bl	8000118 <__udivsi3>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d90a      	bls.n	8002f08 <UART_SetConfig+0x458>
 8002ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d205      	bcs.n	8002f08 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	e005      	b.n	8002f14 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002f08:	231a      	movs	r3, #26
 8002f0a:	2218      	movs	r2, #24
 8002f0c:	189b      	adds	r3, r3, r2
 8002f0e:	19db      	adds	r3, r3, r7
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2200      	movs	r2, #0
 8002f18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f20:	231a      	movs	r3, #26
 8002f22:	2218      	movs	r2, #24
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	19db      	adds	r3, r3, r7
 8002f28:	781b      	ldrb	r3, [r3, #0]
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b00e      	add	sp, #56	; 0x38
 8002f30:	bdb0      	pop	{r4, r5, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	08003484 	.word	0x08003484
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	003d0900 	.word	0x003d0900
 8002f40:	00f42400 	.word	0x00f42400

08002f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a4a      	ldr	r2, [pc, #296]	; (8003088 <UART_AdvFeatureConfig+0x144>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a43      	ldr	r2, [pc, #268]	; (800308c <UART_AdvFeatureConfig+0x148>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <UART_AdvFeatureConfig+0x14c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <UART_AdvFeatureConfig+0x150>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2210      	movs	r2, #16
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <UART_AdvFeatureConfig+0x154>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <UART_AdvFeatureConfig+0x158>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2240      	movs	r2, #64	; 0x40
 800301e:	4013      	ands	r3, r2
 8003020:	d01d      	beq.n	800305e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <UART_AdvFeatureConfig+0x15c>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	035b      	lsls	r3, r3, #13
 8003042:	429a      	cmp	r2, r3
 8003044:	d10b      	bne.n	800305e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <UART_AdvFeatureConfig+0x160>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	4013      	ands	r3, r2
 8003066:	d00b      	beq.n	8003080 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <UART_AdvFeatureConfig+0x164>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	fffdffff 	.word	0xfffdffff
 800308c:	fffeffff 	.word	0xfffeffff
 8003090:	fffbffff 	.word	0xfffbffff
 8003094:	ffff7fff 	.word	0xffff7fff
 8003098:	ffffefff 	.word	0xffffefff
 800309c:	ffffdfff 	.word	0xffffdfff
 80030a0:	ffefffff 	.word	0xffefffff
 80030a4:	ff9fffff 	.word	0xff9fffff
 80030a8:	fff7ffff 	.word	0xfff7ffff

080030ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b092      	sub	sp, #72	; 0x48
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2284      	movs	r2, #132	; 0x84
 80030b8:	2100      	movs	r1, #0
 80030ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030bc:	f7fd fd52 	bl	8000b64 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2208      	movs	r2, #8
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d12c      	bne.n	800312c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	0391      	lsls	r1, r2, #14
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4a46      	ldr	r2, [pc, #280]	; (80031f4 <UART_CheckIdleState+0x148>)
 80030dc:	9200      	str	r2, [sp, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	f000 f88c 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d021      	beq.n	800312c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f2:	2301      	movs	r3, #1
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	438a      	bics	r2, r1
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2278      	movs	r2, #120	; 0x78
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05f      	b.n	80031ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2204      	movs	r2, #4
 8003134:	4013      	ands	r3, r2
 8003136:	2b04      	cmp	r3, #4
 8003138:	d146      	bne.n	80031c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	03d1      	lsls	r1, r2, #15
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <UART_CheckIdleState+0x148>)
 8003144:	9200      	str	r2, [sp, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	f000 f858 	bl	80031fc <UART_WaitOnFlagUntilTimeout>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d03b      	beq.n	80031c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003150:	f3ef 8310 	mrs	r3, PRIMASK
 8003154:	60fb      	str	r3, [r7, #12]
  return(result);
 8003156:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
 800315a:	2301      	movs	r3, #1
 800315c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4921      	ldr	r1, [pc, #132]	; (80031f8 <UART_CheckIdleState+0x14c>)
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f383 8810 	msr	PRIMASK, r3
}
 8003180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003182:	f3ef 8310 	mrs	r3, PRIMASK
 8003186:	61bb      	str	r3, [r7, #24]
  return(result);
 8003188:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f383 8810 	msr	PRIMASK, r3
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	438a      	bics	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	f383 8810 	msr	PRIMASK, r3
}
 80031b2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	2120      	movs	r1, #32
 80031ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2278      	movs	r2, #120	; 0x78
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e011      	b.n	80031ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	2120      	movs	r1, #32
 80031d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2278      	movs	r2, #120	; 0x78
 80031e6:	2100      	movs	r1, #0
 80031e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b010      	add	sp, #64	; 0x40
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	01ffffff 	.word	0x01ffffff
 80031f8:	fffffedf 	.word	0xfffffedf

080031fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320c:	e04b      	b.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3301      	adds	r3, #1
 8003212:	d048      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7fd fca6 	bl	8000b64 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e04b      	b.n	80032c6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2204      	movs	r2, #4
 8003236:	4013      	ands	r3, r2
 8003238:	d035      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2208      	movs	r2, #8
 8003242:	4013      	ands	r3, r2
 8003244:	2b08      	cmp	r3, #8
 8003246:	d111      	bne.n	800326c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2208      	movs	r2, #8
 800324e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f83c 	bl	80032d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2284      	movs	r2, #132	; 0x84
 800325c:	2108      	movs	r1, #8
 800325e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2278      	movs	r2, #120	; 0x78
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e02c      	b.n	80032c6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	401a      	ands	r2, r3
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	429a      	cmp	r2, r3
 800327e:	d112      	bne.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	0018      	movs	r0, r3
 800328e:	f000 f81f 	bl	80032d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2284      	movs	r2, #132	; 0x84
 8003296:	2120      	movs	r1, #32
 8003298:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2278      	movs	r2, #120	; 0x78
 800329e:	2100      	movs	r1, #0
 80032a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e00f      	b.n	80032c6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	425a      	negs	r2, r3
 80032b6:	4153      	adcs	r3, r2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	001a      	movs	r2, r3
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d0a4      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08e      	sub	sp, #56	; 0x38
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d8:	f3ef 8310 	mrs	r3, PRIMASK
 80032dc:	617b      	str	r3, [r7, #20]
  return(result);
 80032de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
 80032e2:	2301      	movs	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4926      	ldr	r1, [pc, #152]	; (8003394 <UART_EndRxTransfer+0xc4>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330a:	f3ef 8310 	mrs	r3, PRIMASK
 800330e:	623b      	str	r3, [r7, #32]
  return(result);
 8003310:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
 8003314:	2301      	movs	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003340:	2b01      	cmp	r3, #1
 8003342:	d118      	bne.n	8003376 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	60bb      	str	r3, [r7, #8]
  return(result);
 800334a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334e:	2301      	movs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2110      	movs	r1, #16
 8003366:	438a      	bics	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	2120      	movs	r1, #32
 800337c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	669a      	str	r2, [r3, #104]	; 0x68
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b00e      	add	sp, #56	; 0x38
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	fffffedf 	.word	0xfffffedf

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	2600      	movs	r6, #0
 800339c:	4d0c      	ldr	r5, [pc, #48]	; (80033d0 <__libc_init_array+0x38>)
 800339e:	4c0d      	ldr	r4, [pc, #52]	; (80033d4 <__libc_init_array+0x3c>)
 80033a0:	1b64      	subs	r4, r4, r5
 80033a2:	10a4      	asrs	r4, r4, #2
 80033a4:	42a6      	cmp	r6, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	2600      	movs	r6, #0
 80033aa:	f000 f821 	bl	80033f0 <_init>
 80033ae:	4d0a      	ldr	r5, [pc, #40]	; (80033d8 <__libc_init_array+0x40>)
 80033b0:	4c0a      	ldr	r4, [pc, #40]	; (80033dc <__libc_init_array+0x44>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	42a6      	cmp	r6, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	00b3      	lsls	r3, r6, #2
 80033be:	58eb      	ldr	r3, [r5, r3]
 80033c0:	4798      	blx	r3
 80033c2:	3601      	adds	r6, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	00b3      	lsls	r3, r6, #2
 80033c8:	58eb      	ldr	r3, [r5, r3]
 80033ca:	4798      	blx	r3
 80033cc:	3601      	adds	r6, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	080034b0 	.word	0x080034b0
 80033d4:	080034b0 	.word	0x080034b0
 80033d8:	080034b0 	.word	0x080034b0
 80033dc:	080034b4 	.word	0x080034b4

080033e0 <memset>:
 80033e0:	0003      	movs	r3, r0
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d100      	bne.n	80033ea <memset+0xa>
 80033e8:	4770      	bx	lr
 80033ea:	7019      	strb	r1, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	e7f9      	b.n	80033e4 <memset+0x4>

080033f0 <_init>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr

080033fc <_fini>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr
